<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mozilla | In Pursuit of Laziness]]></title>
  <link href="http://manishearth.github.io/blog/categories/mozilla/atom.xml" rel="self"/>
  <link href="http://manishearth.github.io/"/>
  <updated>2016-08-18T23:08:41+05:30</updated>
  <id>http://manishearth.github.io/</id>
  <author>
    <name><![CDATA[Manish Goregaokar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting at Mozilla]]></title>
    <link href="http://manishearth.github.io/blog/2016/06/04/starting-at-mozilla/"/>
    <updated>2016-06-04T20:44:37+05:30</updated>
    <id>http://manishearth.github.io/blog/2016/06/04/starting-at-mozilla</id>
    <content type="html"><![CDATA[<p>I got a job!</p>

<p>I&rsquo;m now working at Mozilla as a Research Engineer, on <a href="https://servo.org/">Servo</a>.</p>

<p>I started two weeks ago, and so far I&rsquo;m really enjoying it! I feel quite lucky to
get to work on an open source project; with an amazing and helpful team. Getting to do most
of my work in Rust is great, too :)</p>

<p>So far I&rsquo;ve been working on the network stack (specifically, <a href="https://github.com/servo/servo/pull/11556">&ldquo;making fetch happen&rdquo;</a>),
and I&rsquo;ll probably be spending time on DOM things as well.</p>

<p>Really excited to see how this goes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing a GC in Rust]]></title>
    <link href="http://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust/"/>
    <updated>2015-09-01T00:23:40+05:30</updated>
    <id>http://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust</id>
    <content type="html"><![CDATA[<p>For a while I&rsquo;ve been working on a <a href="http://github.com/Manishearth/rust-gc/">garbage collector for Rust</a> with <a href="http://github.com/mystor">Michael
Layzell</a>. I thought this would be a good time to talk of our design and progress so far.</p>

<h1>Motivation</h1>

<p>&ldquo;Wait&rdquo;, you ask, &ldquo;why does Rust need a garbage collector&rdquo;? Rust is supposed to work <em>without</em> a GC,
that&rsquo;s one of its main selling points!</p>

<p>True. Rust <em>does</em> work pretty well without a GC. It&rsquo;s managed to do without one so far, and we still
have all sorts of well-written crates out there (none of which use a GC).</p>

<p>But Rust is not just about low-cost memory safety. It&rsquo;s also <a href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/">about choosing your costs and
guarantees</a>. <code>Box&lt;T&gt;</code> and stack allocation are not always sufficient, sometimes one needs to
reach for something like <code>Rc&lt;T&gt;</code> (reference counting). But even <code>Rc</code> is not perfect; it can&rsquo;t handle
cycles between pointers. There are solutions to that issue like using <code>Weak&lt;T&gt;</code>, but that only works
in limited cases (when you know what the points-to graph looks like at compile time), and isn&rsquo;t very
ergonomic.</p>

<p>Cases where one needs to maintain a complicated, dynamic graph are where a GC becomes useful.
Similarly, if one is writing an interpreter for a GCd language, having a GC in Rust would simplify
things a lot.</p>

<p>Not to say that one should pervasively use a GC in Rust. Similar to <code>Rc&lt;T&gt;</code>, it&rsquo;s best to use
regular ownership-based memory management as much as possible, and sprinkle <code>Rc</code>/<code>Gc</code> in places
where your code needs it.</p>

<h1>Previous designs</h1>

<p>This isn&rsquo;t the first GC in Rust. Automatic memory management has existed before in various forms,
but all were limited.</p>

<p>Besides the ones listed below, Nick Fitzgerald&rsquo;s <a href="https://github.com/fitzgen/bacon-rajan-cc">cycle collector</a> based on <a href="researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf">this paper</a>
exists and is something that you should look into if you&rsquo;re interested. There&rsquo;s also <a href="https://github.com/pliniker/mo-gc/blob/master/doc/Project-RFC.md">an RFC</a>
by Peter Liniker which sketches out a design for an immutable GC.</p>

<h2>Core Rust GC(s)</h2>

<p>Rust itself had a garbage collector until a bit more than a year ago. These &ldquo;managed pointers&rdquo;
(<code>@T</code>) were part of the language. They were removed later with a plan to make GC a library feature.</p>

<p>I believe these were basically reference counted (cycle collected?) pointers with some language
integration, but I&rsquo;m not sure.</p>

<p>Nowadays, the only form of automatic memory management in Rust are via <a href="http://doc.rust-lang.org/alloc/rc/struct.Rc.html"><code>Rc</code></a> and <a href="http://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc</code></a>
which are nonatomic and atomic reference counted pointers respectively. In other words, they keep
track of the number of shared references via a reference count (incremented when it is cloned,
decremented when destructors run). If the reference count reaches zero, the contents are cleaned up.</p>

<p>This is a pretty useful abstraction, however, as mentioned above, it doesn&rsquo;t let you create cycles
without leaking them.</p>

<h2>Spidermonkey</h2>

<p><em>You can read more about Servo&rsquo;s Spidermonkey bindings <a href="https://blog.mozilla.org/research/2014/08/26/javascript-servos-only-garbage-collector/">in this blog post</a> (somewhat
outdated, but still relevant)</em></p>

<p>In Servo we use <a href="http://github.com/servo/rust-mozjs/">bindings to the Spidermonkey Javascript engine</a>. Since Javascript is a
garbage collected language, the Rust representations of Javascript objects are also garbage
collected.</p>

<p>Of course, this sort of GC isn&rsquo;t really useful for generic use since it comes bundled with a JS
runtime. However, the Rust side of the GC is of a design that could be used in an independent
library.</p>

<p>The Rust side of the Spidermonkey GC is done through a bunch of smart pointers, and a trait called
<code>JSTraceable</code>. <code>JSTraceable</code> is a trait which can &ldquo;trace&rdquo; recursively down some data, finding and
marking all GC-managed objects inside it. This is autoderived using Rust&rsquo;s plugin infrastructure, so
a simple <code>#[jstraceable]</code> annotation will generate trace hooks for the struct it is on.</p>

<p>Now, we have various smart pointers. The first is <code>JS&lt;T&gt;</code>. This is opaque, but can be held by other
GC-managed structs. To use this on the stack, this must be explicitly <em>rooted</em>, via <code>.root()</code>. This
produces a <code>Root&lt;T&gt;</code>, which can be dereferenced to get the inner object. When the <code>Root</code> is created,
the contained object is listed in a collection of &ldquo;roots&rdquo; in a global. A root indicates that the
value is being used on the stack somewhere, and the GC starts tracing usage from these roots. When
the <code>Root&lt;T&gt;</code> is destroyed, the root is removed.</p>

<p>The problem with this is that <code>JS&lt;T&gt;</code> doesn&rsquo;t work on the stack. There is no way for the GC to know
that we are holding on to <code>JS&lt;T&gt;</code> on the stack. So, if I copy a <code>JS&lt;T&gt;</code> to the stack, remove all
references to it from objects in the GC heap, and trigger a collection, the <code>JS&lt;T&gt;</code> will still be
around on the stack after collection since the GC can&rsquo;t trace to it. If I attempt to root it, I may
get a panic or a segfault depending on the implementation.</p>

<p>To protect against this, we have a bunch of lints. The <a href="https://github.com/servo/servo/blob/master/components/plugins/lints/unrooted_must_root.rs">relevant one</a> here protects
against <code>JS&lt;T&gt;</code> from being carried around on the stack; but like most lints, it&rsquo;s not perfect.</p>

<p>To summarize: Spidermonkey gives us a good GC. However using it for a generic Rust program is ill
advised. Additionally, Servo&rsquo;s wrappers around the GC are cheap, but need lints for safety. While it
would probably be possible to write safer wrappers for general usage, it&rsquo;s pretty impractical to
carry around a JS runtime when you don&rsquo;t need one.</p>

<p>However, Spidermonkey&rsquo;s GC did inspire me to think more into the matter.</p>

<h1>Brainstorming a design</h1>

<p>For quite a while I&rsquo;d had various ideas about GCs. Most were simplifications of Servo&rsquo;s wrappers
(there&rsquo;s some complexity brought in there by Spidermonkey that&rsquo;s not necessary for a general GC).
Most were tracing/rooting with mark-and-sweep collection. All of them used lints. Being rather busy,
I didn&rsquo;t really work on it past that, but planned to work on it if I could find someone to work
with.</p>

<p>One day, <a href="http://github.com/mystor">Michael</a> pinged me on IRC and asked me about GCs. Lots of people knew that I was
interested in writing a GC for Rust, and one of them directed him to me when he expressed a similar
interest.</p>

<p>So we started discussing GCs. We settled on a tracing mark-and-sweep GC. In other words, the GC runs
regular &ldquo;sweeps&rdquo; where it first &ldquo;traces&rdquo; the usage of all objects and marks them and their children
as used, and then sweeps up all unused objects.</p>

<p>This model on its own has a flaw. It doesn&rsquo;t know about GC pointers held on the stack as local
variables (&ldquo;stack roots&rdquo;). There are multiple methods for solving this. We&rsquo;ve already seen one above
in the Spidermonkey design &ndash; maintain two types of pointers (one for the stack, one for the heap),
and try very hard using static analysis to ensure that they don&rsquo;t cross over.</p>

<p>A common model (used by GCs like Boehm, called &ldquo;conservative GCs&rdquo;) is to do something called &ldquo;stack
scanning&rdquo;. In such a system, the GC goes down the stack looking for things which may perhaps be GC
pointers. Generally the GC allocates objects in known regions of the memory, so a GC pointer is any
value on the stack which belongs to one of these regions.</p>

<p>Of course, this makes garbage collection rather inefficient, and will miss cases like <code>Box&lt;Gc&lt;T&gt;&gt;</code>
where the GCd pointer is accessible, but through a non-GC pointer.</p>

<p>We decided rather early on that we didn&rsquo;t want a GC based on lints or stack scanning. Both are
rather suboptimal solutions in my opinion, and very hard to make sound<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. We were also hoping that
Rust&rsquo;s type system and ownership semantics could help us in designing a good, safe, API.</p>

<p>So, we needed a way to keep track of roots, and we needed a way to trace objects.</p>

<h2>Tracing</h2>

<p>The latter part was easy. We wrote a compiler plugin (well, we stole <a href="https://github.com/servo/servo/blob/master/components/plugins/jstraceable.rs#L38">Servo&rsquo;s tracing plugin which
I&rsquo;d written earlier</a>) which autoderives an implementation of the <code>Trace</code> trait on any
given struct or enum, using the same internal infrastructure that <code>#[derive(PartialEq)]</code> and the
rest use. So, with just the following code, it&rsquo;s easy to make a struct or enum gc-friendly:</p>

<pre><code class="rust">#[derive(Trace)]
struct Foo {
    x: u8,
    y: Bar,
}

#[derive(Trace)]
enum Bar {
    Baz(u8), Quux
}
</code></pre>

<p>For a <code>foo</code> of type <code>Foo</code> <code>foo.trace()</code>, will expand to a call of <code>foo.x.trace()</code> and
<code>foo.y.trace()</code>. <code>bar.trace()</code> will check which variant it is and call <code>trace()</code> on the <code>u8</code> inside
if it&rsquo;s a <code>Baz</code>. For most structs this turns out to be a no-op and is often optimized away by
inlining, but if a struct contains a <code>Gc&lt;T&gt;</code>, the special implementation of <code>Trace</code> for <code>Gc&lt;T&gt;</code> will
&ldquo;mark&rdquo; the traceability of the <code>Gc&lt;T&gt;</code>. Types without <code>Trace</code> implemented cannot be used in types
implementing <code>Trace</code> or in a <code>Gc</code>, which is enforced with a <code>T: Trace</code> bound on <code>Gc&lt;T&gt;</code>.</p>

<p>So, we have a way of walking the fields of a given object and finding inner <code>Gc&lt;T&gt;</code>s. Splendid. This
lets us write the mark&amp;sweep phase easily: Take the list of known reachable <code>Gc&lt;T&gt;</code>s, walk their
contents until you find more <code>Gc&lt;T&gt;</code>s (marking all you find), and clean up any which aren&rsquo;t
reachable.</p>

<h2>Rooting</h2>

<p>Of course, now we have to solve the problem of keeping track of the known reachable <code>Gc&lt;T&gt;</code>s, i.e.
the roots. This is a hard problem to solve without language support, and I hope that eventually we
might be able to get the language hooks necessary to solve it. LLVM <a href="http://llvm.org/docs/GarbageCollection.html#gcroot">has support for tracking
GCthings on the stack</a>, and some day we may be able to leverage that in Rust.</p>

<p>As noted above, Spidermonkey&rsquo;s solution was to have non-rooted (non-dereferencable) heap pointers,
which can be explicitly converted to rooted pointers and then read.</p>

<p>We went the other way. All <code>Gc&lt;T&gt;</code> pointers, when created, are considered &ldquo;rooted&rdquo;. The instance of
<code>Gc&lt;T&gt;</code> has a &ldquo;rooted&rdquo; bit set to true, and the underlying shared box (<code>GcBox</code>, though this is not a
public interface) has its &ldquo;root count&rdquo; set to one.</p>

<p>When this <code>Gc&lt;T&gt;</code> is cloned, an identical <code>Gc&lt;T&gt;</code> (with rooted bit set to true) is returned, and the
underlying root count is incremented. Cloning a <code>Gc</code> does not perform a deep copy.</p>

<pre><code class="rust">let a = Gc::new(20); // a.root = true, (*a.ptr).roots = 1, (*a.ptr).data = 20

// ptr points to the underlying box, which contains the data as well as
// GC metadata like the root count. `Gc::new()` will allocate this box

let b = a.clone(); // b.root = true, (*a.ptr).roots++, b.ptr = a.ptr
</code></pre>

<p>This is rather similar to how <code>Rc</code> works, however there is no <code>root</code> field, and the <code>roots</code> counter
is called a &ldquo;reference counter&rdquo;.</p>

<p>For regular local sharing, it is recommended to just use a borrowed reference to the inner variable
(borrowing works fine with rust-gc!) since there is no cost to creating this reference.</p>

<p>When a GC thing is put inside another GC thing, the first thing no longer can remain a root. This is
handled by &ldquo;unrooting&rdquo; the first GC thing:</p>

<pre><code class="rust">struct Foo {
    bar: u32,
    baz: Gc&lt;u32&gt;,
}

let a = Gc::new(20); // why anyone would want to GC an integer I'll never know
                     // but I'll stick with this example since it's simple

let b = Gc::new(Foo {bar: 1, baz: a});
// a.root = false, (*a.ptr).roots--
// b initialized similar to previous example

// `a` was moved into `b`, so now `a` cannot be accessed directly here
// other than through `b`, and `a` is no longer a root.
// To avoid moving a, passing `a.clone()` to `b` will work
</code></pre>

<p>Of course, we need a way to traverse the object passed to the <code>Gc&lt;T&gt;</code>, in this case <code>Foo</code>, and look
for any contained <code>Gc&lt;T&gt;</code>s to unroot. Sound familiar? This needs the same mechanism that <code>trace()</code>
needed! We add struct-walking <code>root()</code> and <code>unroot()</code> methods to the <code>Trace</code> trait which are auto-
derived exactly the same way, and continue. (We don&rsquo;t need <code>root()</code> right now, but we will need it
later on).</p>

<p>Now, during collection, we can just traverse the list of <code>GcBox</code>s and use the ones with a nonzero
root count as roots for our mark traversal.</p>

<p>So far, so good. We have a pretty sound design for a GC that works &hellip; for immutable data.</p>

<h3>Mutability</h3>

<p>Like <code>Rc&lt;T&gt;</code>, <code>Gc&lt;T&gt;</code> is by default immutable. Rust abhors aliasable mutability, <a href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/">even in single
threaded contexts</a>, and both these smart pointers allow aliasing.</p>

<p>Mutation poses a problem for our GC, beyond the regular problems of aliasable mutability: It&rsquo;s
possible to move rooted things into heap objects and vice versa:</p>

<pre><code class="rust">let x = Gc::new(20);

let y = Gc::new(None);

*y = Some(x); // uh oh, x is still considered rooted!

// and the reverse!

let y = Gc::new(Some(Gc::new(20)));

let x = y.take(); // x was never rooted!
// `take()` moves the `Some(Gc&lt;u32&gt;)` out of `y`, replaces it with `None`       
</code></pre>

<p>Since <code>Gc&lt;T&gt;</code> doesn&rsquo;t implement <code>DerefMut</code>, none of this is possible &mdash; one cannot mutate the
inner data. This is one of the places where Rust&rsquo;s ownership/mutability system works out awesomely
in our favor.</p>

<p>Of course, an immutable GC isn&rsquo;t very useful. We can&rsquo;t even create cycles in an immutable GC, so why
would anyone need this in the first place<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>?</p>

<p>So of course, we needed to make it somehow mutable. People using <code>Rc&lt;T&gt;</code> solve this problem by using
<code>RefCell&lt;T&gt;</code>, which maintains something similar to the borrow semantics at runtime and is internally
mutable. <code>RefCell&lt;T&gt;</code> itself can&rsquo;t be used by us since it doesn&rsquo;t guard against the problem
illustrated above (and hence won&rsquo;t implement <code>Trace</code>, but a similar cell type would work).</p>

<p>So we created <code>GcCell&lt;T&gt;</code>. This behaves just like <code>RefCell&lt;T&gt;</code>, except that it will <code>root()</code> before
beginning a mutable borrow, and <code>unroot()</code> before ending it (well, only if it itself is not rooted,
which is tracked by an internal field similar to <code>Gc&lt;T&gt;</code>). Now, everything is safe:</p>

<pre><code class="rust">#[derive(Trace)]
struct Foo {
    a: u8,
    b: GcCell&lt;Gc&lt;u8&gt;&gt;,
}

let x = Gc::new(20);

let y = Gc::new(Foo {a: 10, b: Gc::new(30)});
{
    *y.b.borrow_mut() = x; // the `Gc(30)` from `y.b` was rooted by this call
                           // but since we don't actually use it here,
                           // the destructor gets rid of it.
                           // We could use swap() to retain access to it.
    // ...
    // x unrooted
}


// and the reverse case works too:

let y = Gc::new(GcCell::new(Some(Gc::new(20))));

let x = y.borrow_mut().take(); // the inner `Some(Gc(20))` gets rooted by `borrow_mut()`
                               // before `x` can access it
</code></pre>

<p>So now, mutation works too! We have a working garbage collector!</p>

<h1>Open problems</h1>

<h2>Destructors</h2>

<p>I believe this can be solved without lints, but it <em>may</em> require some upcoming features of Rust to
be implemented first (like specialization).</p>

<p>In essence, destructors implemented on a value inside <code>Gc&lt;T&gt;</code> can be unsafe. This will only happen
if they try to access values within a <code>Gc&lt;T&gt;</code> &mdash; if they do, they may come across a box that
has already been collected, or they may lengthen the lifetime of a box scheduled to be collected.</p>

<p>The basic solution to this is to use &ldquo;finalizers&rdquo; instead of destructors. Finalizers, like in Java,
are not guaranteed to run. However, we may need further drop hooks or trait specialization to make
an airtight interface for this. I don&rsquo;t have a concrete design for this yet, though.</p>

<h2>Concurrency</h2>

<p>Our model mostly just works in a concurrent situation (with thread safety tweaks, of course); in
fact it&rsquo;s possible to make it so that the concurrent GC will not &ldquo;stop the world&rdquo; unless someone
tries to do a write to a <code>GcCell</code>. We have an experimental concurrent GC in <a href="https://github.com/Manishearth/rust-gc/pull/6">this pull
request</a>. We still need to figure out how to make interop between both GCs safe, though we may
just end up making them such that an object using one GC cannot be fed to an object using the other.</p>

<h2>Performance</h2>

<p>So far we haven&rsquo;t really focused on performance, and worked on ensuring safety. Our collection
triggering algorithm, for example, was horribly inefficient, though we planned on improving it. The
wonderful Huon <a href="https://github.com/Manishearth/rust-gc/pull/9">fixed this</a>, though.</p>

<p>Similarly, we haven&rsquo;t yet optimized storage. We have some ideas which we may work on later. (If you
want to help, contributions welcome!)</p>

<h2>Cross-crate deriving</h2>

<p>Currently, an object deriving <code>Trace</code> should have <code>Trace</code>able children. This isn&rsquo;t always possible
when members from another crate (which does not depend on rust-gc) are involved. At the moment, we
allow an <code>#[unsafe_ignore_trace]</code> annotation on fields which are of this type (which excludes it
from being traced &ndash; if that crate doesn&rsquo;t transitively depend on rust-gc, its members cannot
contain GCthings anyway unless generics are involved). It should be possible to detect whether or
not this is safe, and/or autoderive <code>Trace</code> using the opt-in builtin traits framework (needs
specialization to work), but at the moment we don&rsquo;t do anything other than expose that annotation.</p>

<p>Stdlib support for a global <code>Trace</code> trait that everyone derives would be awesome.</p>

<h1>Conclusion</h1>

<p>Designing a GC was a wonderful experience! I didn&rsquo;t get to write much code (I was busy and Michael
was able to implement most of it overnight because he&rsquo;s totally awesome), but the long design
discussions followed by trying to figure out holes in the GC design in every idle moment of the day
were quite enjoyable. GCs are very hard to get right, but it&rsquo;s very satisfying when you come up with
a design that works! I&rsquo;m also quite happy at how well Rust helped in making a safe interface.</p>

<p>I encourage everyone to try it out and/or find holes in our design. Contributions of all kind
welcome, we&rsquo;d especially love performance improvements and testcases.</p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=10148471">HN</a>, <a href="https://www.reddit.com/r/rust/comments/3j4bx2/designing_a_gc_in_rust/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m very skeptical that it&rsquo;s possible to make either of these completely sound without writing lints which effectively rewrite a large chunk of the compiler<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>There is a case to be made for an immutable GC which allows some form of deferred initialization of GC fields, however.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Rust Achieves Thread Safety]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/30/how-rust-achieves-thread-safety/"/>
    <updated>2015-05-30T04:25:32+05:30</updated>
    <id>http://manishearth.github.io/blog/2015/05/30/how-rust-achieves-thread-safety</id>
    <content type="html"><![CDATA[<p><em>In every talk I have given till now, the question &ldquo;how does Rust achieve thread safety?&rdquo;
has invariably come up<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I usually just give an overview, but this provides a more comprehensive
explanation for those who are interested</em></p>

<p>See also: <a href="http://huonw.github.io/blog/2015/02/some-notes-on-send-and-sync/">Huon&rsquo;s blog post on the same topic</a></p>

<p>In my <a href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/">previous post</a> I touched a bit on the <a href="http://doc.rust-lang.org/std/marker/trait.Copy.html"><code>Copy</code></a> trait. There are other such
&ldquo;marker&rdquo; traits in the standard library, and the ones relevant to this discussion are <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>
and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a>. I recommend reading that post if you&rsquo;re not familiar with Rust wrapper types
like <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> and <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a>, since I&rsquo;ll be using them as examples throughout this post;
but the concepts explained here are largely independent.</p>

<p>For the purposes of this post, I&rsquo;ll restrict thread safety to mean no data races or cross-thread
dangling pointers. Rust doesn&rsquo;t aim to solve race conditions. However, there are projects which
utilize the type system to provide some form of extra safety, for example <a href="https://github.com/Munksgaard/rust-sessions">rust-
sessions</a> attempts to provide protocol safety using
session types.</p>

<p>These traits are auto-implemented using a feature called &ldquo;opt in builtin traits&rdquo;. So, for example,
if struct <code>Foo</code> contains only <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> fields, it will also be <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a>, unless we
explicitly opt out using <code>impl !Sync for Foo {}</code>. Similarly, if struct <code>Foo</code> contains at least one
non-<a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> type, it will not be <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> either, unless it explicitly opts in (<code>unsafe
impl Sync for Foo {}</code>)</p>

<p>This means that, for example, a <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender</code></a> for a <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> type is itself
<a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>, but a <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender</code></a> for a non-<code>Send</code> type will not be <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>. This
pattern is quite powerful; it lets one use channels with non-threadsafe data in a single-threaded
context without requiring a separate &ldquo;single threaded&rdquo; channel abstraction.</p>

<p>At the same time, structs like <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a> and <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> which contain
<a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>/<a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> fields have explicitly opted out of one or more of these because the
invariants they rely on do not hold in threaded situations.</p>

<p>It&rsquo;s actually possible to design your own library with comparable thread safety guarantees outside
of the compiler &mdash; while these marker traits are specially treated by the compiler, the special
treatment is not necessary for their working. Any two opt-in builtin traits could be used here.</p>

<p><a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> have slightly differing meanings, but are very intertwined.</p>

<p><a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> types can be moved between threads without an issue. It answers the question
&ldquo;if this variable were moved to another thread, would it still be valid for use?&rdquo;.
Most objects which completely own their contained data qualify here. Notably, <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a> doesn&rsquo;t
(since it is shared ownership). Another exception is <a href="https://doc.rust-lang.org/nightly/std/thread/struct.LocalKey.html"><code>LocalKey</code></a>, which
<em>does</em> own its data but isn&rsquo;t valid from other threads. Borrowed data does qualify to be <code>Send</code>, but
in most cases it can&rsquo;t be sent across threads due to a constraint that will be touched upon later.</p>

<p>Even though types like <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> use non-atomic reference counting, it can be sent safely
between threads because this is a transfer of <em>ownership</em> (a move). Sending a <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> to another thread
will be a move and will make it unusable from the original thread; so this is fine.</p>

<p><a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a>, on the other hand, is about synchronous access. It answers the question: &ldquo;if
multiple threads were all trying to access this data, would it be safe?&rdquo;. Types like
<a href="http://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex</code></a> and other lock/atomic based types implement this, along with primitive types.
Things containing pointers generally are not <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a>.</p>

<p><code>Sync</code> is sort of a crutch to <code>Send</code>; it helps make other types <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> when sharing is
involved. For example, <code>&amp;T</code> and <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> are only <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> when the inner data is <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> (there&rsquo;s an additional
<a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> bound in the case of <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a>). In words, stuff that has shared/borrowed ownership can be sent
to another thread if the shared/borrowed data is synchronous-safe.</p>

<p><a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a>, while <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>, is not <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> because of the non atomic reference counting.</p>

<p>Bringing it together, the gatekeeper for all this is <a href="http://doc.rust-lang.org/std/thread/fn.spawn.html"><code>thread::spawn()</code></a>. It has the signature</p>

<pre><code class="rust">pub fn spawn&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt; where F: FnOnce() -&gt; T, F: Send + 'static, T: Send + 'static
</code></pre>

<p>Admittedly, this is confusing/noisy, partially because it&rsquo;s allowed to return a value, and also because
it returns a handle from which we can block on a thread join. We can conjure a simpler <code>spawn</code> API for our needs though:</p>

<pre><code class="rust">pub fn spawn&lt;F&gt;(f: F) where F: FnOnce(), F: Send + 'static
</code></pre>

<p>which can be called like:</p>

<pre><code class="rust">let mut x = vec![1,2,3,4];

// `move` instructs the closure to move out of its environment
thread::spawn(move || {
   x.push(1);

});

// x is not accessible here since it was moved
</code></pre>

<p>In words, <code>spawn()</code> will take a callable (usually a closure) that will be called once, and contains
data which is <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> and <code>'static</code>. Here, <code>'static</code> just means that there is no borrowed
data contained in the closure. This is the aforementioned constraint that prevents the sharing of
borrowed data across threads; without it we would be able to send a borrowed pointer to a thread that
could easily outlive the borrow, causing safety issues.</p>

<p>There&rsquo;s a slight nuance here about the closures &mdash; closures can capture outer variables,
but by default they do so by-reference (hence the <code>move</code> keyword). They autoimplement <code>Send</code>
and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> depending on their capture clauses. For more on their internal representation,
see <a href="http://huonw.github.io/blog/2015/05/finding-closure-in-rust/">huon&rsquo;s post</a>. In this case, <code>x</code> was captured by-move; i.e. as <a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec&lt;T&gt;</code></a>
(instead of being similar to <code>&amp;Vec&lt;T&gt;</code> or something), so the closure itself can be <code>Send</code>.
Without the <code>move</code> keyword, the closure would not be `&lsquo;static&rsquo; since it contains borrowed
content.</p>

<p>Since the closure inherits the <code>Send</code>/<code>Sync</code>/<code>'static</code>-ness of its captured data, a closure
capturing data of the correct type will satisfy the <code>F: Send+'static</code> bound.</p>

<p>Some examples of things that are allowed and not allowed by this function (for the type of <code>x</code>):</p>

<ul>
<li><a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec&lt;T&gt;</code></a>, <a href="http://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box&lt;T&gt;</code></a> are allowed because they are <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> and <code>'static</code> (when the inner type is of the same kind)</li>
<li><code>&amp;T</code> isn&rsquo;t allowed because it&rsquo;s not <code>'static</code>. This is good, because borrows should have a statically-known lifetime. Sending a borrowed pointer to a thread may lead to a use after free, or otherwise break aliasing rules.</li>
<li><a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc&lt;T&gt;</code></a> isn&rsquo;t <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>, so it isn&rsquo;t allowed. We could have some other <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc&lt;T&gt;</code></a>s hanging around, and end up with a data race on the refcount.</li>
<li><code>Arc&lt;Vec&lt;u32&gt;&gt;</code> is allowed (<a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec&lt;T&gt;</code></a> is <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> if the inner type is); we can&rsquo;t cause a safety violation here. Iterator invalidation requires mutation, and <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> doesn&rsquo;t provide this by default.</li>
<li><code>Arc&lt;Cell&lt;T&gt;&gt;</code> isn&rsquo;t allowed. <a href="https://doc.rust-lang.org/std/cell/struct.Cell.html"><code>Cell&lt;T&gt;</code></a> provides copying-based internal mutability, and isn&rsquo;t <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> (so the <code>Arc&lt;Cell&lt;T&gt;&gt;</code> isn&rsquo;t <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>). If this were allowed, we could have cases where larger structs are getting written to from different threads simultaneously resulting in some random mishmash of the two. In other words, a data race.</li>
<li><code>Arc&lt;Mutex&lt;T&gt;&gt;</code> or <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> are allowed (for <code>Send</code> <code>T</code>). The inner types use threadsafe locks and provide lock-based internal mutability. They can guarantee that only one thread is writing to them at any point in time. For this reason, the mutexes are <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> regardless of the inner <code>T</code> (as long as it is <code>Send</code>), and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> types can be shared safely with wrappers like <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc</code></a>. From the point of view of the inner type, it&rsquo;s only being accessed by one thread at a time (slightly more complex in the case of <a href="http://doc.rust-lang.org/std/sync/struct.RwLock.html"><code>RwLock</code></a>), so it doesn&rsquo;t need to know about the threads involved. There can&rsquo;t be data races when <code>Sync</code> types like these are involved.</li>
</ul>


<p>As mentioned before, you can in fact create a <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender</code></a>/<a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html"><code>Receiver</code></a> pair of non-<code>Send</code> objects. This sounds a bit
counterintuitive &mdash; shouldn&rsquo;t we be only sending values which are <code>Send</code>? However, <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender&lt;T&gt;</code></a> is only
<code>Send</code> if <code>T</code> is <code>Send</code>; so even if we can use a <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender</code></a> of a non-<code>Send</code> type, we cannot send it to another thread,
so it cannot be used to violate thread safety.</p>

<p>There is also a way to utilize the <code>Send</code>-ness of <code>&amp;T</code> (which is not <code>'static</code>) for some <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> <code>T</code>, namely <a href="http://doc.rust-lang.org/std/thread/fn.scoped.html"><code>thread::scoped</code></a>.
This function does not have the <code>'static</code> bound, but it instead has an RAII guard which forces a join before the borrow ends. This
allows for easy fork-join parallelism without necessarily needing a <a href="http://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex</code></a>.
Sadly, there <a href="http://cglab.ca/~abeinges/blah/everyone-peaches/">are</a> <a href="http://smallcultfollowing.com/babysteps/blog/2015/04/29/on-reference-counting-and-leaks/">problems</a> which crop up when this interacts with <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a> cycles, so the API
is currently unstable and will be redesigned. This is not a problem with the language design or the design of <code>Send</code>/<code>Sync</code>,
rather it is a perfect storm of small design inconsistencies in the libraries.</p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=9628131">HN</a>, <a href="https://www.reddit.com/r/rust/comments/37s5x2/how_rust_achieves_thread_safety/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>So much that I added bonus slides about thread safety to the end of my deck, and of course I ended up using them at the talk I gave recently<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrapper Types in Rust: Choosing Your Guarantees]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/"/>
    <updated>2015-05-27T20:29:59+05:30</updated>
    <id>http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees</id>
    <content type="html"><![CDATA[<p><em>This post is now <a href="http://doc.rust-lang.org/nightly/book/choosing-your-guarantees.html">a part of the official rust book</a></em></p>

<p>In my <a href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/">previous post</a> I talked a bit about why the RWlock pattern is important for
accessing data, which is why Rust enforces this pattern either at compile time or runtime
depending on the abstractions used.</p>

<p>It occurred to me that there are many such abstractions in Rust, each with their unique guarantees.
The programmer once again has the choice between runtime and compile time enforcement. It occurred
to me that this plethora of &ldquo;wrapper types&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> could be daunting to newcomers; in this post I intend
to give a thorough explanation of what some prominent ones do and when they should be used.</p>

<p>I&rsquo;m assuming the reader knows about <a href="http://doc.rust-lang.org/book/ownership.html">ownership</a> and <a href="http://doc.rust-lang.org/book/references-and-borrowing.html">borrowing</a> in Rust.
Nevertheless, I will attempt to keep the majority of this post accessible to those not yet familiar with these
concepts. Aside from the two links into the book above, <a href="http://blog.skylight.io/rust-means-never-having-to-close-a-socket/">these</a> <a href="http://arthurtw.github.io/2014/11/30/rust-borrow-lifetimes.html">two</a> blog posts cover
the topic in depth.</p>

<h1>Basic pointer types</h1>

<h2><code>Box&lt;T&gt;</code></h2>

<p><a href="http://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box&lt;T&gt;</code></a> is an &ldquo;owned pointer&rdquo; or a &ldquo;box&rdquo;. While it can hand out borrowed references to the data, it is the only
owner of the data. In particular, when something like the following occurs:</p>

<pre><code class="rust">let x = Box::new(1);
let y = x;
// x no longer accessible here
</code></pre>

<p>Here, the box was <em>moved</em> into <code>y</code>. As <code>x</code> no longer owns it,
the compiler will no longer allow the programmer to use <code>x</code> after this. A box
can similarly be moved <em>out</em> of a function by returning, and when a
box (one which hasn&rsquo;t been moved) goes out of scope, destructors are run, deallocating
the inner data.</p>

<p>This abstraction is a low cost abstraction for dynamic allocation. If you want
to allocate some memory on the heap and safely pass a pointer to that memory around, this
is ideal. Note that you will only be allowed to share borrowed references to this by
the regular borrowing rules, checked at compile time.</p>

<h4>Interlude: <code>Copy</code></h4>

<p>Move/ownership semantics are not special to <code>Box&lt;T&gt;</code>; it is a feature of all types which are not <code>Copy</code>.</p>

<p>A <code>Copy</code> type is one where all the data it logically encompasses (usually, owns) is part of its stack
representation<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.
Most types containing pointers to other data are not <code>Copy</code>, since there is additional data
elsewhere, and simply copying the stack representation may accidentally share ownership of that data
in an unsafe manner.</p>

<p>Types like <code>Vec&lt;T&gt;</code> and <code>String</code> which also have data on the heap are also not <code>Copy</code>. Types
like the integer/boolean types are <code>Copy</code></p>

<p><code>&amp;T</code> and raw pointers <em>are</em> <code>Copy</code>. Even though they do point
to further data, they do not &ldquo;own&rdquo; that data. Whereas <code>Box&lt;T&gt;</code> can be thought of as
&ldquo;some data which happens to be dynamically allocated&rdquo;, <code>&amp;T</code> is thought of as &ldquo;a borrowing reference
to some data&rdquo;. Even though both are pointers, only the first is considered to be &ldquo;data&rdquo;. Hence,
a copy of the first should involve a copy of the data (which is not part of its stack representation),
but a copy of the second only needs a copy of the reference. <code>&amp;mut T</code> is not <code>Copy</code> because mutable aliases
cannot be shared, and <code>&amp;mut T</code> &ldquo;owns&rdquo; the data it points to somewhat since it can mutate.</p>

<p>Practically speaking, a type can be <code>Copy</code> if a copy of its stack representation doesn&rsquo;t violate
memory safety.</p>

<h2><code>&amp;T</code> and <code>&amp;mut T</code></h2>

<p>These are immutable and mutable references respectively. They follow the &ldquo;read-write lock&rdquo; pattern
described in my <a href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/">previous post</a>, such that one may either have only one mutable reference
to some data, or any number of immutable ones, but not both. This guarantee is enforced at compile time,
and has no visible cost at runtime. In most cases such pointers suffice for sharing cheap references between
sections of code.</p>

<p>These pointers cannot be copied in such a way that they outlive the lifetime associated with them.</p>

<h2><code>*const T</code> and <code>*mut T</code></h2>

<p>These are C-like raw pointers with no lifetime or ownership attached to them. They just point to some location
in memory with no other restrictions. The only guarantee that these provide is that they cannot be dereferenced
except in code marked <code>unsafe</code>.</p>

<p>These are useful when building safe, low cost abstractions like <code>Vec&lt;T&gt;</code>, but should be avoided in safe code.</p>

<h2><code>Rc&lt;T&gt;</code></h2>

<p>This is the first wrapper we will cover that has a runtime cost.</p>

<p><a href="http://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc&lt;T&gt;</code></a> is a reference counted pointer. In other words, this lets us have multiple &ldquo;owning&rdquo; pointers
to the same data, and the data will be freed (destructors will be run) when all pointers are out of scope.</p>

<p>Internally, it contains a shared &ldquo;reference count&rdquo;, which is incremented each time the <code>Rc</code> is cloned, and decremented
each time one of the <code>Rc</code>s goes out of scope. The main responsibility of <code>Rc&lt;T&gt;</code> is to ensure that destructors are called
for shared data.</p>

<p>The internal data here is immutable, and if a cycle of references is created, the data will be leaked. If we want
data that doesn&rsquo;t leak when there are cycles, we need a <em>garbage collector</em>. I do not know of any existing GCs in Rust,
but <a href="http://github.com/Manishearth/rust-gc">I am working on one with Michael Layzell</a> and there&rsquo;s <a href="https://github.com/fitzgen/rajan-bacon-cc">another cycle collecting one</a> being written by Nick
Fitzgerald.</p>

<h4>Guarantees</h4>

<p>The main guarantee provided here is that the data will not be destroyed until all references to it are out of scope.</p>

<p>This should be used when you wish to dynamically allocate and share some data (read-only) between various portions
of your program, where it is not certain which portion will finish using the pointer last. It&rsquo;s a viable alternative
to <code>&amp;T</code> when <code>&amp;T</code> is either impossible to statically check for correctness, or creates extremely unergonomic code where
the programmer does not wish to spend the development cost of working with.</p>

<p>This pointer is <em>not</em> thread safe, and Rust will not let it be sent or shared with other threads. This lets
one avoid the cost of atomics in situations where they are unnecessary.</p>

<p>There is a sister smart pointer to this one, <code>Weak&lt;T&gt;</code>. This is a non-owning, but also non-borrowed, smart pointer.
It is also similar to <code>&amp;T</code>, but it is not restricted in lifetime &mdash; a <code>Weak&lt;T&gt;</code> can be held on to forever. However,
it is possible that an attempt to access the inner data may fail and return <code>None</code>, since this can outlive the owned
<code>Rc</code>s. This is useful for when one wants cyclic data structures and other things.</p>

<h4>Cost</h4>

<p>As far as memory goes, <code>Rc&lt;T&gt;</code> is a single allocation, though it will allocate two extra words as compared to
a regular <code>Box&lt;T&gt;</code> (for &ldquo;strong&rdquo; and &ldquo;weak&rdquo; refcounts).</p>

<p><code>Rc&lt;T&gt;</code> has the computational cost of incrementing/decrementing the refcount whenever it is cloned or goes out of
scope respectively. Note that a clone will not do a deep copy, rather it will simply increment the inner reference count
and return a copy of the <code>Rc&lt;T&gt;</code></p>

<h1>Cell types</h1>

<p>&ldquo;Cells&rdquo; provide interior mutability. In other words, they contain data which can be manipulated even
if the type cannot be obtained in a mutable form (for example, when it is behind an <code>&amp;</code>-ptr or <code>Rc&lt;T&gt;</code>).</p>

<p><a href="http://doc.rust-lang.org/doc/std/cell/">The documentation for the <code>cell</code> module has a pretty good explanation for these</a>.</p>

<p>These types are <em>generally</em> found in struct fields, but they may be found elsewhere too.</p>

<h2><code>Cell&lt;T&gt;</code></h2>

<p><a href="http://doc.rust-lang.org/doc/std/cell/struct.Cell.html"><code>Cell&lt;T&gt;</code></a> is a type that provides zero-cost interior mutability, but only for <code>Copy</code> types.
Since the compiler knows that all the data owned by the contained value is on the stack, there&rsquo;s
no worry of leaking any data behind references (or worse!) by simply replacing the data.</p>

<p>It is still possible to violate your own invariants using this wrapper, so be careful when
using it. If a field is wrapped in <code>Cell</code>, it&rsquo;s a nice indicator that the chunk of data is mutable
and may not stay the same between the time you first read it and when you intend to use it.</p>

<pre><code class="rust">let x = Cell::new(1);
let y = &amp;x;
let z = &amp;x;
x.set(2);
y.set(3);
z.set(4);
println!("{}", x.get());
</code></pre>

<p>Note that here we were able to mutate the same value from various immutable references.</p>

<p>This has the same runtime cost as the following:</p>

<pre><code class="rust">let mut x = 1;
let y = &amp;mut x;
let z = &amp;mut x;
x = 2;
*y = 3;
*z = 4;
println!("{}", x;
</code></pre>

<p>but it has the added benefit of actually compiling successfully.</p>

<h4>Guarantees</h4>

<p>This relaxes the &ldquo;no aliasing with mutability&rdquo; restriction in places where it&rsquo;s
unnecessary. However, this also relaxes the guarantees that the restriction provides;
so if one&rsquo;s invariants depend on data stored within <code>Cell</code>, one should be careful.</p>

<p>This is useful for mutating primitives and other <code>Copy</code> types when there is no easy way of
doing it in line with the static rules of <code>&amp;</code> and <code>&amp;mut</code>.</p>

<p><a href="http://www.reddit.com/r/rust/comments/378tj6/blog_post_review_requested_container_types/crlfl74">Gábor Lehel</a> summed up the guarantees provided by <code>Cell</code> in a rather succinct manner:</p>

<blockquote><p>The basic guarantee we need to ensure is that interior references can&rsquo;t be invalidated (left dangling)
by mutation of the outer structure. (Think about references to the interiors of types like <code>Option</code>,
<code>Box</code>, <code>Vec</code>, etc.) <code>&amp;</code>, <code>&amp;mut</code>, and Cell each make a different tradeoff here.
<code>&amp;</code> allows shared interior references but forbids mutation;
<code>&amp;mut</code> allows mutation xor interior references but not sharing;
<code>Cell</code> allows shared mutability but not interior references.</p></blockquote>

<p>Ultimately, while shared mutability can cause many logical errors (as outlined in <a href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/">my previous post
</a>), it can only cause memory safety errors when coupled with &ldquo;interior references&rdquo;. This
is for types who have an &ldquo;interior&rdquo; whose type/size can itself be changed. One example of this is a
Rust enum; where by changing the variant you can change what type is contained. If you have an alias
to the inner type whilst the variant is changed, pointers within that alias may be invalidated.
Similarly, if you change the length of a vector while you have an alias to one of its elements, that
alias may be invalidated.</p>

<p>Since <code>Cell</code> doesn&rsquo;t allow references to the insides of a type (you can only copy out and copy back
in), enums and structs alike are safe to be aliased mutably within this.</p>

<p><a href="https://www.reddit.com/r/rust/comments/32ypxp/questions_about_mutability/cqfwl3h">This comment by Eddy also touches on the guarantees of <code>Cell</code> and the alternatives</a></p>

<h4>Cost</h4>

<p>There is no runtime cost to using <code>Cell&lt;T&gt;</code>, however if one is using it
to wrap larger (<code>Copy</code>) structs, it might be worthwhile to instead wrap individual
fields in <code>Cell&lt;T&gt;</code> since each write is a full copy of the struct.</p>

<h2><code>RefCell&lt;T&gt;</code></h2>

<p><a href="http://doc.rust-lang.org/doc/std/cell/struct.RefCell.html"><code>RefCell&lt;T&gt;</code></a> also provides interior mutability, but isn&rsquo;t restricted to <code>Copy</code> types.</p>

<p>Instead, it has a runtime cost. <code>RefCell&lt;T&gt;</code> enforces the RWLock pattern at runtime (it&rsquo;s like a single-threaded mutex),
unlike <code>&amp;T</code>/<code>&amp;mut T</code> which do so at compile time. This is done by the <code>borrow()</code> and
<code>borrow_mut()</code> functions, which modify an internal reference count and return smart pointers
which can be dereferenced immutably and mutably respectively. The refcount is restored
when the smart pointers go out of scope. With this system, we can dynamically ensure that
there are never any other borrows active when a mutable borrow is active. If the programmer
attempts to make such a borrow, the thread will panic.</p>

<pre><code class="rust">let x = RefCell::new(vec![1,2,3,4]);
{
    println!("{:?}", *x.borrow())
}

{
    let my_ref = x.borrow_mut();
    my_ref.push(1);
}
</code></pre>

<p>Similar to <code>Cell</code>, this is mainly useful for situations where it&rsquo;s hard or impossible to satisfy the
borrow checker. Generally one knows that such mutations won&rsquo;t happen in a nested form, but it&rsquo;s good
to check.</p>

<p>For large, complicated programs, it becomes useful to put some things in <code>RefCell</code>s to
make things simpler. For example, a lot of the maps in <a href="http://doc.rust-lang.org/rustc/middle/ty/struct.ctxt.html">the <code>ctxt</code> struct</a> in the rust compiler
internals are inside this wrapper. These are only modified once (during creation, which is not
right after initialization) or a couple of times in well-separated places. However, since this struct is
pervasively used everywhere, juggling mutable and immutable pointers would be hard (perhaps impossible)
and probably form a soup of <code>&amp;</code>-ptrs which would be hard to extend. On the other hand, the <code>RefCell</code>
provides a cheap (not zero-cost) way of safely accessing these. In the future, if someone adds some code
that attempts to modify the cell when it&rsquo;s already borrowed, it will cause a (usually deterministic) panic
which can be traced back to the offending borrow.</p>

<p>Similarly, in Servo&rsquo;s DOM we have a lot of mutation, most of which is local to a DOM type, but
some of which crisscrosses the DOM and modifies various things. Using <code>RefCell</code> and <code>Cell</code> to guard
all mutation lets us avoid worrying about mutability everywhere, and it simultaneously
highlights the places where mutation is <em>actually</em> happening.</p>

<p>Note that <code>RefCell</code> should be avoided if a mostly simple solution is possible with <code>&amp;</code> pointers.</p>

<h4>Guarantees</h4>

<p><code>RefCell</code> relaxes the <em>static</em> restrictions preventing aliased mutation, and
replaces them with <em>dynamic</em> ones. As such the guarantees have not changed.</p>

<h4>Cost</h4>

<p><code>RefCell</code> does not allocate, but it contains an additional &ldquo;borrow state&rdquo;
indicator (one word in size) along with the data.</p>

<p>At runtime each borrow causes a modification/check of the refcount.</p>

<h1>Synchronous types</h1>

<p>Many of the types above cannot be used in a threadsafe manner. Particularly, <code>Rc&lt;T&gt;</code> and <code>RefCell&lt;T&gt;</code>,
which both use non-atomic ref counts, cannot be used this way. This makes them cheaper to use, but one
needs thread safe versions of these too. They exist, in the form of <code>Arc&lt;T&gt;</code> and <code>Mutex&lt;T&gt;</code>/<code>RWLock&lt;T&gt;</code></p>

<p>Note that the non-threadsafe types <em>cannot</em> be sent between threads, and this is checked at compile time.
I&rsquo;ll touch on how this is done in a later blog post.</p>

<p>There are many useful wrappers for concurrent programming in the <a href="https://doc.rust-lang.org/nightly/std/sync/index.html">sync</a> module, but I&rsquo;m only going to cover
the major ones.</p>

<h2><code>Arc&lt;T&gt;</code></h2>

<p><a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> is just a version of <code>Rc&lt;T&gt;</code> that uses an atomic reference count (hence, &ldquo;Arc&rdquo;). This can be sent
freely between threads.</p>

<p>C++&rsquo;s <code>shared_ptr</code> is similar to <code>Arc</code>, however in C++s case the inner data is always mutable. For semantics
similar to that from C++, we should use <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>, <code>Arc&lt;RwLock&lt;T&gt;&gt;</code>, or <code>Arc&lt;UnsafeCell&lt;T&gt;&gt;</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> (<code>UnsafeCell&lt;T&gt;</code>
is a cell type that can be used to hold any data and has no runtime cost, but accessing it requires <code>unsafe</code> blocks).
The last one should only be used if one is certain that the usage won&rsquo;t cause any memory unsafety. Remember that
writing to a struct is not an atomic operation, and many functions like <code>vec.push()</code> can reallocate internally
and cause unsafe behavior (so even monotonicity<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> may not be enough to justify <code>UnsafeCell</code>)</p>

<h4>Guarantees</h4>

<p>Like <code>Rc</code>, this provides the (thread safe) guarantee that the destructor for the internal data
will be run when the last <code>Arc</code> goes out of scope (barring any cycles).</p>

<h4>Cost</h4>

<p>This has the added cost of using atomics for changing the refcount (which will happen whenever it is cloned
or goes out of scope). When sharing data from an <code>Arc</code> in
a single thread, it is preferable to share <code>&amp;</code> pointers whenever possible.</p>

<h2><code>Mutex&lt;T&gt;</code> and <code>RwLock&lt;T&gt;</code></h2>

<p><a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex&lt;T&gt;</code></a> and <a href="https://doc.rust-lang.org/std/sync/struct.RwLock.html"><code>RwLock&lt;T&gt;</code></a> provide mutual-exclusion via RAII guards. For both of these, the
mutex is opaque until one calls <code>lock()</code> on it, at which point the thread will
block until a lock can be acquired, and then a guard will be returned. This guard
can be used to access the inner data (mutably), and the lock will be released when the
guard goes out of scope.</p>

<pre><code class="rust">{
    let guard = mutex.lock();
    // guard dereferences mutably to the inner type
    *guard += 1;
} // lock released when destructor runs
</code></pre>

<p><code>RwLock</code> has the added benefit of being efficient for multiple reads. It is always
safe to have multiple readers to shared data as long as there are no writers; and <code>RwLock</code>
lets readers acquire a &ldquo;read lock&rdquo;. Such locks can be acquired concurrently and are kept track of
via a reference count. Writers must obtain a &ldquo;write lock&rdquo; which can only be obtained when all readers
have gone out of scope.</p>

<h4>Guarantees</h4>

<p>Both of these provide safe shared mutability across threads, however they are prone to deadlocks.
Some level of additional protocol safety can be obtained via the type system. An example
of this is <a href="https://github.com/Munksgaard/rust-sessions">rust-sessions</a>, an experimental library which uses session
types for protocol safety.</p>

<h4>Costs</h4>

<p>These use internal atomic-like types to maintain the locks, and these are similar pretty
costly (they can block all memory reads across processors till they&rsquo;re done). Waiting on these locks
can also be slow when there&rsquo;s a lot of concurrent access happening.</p>

<h1>Composition</h1>

<p>A common gripe when reading Rust code is with stuff like <code>Rc&lt;RefCell&lt;Vec&lt;T&gt;&gt;&gt;</code> and more complicated
compositions of such types.</p>

<p>Usually, it&rsquo;s a case of composing together the guarantees that one needs, without paying for stuff that is
unnecessary.</p>

<p>For example, <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> is one such composition. <code>Rc</code> itself can&rsquo;t be dereferenced mutably;
because <code>Rc</code> provides sharing and shared mutability isn&rsquo;t good, so we put <code>RefCell</code> inside to get
dynamically verified shared mutability. Now we have shared mutable data, but it&rsquo;s shared in a way
that there can only be one mutator (and no readers) or multiple readers.</p>

<p>Now, we can take this a step further, and have <code>Rc&lt;RefCell&lt;Vec&lt;T&gt;&gt;&gt;</code> or <code>Rc&lt;Vec&lt;RefCell&lt;T&gt;&gt;&gt;</code>.
These are both shareable, mutable vectors, but they&rsquo;re not the same.</p>

<p>With the former, the <code>RefCell</code> is wrapping the <code>Vec</code>, so the <code>Vec</code> in its entirety is mutable.
At the same time, there can only be one mutable borrow of the whole <code>Vec</code> at a given time. This
means that your code cannot simultaneously work on different elements of the vector from different
<code>Rc</code> handles. However, we are able to push and pop from the <code>Vec</code> at will. This is similar to an <code>&amp;mut Vec&lt;T&gt;</code>
with the borrow checking done at runtime.</p>

<p>With the latter, the borrowing is of individual elements, but the overall vector is immutable.
Thus, we can independently borrow separate elements, but we cannot push or pop from the vector.
This is similar to an <code>&amp;mut [T]</code><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>, but, again, the borrow checking is at runtime.</p>

<p>In concurrent programs, we have a similar situation with <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>, which provides shared
mutability and ownership.</p>

<p>When reading code that uses these, go in step by step and look at the guarantees/costs provided.</p>

<p>When choosing a composed type, we must do the reverse; figure out which guarantees we want, and at which
point of the composition we need them. For example, if there is a choice between <code>Vec&lt;RefCell&lt;T&gt;&gt;</code> and <code>RefCell&lt;Vec&lt;T&gt;&gt;</code>,
we should figure out the tradeoffs as done above and pick one.</p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=9613016">HN</a>, <a href="http://www.reddit.com/r/rust/comments/37hg1y/wrapper_types_in_rust_choosing_your_guarantees/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m not sure if this is the technical term for them, but I&rsquo;ll be calling them that throughout this post.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>By &ldquo;stack representation&rdquo; I mean the data on the stack when a value of this type is held on the stack. For example, a <code>Vec&lt;T&gt;</code> has a stack representation of a pointer and two integers (length, capacity). While there is more data behind the indirection of the pointer, it is not part of the stack-held portion of the <code>Vec</code>. Looking at this a different way, a type is <code>Copy</code> if a <code>memcopy</code> of the data copies all the data owned by it.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><code>Arc&lt;UnsafeCell&lt;T&gt;&gt;</code> actually won&rsquo;t compile since <code>UnsafeCell&lt;T&gt;</code> isn&rsquo;t <code>Send</code> or <code>Sync</code>, but we can wrap it in a type and implement <code>Send</code>/<code>Sync</code> for it manually to get <code>Arc&lt;Wrapper&lt;T&gt;&gt;</code> where <code>Wrapper</code> is <code>struct Wrapper&lt;T&gt;(UnsafeCell&lt;T&gt;)</code>.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>By this I mean a piece of data that has a monotonic consistency requirement; i.e. a counter or a monotonically growing stack<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><code>&amp;[T]</code> and <code>&amp;mut [T]</code> are <em>slices</em>; they consist of a pointer and a length and can refer to a portion of a vector or array. <code>&amp;mut [T]</code> can have its elements mutated, however its length cannot be touched.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problem With Single-threaded Shared Mutability]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/"/>
    <updated>2015-05-17T16:56:59+05:30</updated>
    <id>http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability</id>
    <content type="html"><![CDATA[<p>This is a post that I&rsquo;ve been meaning to write for a while now; and the release of Rust 1.0 gives
me the perfect impetus to go ahead and do it.</p>

<p>Whilst this post discusses a choice made in the design of Rust; and uses examples in Rust; the principles discussed
here apply to other languages for the most part. I&rsquo;ll also try to make the post easy to understand for those without
a Rust background; please let me know if some code or terminology needs to be explained.</p>

<p>What I&rsquo;m going to discuss here is the choice made in Rust to disallow having multiple mutable aliases
to the same data (or a mutable alias when there are active immutable aliases),
<strong>even from the same thread</strong>. In essence, it disallows one from doing things like:</p>

<pre><code class="rust">let mut x = Vec::new();
{
    let ptr = &amp;mut x; // Take a mutable reference to `x`
    ptr.push(1); // Allowed
    let y = x[0]; // Not allowed (will not compile): as long as `ptr` is active,
                  // x cannot be read from ...
    x.push(1);    // .. or written to
}


// alternatively,

let mut x = Vec::new();
x.push(1); // Allowed
{
    let ptr = &amp;x; // Create an immutable reference
    let y = ptr[0]; // Allowed, nobody can mutate
    let y = x[0]; // Similarly allowed
    x.push(1); // Not allowed (will not compile): as long as `ptr` is active,
               // `x` is frozen for mutation
}
</code></pre>

<p>This is essentially the &ldquo;Read-Write lock&rdquo; (RWLock) pattern, except it&rsquo;s not being used in a
threaded context, and the &ldquo;locks&rdquo; are done via static analysis (compile time &ldquo;borrow checking&rdquo;).</p>

<p>Newcomers to the language have the recurring question as to why this exists. <a href="http://doc.rust-lang.org/nightly/book/ownership.html">Ownership semantics</a>
and immutable <a href="http://doc.rust-lang.org/nightly/book/references-and-borrowing.html">borrows</a> can be grasped because there are concrete examples from languages like C++ of
problems that these concepts prevent. It makes sense that having only one &ldquo;owner&rdquo; and then multiple &ldquo;borrowers&rdquo; who
are statically guaranteed to not stick around longer than the owner will prevent things like use-after-free.</p>

<p>But what could possibly be wrong with having multiple handles for mutating an object? Why do we need an RWLock pattern? <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2>It causes memory unsafety</h2>

<p>This issue is specific to Rust, and I promise that this will be the only Rust-specific answer.</p>

<p><a href="http://doc.rust-lang.org/nightly/book/enums.html">Rust enums</a> provide a form of algebraic data types. A Rust enum is allowed to &ldquo;contain&rdquo; data,
for example you can have the enum</p>

<pre><code class="rust">enum StringOrInt {
    Str(String),
    Int(i64)
}
</code></pre>

<p>which gives us a type that can either be a variant <code>Str</code>, with an associated string, or a variant <code>Int</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, with an associated integer.</p>

<p>With such an enum, we could cause a segfault like so:</p>

<pre><code class="rust">let x = Str("Hi!".to_string()); // Create an instance of the `Str` variant with associated string "Hi!"
let y = &amp;mut x; // Create a mutable alias to x

if let Str(ref insides) = x { // If x is a `Str`, assign its inner data to the variable `insides`
    *y = Int(1); // Set `*y` to `Int(1), therefore setting `x` to `Int(1)` too
    println!("x says: {}", insides); // Uh oh!
}
</code></pre>

<p>Here, we invalidated the <code>insides</code> reference because setting <code>x</code> to <code>Int(1)</code> meant that there is no longer a string inside it.
However, <code>insides</code> is still a reference to a <code>String</code>, and the generated assembly would try to dereference the memory location where
the pointer to the allocated string <em>was</em>, and probably end up trying to dereference <code>1</code> or some nearby data instead, and cause a segfault.</p>

<p>Okay, so far so good. We know that for Rust-style enums to work safely in Rust, we need the RWLock pattern. But are there any other
reasons we need the RWLock pattern? Not many languages have such enums, so this shouldn&rsquo;t really be a problem for them.</p>

<h2>Iterator invalidation</h2>

<p>Ah, the example that is brought up almost every time the question above is asked. While I&rsquo;ve been quite guilty of
using this example often myself (and feel that it is a very appropriate example that can be quickly explained),
I also find it to be a bit of a cop-out, for reasons which I will explain below. This is partly why I&rsquo;m writing
this post in the first place; a better idea of the answer to The Question should be available for those who want
to dig deeper.</p>

<p>Iterator invalidation involves using tools like iterators whilst modifying the underlying dataset somehow.</p>

<p>For example,</p>

<pre><code class="rust">
let buf = vec![1,2,3,4];

for i in &amp;buf {
    buf.push(i);
}
</code></pre>

<p>Firstly, this will loop infinitely (if it compiled, which it doesn&rsquo;t, because Rust prevents this). The
equivalent C++ example would be <a href="http://stackoverflow.com/questions/5638323/modifying-a-data-structure-while-iterating-over-it">this one</a>, which I <a href="http://manishearth.github.io/Presentations/Rust/#/1/2">use</a> at every opportunity.</p>

<p>What&rsquo;s happening in both code snippets is that the iterator is really just a pointer to the vector and an index.
It doesn&rsquo;t contain a snapshot of the original vector; so pushing to the original vector will make the iterator iterate for
longer. Pushing once per iteration will obviously make it iterate forever.</p>

<p>The infinite loop isn&rsquo;t even the real problem here. The real problem is that after a while, we could get a segmentation fault.
Internally, vectors have a certain amount of allocated space to work with. If the vector is grown past this space,
a new, larger allocation may need to be done (freeing the old one), since vectors must use contiguous memory.</p>

<p>This means that when the vector overflows its capacity, it will reallocate, invalidating the reference stored in the
iterator, and causing use-after-free.</p>

<p>Of course, there is a trivial solution in this case &mdash; store a reference to the <code>Vec</code>/<code>vector</code> object inside
the iterator instead of just the pointer to the vector on the heap. This leads to some extra indirection or a larger
stack size for the iterator (depending on how you implement it), but overall will prevent the memory unsafety.</p>

<p>This would still cause problems with more complex situations involving multidimensional vectors, however.</p>

<h2>&ldquo;It&rsquo;s effectively threaded&rdquo;</h2>

<blockquote><p>Aliasing with mutability in a sufficiently complex, single-threaded program is effectively the same thing as
accessing data shared across multiple threads without a lock</p></blockquote>

<p>(The above is my paraphrasing of someone else&rsquo;s quote; but I can&rsquo;t find the original or remember who made it)</p>

<p>Let&rsquo;s step back a bit and figure out why we need locks in multithreaded programs. The way caches and memory work;
we&rsquo;ll never need to worry about two processes writing to the same memory location simultaneously and coming up with
a hybrid value, or a read happening halfway through a write.</p>

<p>What we do need to worry about is the rug being pulled out underneath our feet. A bunch of related reads/writes
would have been written with some invariants in mind, and arbitrary reads/writes possibly happening between them
would invalidate those invariants. For example, a bit of code might first read the length of a vector, and then go ahead
and iterate through it with a regular for loop bounded on the length.
The invariant assumed here is the length of the vector. If <code>pop()</code> was called on the vector in some other thread, this invariant could be
invalidated after the read to <code>length</code> but before the reads elsewhere, possibly causing a segfault or use-after-free in the last iteration.</p>

<p>However, we can have a situation similar to this (in spirit) in single threaded code. Consider the following:</p>

<pre><code class="rust">let x = some_big_thing();
let len = x.some_vec.len();
for i in 0..len {
    x.do_something_complicated(x.some_vec[i]);
}
</code></pre>

<p>We have the same invariant here; but can we be sure that <code>x.do_something_complicated()</code> doesn&rsquo;t modify <code>x.some_vec</code> for
some reason? In a complicated codebase, where <code>do_something_complicated()</code> itself calls a lot of other functions which may
also modify <code>x</code>, this can be hard to audit.</p>

<p>Of course, the above example is a simplification and contrived; but it doesn&rsquo;t seem unreasonable to assume that such
bugs can happen in large codebases &mdash; where many methods being called have side effects which may not always be evident.</p>

<p>Which means that in large codebases we have almost the same problem as threaded ones. It&rsquo;s very hard to maintain invariants
when one is not completely sure of what each line of code is doing. It&rsquo;s possible to become sure of this by reading through the code
(which takes a while), but further modifications may also have to do the same. It&rsquo;s impractical to do this all the time and eventually
bugs will start cropping up.</p>

<p>On the other hand, having a static guarantee that this can&rsquo;t happen is great. And when the code is too convoluted for
a static guarantee (or you just want to avoid the borrow checker), a single-threaded RWlock-esque type called <a href="https://doc.rust-lang.org/core/cell/struct.RefCell.html">RefCell</a>
is available in Rust. It&rsquo;s a type providing interior mutability and behaves like a runtime version of the borrow checker.
Similar wrappers can be written in other languages.</p>

<p>Edit: In case of many primitives like simple integers, the problems with shared mutability turn out to not be a major issue.
For these, we have a type called <a href="http://doc.rust-lang.org/nightly/std/cell/struct.Cell.html">Cell</a> which lets these be mutated and shared simultaenously. This works on all <code>Copy</code>
types; i.e. types which only need to be copied on the stack to be copied. (Unlike types involving pointers or other indirection)</p>

<p>This sort of bug is a good source of reentrancy problems too.</p>

<h2>Safe abstractions</h2>

<p>In particular, the issue in the previous section makes it hard to write safe abstractions, especially with generic code.
While this problem is clearer in the case of Rust (where abstractions are expected to be safe and preferably low-cost),
this isn&rsquo;t unique to any language.</p>

<p>Every method you expose has a contract that is expected to be followed. Many times, a contract is handled by type safety itself,
or you may have some error-based model to throw out uncontractual data (for example, division by zero).</p>

<p>But, as an API (can be either internal or exposed) gets more complicated, so does the contract. It&rsquo;s not always possible to verify that the contract is being violated
at runtime either, for example many cases of iterator invalidation are hard to prevent in nontrivial code even with asserts.</p>

<p>It&rsquo;s easy to create a method and add documentation &ldquo;the first two arguments should not point to the same memory&rdquo;.
But if this method is used by other methods, the contract can change to much more complicated things that are harder to express
or check. When generics get involved, it only gets worse; you sometimes have no way of forcing that there are no shared mutable aliases,
or of expressing what isn&rsquo;t allowed in the documentation. Nor will it be easy for an API consumer to enforce this.</p>

<p>This makes it harder and harder to write safe, generic abstractions. Such abstractions rely on invariants, and these invariants can often
be broken by the problems in the previous section. It&rsquo;s not always easy to enforce these invariants, and such abstractions will either
be misused or not written in the first place, opting for a heavier option. Generally one sees that such abstractions or patterns are avoided
altogether, even though they may provide a performance boost, because they are risky and hard to maintain. Even if the present version of
the code is correct, someone may change something in the future breaking the invariants again.</p>

<p><a href="http://manishearth.github.io/blog/2015/05/03/where-rust-really-shines/">My previous post</a> outlines a situation where Rust was able to choose
the lighter path in a situation where getting the same guarantees would be hard in C++.</p>

<p>Note that this is a wider problem than just with mutable aliasing. Rust has this problem too, but not when it comes to mutable aliasing.
Mutable aliasing is important to fix however, because we can make a lot of assumptions about our program when there are no mutable aliases.
Namely, by looking at a line of code we can know what happened wrt the locals. If there is the possibility of mutable aliasing out there; there&rsquo;s the
possibility that other locals were modified too. A very simple example is:</p>

<pre><code class="rust">fn look_ma_no_temp_var_l33t_interview_swap(&amp;mut x, &amp;mut y) {
    *x = *x + *y;
    *y = *x - *y;
    *x = *x - *y;
}
// or
fn look_ma_no_temp_var_rockstar_interview_swap(&amp;mut x, &amp;mut y) {
    *x = *x ^ *y;
    *y = *x ^ *y;
    *x = *x ^ *y;
}
</code></pre>

<p>In both cases, when the two references are the same<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, instead of swapping, the two variables get set to zero.
A user (internal to your library, or an API consumer) would expect <code>swap()</code> to not change anything when fed equal
references, but this is doing something totally different. This assumption could get used in a program; for example instead
of skipping the passes in an array sort where the slot is being compared with itself, one might just go ahead with it
because <code>swap()</code> won&rsquo;t change anything there anyway; but it does, and suddenly your sort function fills everything with
zeroes. This could be solved by documenting the precondition and using asserts, but the documentation gets harder and harder
as <code>swap()</code> is used in the guts of other methods.</p>

<p>Of course, the example above was contrived. It&rsquo;s well known that those <code>swap()</code> implementations have that precondition,
and shouldn&rsquo;t be used in such cases. Also, in most swap algorithms it&rsquo;s trivial to ignore cases when you&rsquo;re comparing
an element with itself, generally done by bounds checking.</p>

<p>But the example is a simplified sketch of the problem at hand.</p>

<p>In Rust, since this is statically checked, one doesn&rsquo;t worry much about these problems, and
robust APIs can be designed since knowing when something won&rsquo;t be mutated can help simplify
invariants.</p>

<h2>Wrapping up</h2>

<p>Aliasing that doesn&rsquo;t fit the RWLock pattern is dangerous. If you&rsquo;re using a language like
Rust, you don&rsquo;t need to worry. If you&rsquo;re using a language like C++, it can cause memory unsafety,
so be very careful. If you&rsquo;re using a language like Java or Go, while it can&rsquo;t cause memory unsafety,
it will cause problems in complex bits of code.</p>

<p>This doesn&rsquo;t mean that this problem should force you to switch to Rust, either. If you feel that you
can avoid writing APIs where this happens, that is a valid way to go around it. This problem is much
rarer in languages with a GC, so you might be able to avoid it altogether without much effort. It&rsquo;s
also okay to use runtime checks and asserts to maintain your invariants; performance isn&rsquo;t everything.</p>

<p>But this <em>is</em> an issue in programming; and make sure you think of it when designing your code.</p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=9560158">HN</a>, <a href="http://www.reddit.com/r/rust/comments/369jnx/the_problem_with_singlethreaded_shared_mutability/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Hereafter referred to as &ldquo;The Question&rdquo;<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Note: <code>Str</code> and <code>Int</code> are variant names which I chose; they are not keywords. Additionally, I&rsquo;m using &ldquo;associated foo&rdquo; loosely here; Rust <em>does</em> have a distinct concept of &ldquo;associated data&rdquo; but it&rsquo;s not relevant to this post.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Note that this isn&rsquo;t possible in Rust due to the borrow checker.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
