<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[In Pursuit of Laziness]]></title>
  <link href="http://manishearth.github.io/atom.xml" rel="self"/>
  <link href="http://manishearth.github.io/"/>
  <updated>2018-04-18T19:45:50+00:00</updated>
  <id>http://manishearth.github.io/</id>
  <author>
    <name><![CDATA[Manish Goregaokar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Down a Rusty Rabbit Hole]]></title>
    <link href="http://manishearth.github.io/blog/2018/04/12/down-a-rusty-rabbit-hole/"/>
    <updated>2018-04-12T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2018/04/12/down-a-rusty-rabbit-hole</id>
    <content type="html"><![CDATA[<p>Last week I fell down a rather interesting rabbit hole in Rust, which was basically
me discovering a series of quirks of the Rust compiler/language, each one leading to the
next when I asked &ldquo;why?&rdquo;.</p>

<p>It started when someone asked why autogenerated <code>Debug</code> impls use argument names like <code>__arg_0</code>
which start with a double underscore.</p>

<p>This happened to be <a href="https://github.com/rust-lang/rust/pull/32294">my fault</a>. The reason <a href="https://github.com/rust-lang/rust/pull/32251#issuecomment-197481726">we used a double underscore</a> was that
while a single underscore tells rustc not to warn about a possibly-unused variable, there&rsquo;s an off-
by-default clippy lint that warns about variables that start with a single underscore that are used,
which can be silenced with a double underscore. Now, the correct fix here is to make the lint ignore
derive/macros (which I believe we did as well), but at the time we needed to add an underscore
anyway so a double underscore didn&rsquo;t seem worse.</p>

<p>Except of course, this double underscore appears in the docs. Oops.</p>

<p>Ideally the rustc derive infrastructure would have a way of specifying the argument name to use so
that we can at least have descriptive things here, but that&rsquo;s a bit more work (I&rsquo;m willing to mentor
this work though!). So I thought I&rsquo;d fix this by at least removing the double underscore, and making
the unused lint ignore <code>#[derive()]</code> output.</p>

<p>While going through the code to look for underscores I also discovered a hygiene issue. The following code
throws a bunch of very weird type errors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kr">const</span> <span class="n">__cmp</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[derive(PartialOrd, PartialEq)]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">A</span><span class="p">(</span><span class="kt">u8</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="kt">u8</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://play.rust-lang.org/?gist=2352b6a2192f38caba70bc2b1fa889e7&amp;version=stable">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]</span><span class="o">:</span> <span class="n">mismatched</span> <span class="n">types</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">6</span><span class="o">:</span><span class="mi">7</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="mi">6</span> <span class="o">|</span>     <span class="n">A</span><span class="p">(</span><span class="kt">u8</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="kt">u8</span><span class="p">)</span>
</span><span class='line'>  <span class="o">|</span>       <span class="o">^^^</span> <span class="n">expected</span> <span class="k">enum</span> <span class="err">`</span><span class="n">std</span><span class="o">::</span><span class="n">option</span><span class="o">::</span><span class="nb">Option</span><span class="err">`</span><span class="p">,</span> <span class="n">found</span> <span class="kt">u8</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">note</span><span class="o">:</span> <span class="n">expected</span> <span class="k">type</span> <span class="err">`</span><span class="n">std</span><span class="o">::</span><span class="n">option</span><span class="o">::</span><span class="nb">Option</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">cmp</span><span class="o">::</span><span class="nb">Ordering</span><span class="o">&gt;</span><span class="err">`</span>
</span><span class='line'>             <span class="n">found</span> <span class="k">type</span> <span class="err">`</span><span class="kt">u8</span><span class="err">`</span>
</span><span class='line'><span class="p">.....</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because the generated code for PartialOrd contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">match</span> <span class="n">foo</span><span class="p">.</span><span class="n">cmp</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Some</span><span class="p">(</span><span class="nb">Ordering</span><span class="o">::</span><span class="nb">Equal</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">.....,</span>
</span><span class='line'>    <span class="n">__cmp</span> <span class="o">=&gt;</span> <span class="n">__cmp</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__cmp</code> can both be a binding to a wildcard pattern match as well as a match against a constant
named <code>__cmp</code>, and in the presence of such a constant it resolves to the constant, causing
type errors.</p>

<p>One way to fix this is to bind <code>foo.cmp(bar)</code> to some temporary variable <code>x</code> and use that directly in
a <code>_ =&gt; x</code> branch.</p>

<p>I thought I could be clever and try <code>cmp @ _ =&gt; cmp</code> instead. <code>match</code> supports syntax where you can
do <code>foo @ &lt;pattern&gt;</code>, where <code>foo</code> is bound to the entire matched variable. The <code>cmp</code> here is unambiguously
a binding; it cannot be a pattern. So no conflicting with the <code>const</code>, problem solved!</p>

<p>So I made <a href="https://github.com/rust-lang/rust/pull/49676">a PR for both removing the underscores and also fixing this</a>. The change for <code>__cmp</code>
is no longer in that PR, but you can find it <a href="https://github.com/Manishearth/rust/commit/partial-cmp-hygiene">here</a>.</p>

<p>Except I hit a problem. With that PR, the following still breaks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kr">const</span> <span class="n">cmp</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[derive(PartialOrd, PartialEq)]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">A</span><span class="p">(</span><span class="kt">u8</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="kt">u8</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>throwing a slightly cryptic error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0530</span><span class="p">]</span><span class="o">:</span> <span class="k">match</span> <span class="n">bindings</span> <span class="n">cannot</span> <span class="n">shadow</span> <span class="n">constants</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">9</span><span class="o">:</span><span class="mi">7</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="mi">4</span> <span class="o">|</span> <span class="k">pub</span> <span class="kr">const</span> <span class="n">cmp</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">----------------------</span> <span class="n">a</span> <span class="n">constant</span> <span class="err">`</span><span class="n">cmp</span><span class="err">`</span> <span class="n">is</span> <span class="n">defined</span> <span class="n">here</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">9</span> <span class="o">|</span>     <span class="n">B</span><span class="p">(</span><span class="kt">u8</span><span class="p">)</span>
</span><span class='line'>  <span class="o">|</span>       <span class="o">^^^</span> <span class="n">cannot</span> <span class="kr">be</span> <span class="n">named</span> <span class="n">the</span> <span class="n">same</span> <span class="k">as</span> <span class="n">a</span> <span class="n">constant</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see a reduced version of this error in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kr">const</span> <span class="n">cmp</span> <span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">match</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cmp</span> <span class="o">@</span> <span class="n">_</span> <span class="o">=&gt;</span> <span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://play.rust-lang.org/?gist=feebbc048b47c286d5720b9926c6925e&amp;version=stable">playpen</a>)</p>

<p>Huh. Wat. Why? <code>cmp @ _</code> seems to be pretty unambiguous, what&rsquo;s wrong with it shadowing a constant?</p>

<p>Turns out bindings cannot shadow constants at all, for a <a href="https://github.com/rust-lang/rust/issues/33118#issuecomment-233962221">rather subtle reason</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kr">const</span> <span class="n">A</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="p">...;</span> <span class="c1">// A_const</span>
</span><span class='line'><span class="kd">let</span> <span class="n">A</span> <span class="o">@</span> <span class="n">_</span> <span class="o">=</span> <span class="p">...;</span> <span class="c1">// A_let</span>
</span><span class='line'><span class="k">match</span> <span class="p">..</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="o">=&gt;</span> <span class="p">...;</span> <span class="c1">// A_match</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens here is that constants and variables occupy the same namespace. So <code>A_let</code> shadows
<code>A_const</code> here, and when we attempt to <code>match</code>, <code>A_match</code> is resolved to <code>A_let</code> and rejected (since
you can&rsquo;t match against a variable), and <code>A_match</code> falls back to resolving as a fresh binding
pattern, instead of resolving to a pattern that matches against <code>A_const</code>.</p>

<p>This is kinda weird, so we disallow shadowing constants with variables. This is rarely a problem
because variables are lowercase and constants are uppercase. We could <em>technically</em> allow this
language-wise, but it&rsquo;s hard on the implementation (and irrelevant in practice) so we don&rsquo;t.</p>

<hr />

<p>So I dropped that fix. The temporary local variable approach is broken as well since
you can also name a constant the same as the local variable and have a clash (so again, you
need the underscores to avoid surprises).</p>

<p>But then I realized that we had an issue with removing the underscores from <code>__arg_0</code> as well.</p>

<p>The following code is also broken:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kr">const</span> <span class="n">__arg_0</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[derive(Debug)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">(</span><span class="kt">u8</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://play.rust-lang.org/?gist=6e10fd8de1123c6f6f695c891e879f70&amp;version=stable">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]</span><span class="o">:</span> <span class="n">mismatched</span> <span class="n">types</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">3</span><span class="o">:</span><span class="mi">10</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="mi">3</span> <span class="o">|</span> <span class="cp">#[derive(Debug)]</span>
</span><span class='line'>  <span class="o">|</span>          <span class="o">^^^^^</span> <span class="n">expected</span> <span class="n">mutable</span> <span class="n">reference</span><span class="p">,</span> <span class="n">found</span> <span class="kt">u8</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">note</span><span class="o">:</span> <span class="n">expected</span> <span class="k">type</span> <span class="err">`</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="n">Formatter</span><span class="o">&lt;</span><span class="nl">&#39;_</span><span class="o">&gt;</span><span class="err">`</span>
</span><span class='line'>             <span class="n">found</span> <span class="k">type</span> <span class="err">`</span><span class="kt">u8</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see a reduced version of this error in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kr">const</span> <span class="n">__arg_0</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="p">(</span><span class="n">__arg_0</span><span class="o">:</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]</span><span class="o">:</span> <span class="n">mismatched</span> <span class="n">types</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">3</span><span class="o">:</span><span class="mi">8</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="mi">3</span> <span class="o">|</span> <span class="k">fn</span> <span class="n">foo</span><span class="p">(</span><span class="n">__arg_0</span><span class="o">:</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>  <span class="o">|</span>        <span class="o">^^^^^^^</span> <span class="n">expected</span> <span class="kt">bool</span><span class="p">,</span> <span class="n">found</span> <span class="kt">u8</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://play.rust-lang.org/?gist=2cf2c8b3520d5b343de1b76f80ea3fe7&amp;version=stable">playpen</a>)</p>

<p>This breakage is not an issue with the current code because of the double underscores &ndash; there&rsquo;s a
very low chance someone will create a constant that is both lowercase and starts with a double
underscore. But it&rsquo;s a problem when I remove the underscores since that chance shoots up.</p>

<p>Anyway, this failure is even weirder. Why are we attempting to match against the constant in the
first place? <code>fn</code> argument patterns<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> are irrefutable, i.e. all possible values of the type should match
the argument. For example, <code>fn foo(Some(foo): Option&lt;u8&gt;) {}</code> will fail to compile with
&ldquo;refutable pattern in function argument: <code>None</code> not covered&rdquo;.</p>

<p>There&rsquo;s no point trying to match against constants here; because even if we find a constant it will be rejected
later. Instead, we can unambiguously resolve identifiers as new bindings, yes?</p>

<p>Right?</p>

<p>Firm in my belief, <a href="https://github.com/rust-lang/rust/issues/49680">I filed an issue</a>.</p>

<p>I was wrong, it&rsquo;s <a href="https://github.com/rust-lang/rust/issues/49680#issuecomment-379029404">not going to always be rejected later</a>. With zero-sized types this
can totally still work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">S</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="n">C</span><span class="o">:</span> <span class="n">S</span> <span class="o">=</span> <span class="n">S</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">C</span> <span class="o">=</span> <span class="n">S</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here because <code>S</code> has only one state, matching against a constant of the type is still irrefutable.</p>

<p>I argued that this doesn&rsquo;t matter &ndash; since the type has a single value, it doesn&rsquo;t matter whether we resolved to
a new binding or the constant; the value and semantics are the same.</p>

<p>This is true.</p>

<p>Except.</p>

<p><a href="https://github.com/rust-lang/rust/issues/49680#issuecomment-379032842">Except for when destructors come in</a>.</p>

<p>It was at this point that my table found itself in the perplexing state of being upside-down.</p>

<p>This is still really fine, zero-sized-constants-with-destructors is a pretty rare thing in Rust
and I don&rsquo;t really see folks <em>relying</em> on this behavior.</p>

<p>However I later realized that this entire detour was pointless because even if we fix this, we end up
with a way for bindings to shadow constants. Which &hellip; which we already realized isn&rsquo;t allowed by the
compiler till we fix some bugs.</p>

<p>Damn.</p>

<hr />

<p>The <em>actual</em> fix to the macro stuff is to use hygenic generated variable names, which the current
infrastructure supports. I plan to make a PR for this eventually.</p>

<p>But it was a very interesting dive into the nuances of pattern matching in Rust.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Yes, function arguments in Rust are patterns. You can totally do things like <code>(a, b): (u8, u8)</code> in function arguments (like you can do in <code>let</code>)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picking Apart the Crashing iOS String]]></title>
    <link href="http://manishearth.github.io/blog/2018/02/15/picking-apart-the-crashing-ios-string/"/>
    <updated>2018-02-15T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2018/02/15/picking-apart-the-crashing-ios-string</id>
    <content type="html"><![CDATA[<p>So there&rsquo;s <a href="https://www.theverge.com/2018/2/15/17015654/apple-iphone-crash-ios-11-bug-imessage">yet another iOS text crash</a>, where just looking at a particular string crashes
iOS. Basically, if you put this string in any system text box (and other places), it crashes that
process. I&rsquo;ve been testing it by copy-pasting characters into Spotlight so I don&rsquo;t end up crashing
my browser.</p>

<p>The original sequence is U+0C1C U+0C4D U+0C1E U+200C U+0C3E, which is a sequence of Telugu
characters: the consonant ja (జ), a virama (&#8239;్&#8239;), the consonant nya (ఞ), a zero-width non-joiner, and
the vowel aa (&#8239;ా).</p>

<p>I was pretty interested in what made this sequence &ldquo;special&rdquo;, and started investigating.</p>

<p>So first when looking into this, I thought that the &lt;ja, virama, nya&gt; sequence was the culprit.
That sequence forms a special ligature in many Indic scripts (ज्ञ in Devanagari) which is often
considered a letter of its own. However, the ligature for Telugu doesn&rsquo;t seem very &ldquo;special&rdquo;.</p>

<p>Also, from some experimentation, this bug seemed to occur for <em>any</em> pair of Telugu consonants with
a vowel, as long as the vowel is not &nbsp;&#8239;ై (ai). Huh.</p>

<p>The ZWNJ must be doing something weird, then. &lt;consonant, virama, consonant, vowel&gt; is a
pretty common sequence in any Indic script; but ZWNJ before a vowel isn&rsquo;t very useful for most
scripts (except for Bengali and Oriya, but I&rsquo;ll get to that).</p>

<p>And then I saw that <a href="https://twitter.com/FakeUnicode/status/963300865762254848">there was a sequence in Bengali</a> that also crashed.</p>

<p>The sequence is U+09B8 U+09CD U+09B0 U+200C U+09C1, which is the consonant &ldquo;so&rdquo; (স), a virama (&#8239;্&#8239;),
the consonant &ldquo;ro&rdquo; (র), a ZWNJ, and vowel u (&nbsp;&#8239;ু).</p>

<p>Before we get too into this, let&rsquo;s first take a little detour to learn how Indic scripts work:</p>

<h2>Indic scripts and consonant clusters</h2>

<p>Indic scripts are <em>abugidas</em>; which means that their &ldquo;letters&rdquo; are consonants, which you
can attach diacritics to to change the vowel. By default, consonants have a base vowel.
So, for example, क is &ldquo;kuh&rdquo; (kə, often transcribed as &ldquo;ka&rdquo;), but I can change the vowel to make it के
(the &ldquo;ka&rdquo; in &ldquo;okay&rdquo;) का (&ldquo;kaa&rdquo;, like &ldquo;car&rdquo;).</p>

<p>Usually, the default vowel is the ə sound, though not always (in Bengali it&rsquo;s more of an o sound).</p>

<p>Because of the &ldquo;default&rdquo; vowel, you need a way to combine consonants. For example, if you wished to
write the word &ldquo;ski&rdquo;, you can&rsquo;t write it as स + की (sa + ki = &ldquo;saki&rdquo;), you must write it as स्की.
What&rsquo;s happened here is that the स got its vowel &ldquo;killed&rdquo;, and got tacked on to the की to form a
consonant cluster ligature.</p>

<p>You can <em>also</em> write this as स्&zwnj;की . That little tail you see on the स is known as a &ldquo;virama&rdquo;;
it basically means &ldquo;remove this vowel&rdquo;. Explicit viramas are sometimes used when there&rsquo;s no easy way
to form a ligature, e.g. in ङ्&zwnj;ठ because there is no simple way to ligatureify ङ into ठ. Some scripts
also <em>prefer</em> explicit viramas, e.g. &ldquo;ski&rdquo; in Malayalam is written as സ്കീ, where the little crescent
is the explicit virama.</p>

<p>In unicode, the virama character is always used to form a consonant cluster. So स्की was written as
&lt;स, &#8239;्, क, &#8239;ी&gt;, or &lt;sa, virama, ka, i&gt;. If the font supports the cluster, it will show up
as a ligature, otherwise it will use an explicit virama.</p>

<p>For Devanagari and Bengali, <em>usually</em>, in a consonant cluster the first consonant is munged a bit and the second consonant stays intact.
There are exceptions &ndash; sometimes they&rsquo;ll form an entirely new glyph (क + ष = क्ष), and sometimes both
glyphs will change (ड + ड = ड्ड, द + म = द्म, द + ब = द्ब). Those last ones should look like this in conjunct form:</p>

<p><img class="center" src="http://manishearth.github.io/images/post/unicode-crash/conjuncts.png" width="200"></p>

<h2>Investigating the Bengali case</h2>

<p>Now, interestingly, unlike the Telugu crash, the Bengali crash seemed to only occur when the second
consonant is র (&ldquo;ro&rdquo;). However, I can trigger it for any choice of the first consonant or vowel, except
when the vowel is &#8239;ো (o) or &#8239;ৌ (au).</p>

<p>Now, র is an interesting consonant in some Indic scripts, including Devanagari. In Devanagari,
it looks like र (&ldquo;ra&rdquo;). However, it does all kinds of things when forming a cluster. If you&rsquo;re having it
precede another consonant in a cluster, it forms a little feather-like stroke, like in र्क (rka). In Marathi,
that stroke can also look like a tusk, as in र्&zwj;क. As a suffix consonant, it can provide a little
&ldquo;extra leg&rdquo;, as in क्र (kra). For letters without a vertical stroke, like ठ (tha), it does this caret-like thing,
ठ्र (thra).</p>

<p>Basically, while most consonants retain some of their form when put inside a cluster, र does not. And
a more special thing about र is that this happens even when र is the <em>second</em> consonant in a cluster &ndash; as I mentioned
before, for most consonant clusters the second consonant stays intact. While there are exceptions, they are usually
specific to the cluster; it is only र for which this happens for all clusters.</p>

<p>It&rsquo;s similar in Bengali, র as the second consonant adds a tentacle-like thing on the existing consonant. For example,
প + র (po + ro) gives প্র (pro).</p>

<p>But it&rsquo;s not just র that does this in Bengali, the consonant &ldquo;jo&rdquo; does as well. প + য (po + jo) forms প্য (pjo),
and the য is transformed into a wavy line called a &ldquo;jophola&rdquo;.</p>

<p>So I tried it with য  &mdash; , and it turns out that the Bengali crash occurs for  য as well!
So the general Bengali case is &lt;consonant, virama, র OR য, ZWNJ, vowel&gt;, where the vowel is not  &#8239;ো or &#8239;ৌ.</p>

<h2>Suffix-joining consonants</h2>

<p>So we&rsquo;re getting close, here. At least for Bengali, it occurs when the second consonant is such that it often
combines with the first consonant without modifying its form much.</p>

<p>In fact, this is the case for Telugu as well! Consonant clusters in Telugu are usually formed by preserving the
original consonant, and tacking the second consonant on below!</p>

<p>For example, the original crashy string contains the cluster జ + ఞ, which looks like జ్ఞ. The first letter isn&rsquo;t
really modified, but the second is.</p>

<p>From this, we can guess that it will also occur for Devanagari with र. Indeed it does! U+0915 U+094D U+0930 U+200C U+093E, that is,
&lt;क, &#8239;्, र, zwnj, &#8239;ा&gt; (&lt; ka, virama, ra, zwnj, aa &gt;) is one such crashing sequence.</p>

<p>But this isn&rsquo;t really the whole story, is it? For example, the crash does occur for &ldquo;kro&rdquo; + zwnj + vowel in Bengali,
and in &ldquo;kro&rdquo; (ক্র = ক + র = ko + ro) the resultant cluster involves the munging of both the prefix and suffix. But
the crash doesn&rsquo;t occur for द्ब or ड्ड. It seems to be specific to the letter, not the nature of the cluster.</p>

<p>Digging deeper, the reason is that for many fonts (presumably the ones in use), these consonants
form &ldquo;suffix joining consonants&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> (a term I made up) when preceded by a virama. This seems to
correspond to the <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/features_pt#tag-pstf"><code>pstf</code> OpenType feature</a>, as well as <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/features_uz#vatu"><code>vatu</code></a>.</p>

<p>For example, the sequence virama + क gives &nbsp;&#8239;्क, i.e. it renders a virama with a placeholder followed by a क.</p>

<p>But, for र, virama + र renders &#8239;्र, which for me looks like this:</p>

<p><img class="center" src="http://manishearth.github.io/images/post/unicode-crash/virama-ra.png" width="200"></p>

<p>In fact, this is the case for the other consonants as well. For me, &#8239;्र &#8239;্র &#8239;্য &#8239;్ఞ &#8239;్క
(Devanagari virama-ra, Bengali virama-ro, Bengali virama-jo, Telugu virama-nya, Telugu virama-ka)
all render as &ldquo;suffix joining consonants&rdquo;:</p>

<p><img class="center" src="http://manishearth.github.io/images/post/unicode-crash/virama-consonant.png" width="200"></p>

<p>(This is true for all Telugu consonants, not just the ones listed).</p>

<p>An interesting bit is that the crash does not occur for &lt;र, virama, र, zwnj, vowel&gt;, because र-virama-र
uses the prefix-joining form of the first र (र्र). The same occurs for র with itself or ৰ or য. Because the virama
is &ldquo;sticker&rdquo; to the left in these cases, it doesn&rsquo;t cause a crash. (h/t <a href="https://github.com/hackbunny">hackbunny</a> for discovering this
using a <a href="https://github.com/hackbunny/viramarama">script</a> to enumerate all cases).</p>

<p>Kannada <em>also</em> has &ldquo;suffix joining consonants&rdquo;, but for some reason I cannot trigger the crash with it. Ya in Gurmukhi
is also suffix-joining.</p>

<h2>The ZWNJ</h2>

<p>The ZWNJ is curious. The crash doesn&rsquo;t happen without it, but as I mentioned before a ZWNJ before a vowel
doesn&rsquo;t really <em>do</em> anything for most Indic scripts. In Indic scripts, a ZWNJ can be used to explicitly force a
virama if used after the virama (I used it to write स्&zwnj;की in this post), however that&rsquo;s not how it&rsquo;s being used here.</p>

<p>In Bengali and Oriya specifically, a ZWNJ can be used to force a different vowel form when used before a vowel
(e.g. রু vs র&zwnj;ু), however this bug seems to apply to vowels for which there is only one form, and this bug
also applies to other scripts where this isn&rsquo;t the case anyway.</p>

<p>The exception vowels are interesting. They&rsquo;re basically all vowels that are made up of <em>two</em> glyph components. Philippe Verdy
points out:</p>

<blockquote><p>And why this bug does not occur with some vowels is because these are vowels in two parts,
that are first decomposed into two separate glyphs reordered in the buffer of glyphs, while
other vowels do not need this prior mapping and keep their initial direct mapping from their
codepoints in fonts, which means that this has to do to the way the ZWNJ looks for the glyphs
of the vowels in the glyphs buffer and not in the initial codepoints buffer: there&rsquo;s some desynchronization,
and more probably an uninitialized data field (for the lookup made in handling ZWNJ) if no vowel decomposition was done
(the same data field is correctly initialized when it is the first consonnant which takes an alternate form before
a virama, like in most Indic consonnant clusters, because the a glyph buffer is created.</p></blockquote>

<h2>Generalizing</h2>

<p>So, ultimately, the full set of cases that cause the crash are:</p>

<p>Any sequence <code>&lt;consonant1, virama, consonant2, ZWNJ, vowel&gt;</code> in Devanagari, Bengali, and Telugu, where:</p>

<ul>
<li><code>consonant2</code> is suffix-joining (<code>pstf</code>/<code>vatu</code>) &ndash; i.e. र, র, য, ৰ, and all Telugu consonants</li>
<li><code>consonant1</code> is not a reph-forming letter like र/র (or a variant, like ৰ)</li>
<li><code>vowel</code> does not have two glyph components, i.e. it is not &nbsp;&#8239;ై, &nbsp;&#8239;ো, or &nbsp;&#8239;ৌ</li>
</ul>


<p>This leaves one question open:</p>

<p>Why doesn&rsquo;t it apply to Kannada? Or, for that matter, Khmer, which has a similar virama-like thing called a &ldquo;coeng&rdquo;.</p>

<h2>Are these valid strings?</h2>

<p>A recurring question I&rsquo;m getting is if these strings are valid in the language, or unicode gibberish
like Zalgo text. Breaking it down:</p>

<ul>
<li>All of the <em>rendered</em> glyphs are valid. The original Telugu one is the root of the word for
&ldquo;knowledge&rdquo; (and I&rsquo;ve taken to calling this bug &ldquo;forbidden knowledge&rdquo; for that reason).</li>
<li>In Telugu and Devanagari, there is no functional use of the ZWNJ as used before a vowel. It
should not be there, and one would not expect it in typical text.</li>
<li>In Bengali (also Oriya), putting a ZWNJ before some vowels prevents them from ligatureifying, and this is
mentioned in the Unicode spec. However, it seems rare for native speakers to use this.</li>
<li>In all of these scripts, putting a ZWNJ after viramas can be used to force an explicit virama
over a ligature. That is not the position ZWNJ is used here, but it gives a hint that this
might have been a mistype. Doing this is <em>also</em> rare at least for Devanagari (and I believe
for the other two scripts as well)</li>
<li>Android has an explicit key for ZWNJ on its keyboards for these languages<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, right next to the spacebar. iOS has this as
well on the long-press of the virama key. <em>Very</em> easy to mistype, at least for Android.</li>
</ul>


<p>So while the crashing strings are usually invalid, and when not, very rare, they are easy enough to mistype.</p>

<p>An example by <a href="https://twitter.com/FakeUnicode">@FakeUnicode</a> was the string &ldquo;For/k&rdquo; (or &ldquo;Foŕk&rdquo;, if accents were easier to type). A
slash isn&rsquo;t something you&rsquo;d normally type there, and the produced string is gibberish, but it&rsquo;s easy enough to type
by accident.</p>

<p>Except of course that the mistake in &ldquo;For/k&rdquo;/&ldquo;Foŕk&rdquo; is visually obvious and would be fixed; this
isn&rsquo;t the case for most of the crashing strings.</p>

<h2>Conclusion</h2>

<p>I don&rsquo;t really have <em>one</em> guess as to what&rsquo;s going on here &ndash; I&rsquo;d love to see what people think &ndash; but my current
guess is that the &ldquo;affinity&rdquo; of the virama to the left instead of the right confuses the algorithm that handles ZWNJs after
viramas into thinking the ZWNJ applies to the virama (it doesn&rsquo;t, there&rsquo;s a consonant in between), and this leads to some numbers
not matching up and causing a buffer overflow or something. Philippe&rsquo;s diagnosis of the vowel situation matches up with this.</p>

<p>An interesting thing is that I can cause this crash to happen more reliably in browsers by clicking on the string.</p>

<p>Additionally, <em>sometimes</em> it actually renders in spotlight for a split second before crashing; which
means that either the crash isn&rsquo;t deterministic, or it occurs in some process <em>after</em> rendering. I&rsquo;m
not sure what to think of either. Looking at the backtraces, the crash seems to occur in different
places, so it&rsquo;s likely that it&rsquo;s memory corruption that gets uncovered later.</p>

<p>I&rsquo;d love to hear if folks have further insight into this.</p>

<p>Update: Philippe on the Unicode mailing list has <a href="https://www.unicode.org/mail-arch/unicode-ml/y2018-m02/0103.html">an interesting theory</a></p>

<p><small>Yes, I could attach a debugger to the crashing process and investigate that instead, but that&rsquo;s no fun 😂</small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Philippe Verdy points out that these may be called &ldquo;phala forms&rdquo; at least for Bengali<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I don&rsquo;t think the Android keyboard <em>needs</em> this key; the keyboard seems very much a dump of &ldquo;what does this unicode block let us do&rdquo;, and includes things like Sindhi-specific or Kashmiri-specific characters for the Marathi keyboard as well as <em>extremely</em> archaic characters, whilst neglecting more common things like the eyelash reph (which doesn&rsquo;t have its own code point but is a special unicode sequence; native speakers should not be expected to be aware of this sequence).<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Rough Proposal for Sum Types in Go]]></title>
    <link href="http://manishearth.github.io/blog/2018/02/01/a-rough-proposal-for-sum-types-in-go/"/>
    <updated>2018-02-01T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2018/02/01/a-rough-proposal-for-sum-types-in-go</id>
    <content type="html"><![CDATA[<p>Sum types are pretty cool. Just like how a struct is basically &ldquo;This contains one of these <em>and</em> one of these&rdquo;,
a sum type is &ldquo;This contains one of these <em>or</em> one of these&rdquo;.</p>

<p>So for example, the following sum type in Rust:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Stringy</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Numerical</span><span class="p">(</span><span class="kt">u32</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or Swift:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">stringy</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">numerical</span><span class="p">(</span><span class="n">Int</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>would be one where it&rsquo;s either <code>Foo::Stringy</code> (<code>Foo::stringy</code> for swift), containing a <code>String</code>,
<em>or</em> <code>Foo::Numerical</code>, containing an integer.</p>

<p>This can be pretty useful. For example, messages between threads are often of a &ldquo;this or that or that or that&rdquo;
form.</p>

<p>The nice thing is, matching (switching) on these enums is usually <em>exhaustive</em> &ndash; you must list all
the cases (or include a default arm) for your code to compile. This leads to a useful component
of type safety &ndash; if you add a message to your message passing system, you&rsquo;ll know where to update it.</p>

<p>Go doesn&rsquo;t have these. Go <em>does</em> have interfaces, which are dynamically dispatched. The drawback here
is that you do not get the exhaustiveness condition, and consumers of your library can even add further
cases. (And, of course, dynamic dispatch can be slow). You <em>can</em> get exhaustiveness in Go with <a href="https://github.com/haya14busa/gosum">external tools</a>,
but it&rsquo;s preferable to have such things in the language IMO.</p>

<p>Many years ago when I was learning Go I wrote a <a href="http://inpursuitoflaziness.blogspot.in/2015/02/thoughts-of-rustacean-learning-go.html">blog post</a> about what I liked and disliked
as a Rustacean learning Go. Since then, I&rsquo;ve spent a lot more time with Go, and I&rsquo;ve learned to like each Go design decision that I initially
disliked, <em>except</em> for the lack of sum types. Most of my issues arose from &ldquo;trying to program Rust in Go&rdquo;,
i.e. using idioms that are natural to Rust (or other languages I&rsquo;d used previously). Once I got used to the
programming style, I realized that aside from the lack of sum types I really didn&rsquo;t find much missing
from the language. Perhaps improvements to error handling.</p>

<p>Now, my intention here isn&rsquo;t really to sell sum types. They&rsquo;re somewhat controversial for Go, and
there are good arguments on both sides. You can see one discussion on this topic <a href="https://github.com/golang/go/issues/19412">here</a>.
If I were to make a more concrete proposal I&rsquo;d probably try to motivate this in much more depth. But even
I&rsquo;m not very <em>strongly</em> of the opinion that Go needs sum types; I have a slight preference for it.</p>

<p>Instead, I&rsquo;m going to try and sketch this proposal for sum types that has been floating around my
mind for a while. I end up mentioning it often and it&rsquo;s nice to have something to link to. Overall,
I think this &ldquo;fits well&rdquo; with the existing Go language design.</p>

<h2>The proposal</h2>

<p>The essence is pretty straightforward: Extend interfaces to allow for &ldquo;closed interfaces&rdquo;. These are
interfaces that are only implemented for a small list of types.</p>

<p>Writing the <code>Foo</code> sum type above would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Foo</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SomeFunction</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">OtherFunction</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It doesn&rsquo;t even need to have functions defined on it.</p>

<p>The interface functions can only be called if you have an interface object; they are not directly available
on variant types without explicitly casting (<code>Foo("...").SomeFunction()</code>).</p>

<p>(I&rsquo;m not strongly for the <code>for</code> keyword syntax, it&rsquo;s just a suggestion. The core idea is that
you define an interface and you define the types it closes over. Somehow.)</p>

<p>A better example would be an interface for a message-passing system for Raft:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">VoteRequest</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">CandidateId</span> <span class="kt">uint</span>
</span><span class='line'>    <span class="nx">Term</span> <span class="kt">uint</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">VoteResponse</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Term</span> <span class="kt">uint</span>
</span><span class='line'>    <span class="nx">VoteGranted</span> <span class="kt">bool</span>
</span><span class='line'>    <span class="nx">VoterId</span> <span class="kt">uint</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">AppendRequest</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">AppendResponse</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">RaftMessage</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">VoteRequest</span><span class="p">,</span> <span class="nx">VoteResponse</span><span class="p">,</span> <span class="nx">AppendRequest</span><span class="p">,</span> <span class="nx">AppendResponse</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you use type switches for dealing with these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">switch</span> <span class="nx">value</span> <span class="o">:=</span> <span class="nx">msg</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">VoteRequest</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">value</span><span class="p">.</span><span class="nx">Term</span> <span class="o">&lt;=</span> <span class="nx">me</span><span class="p">.</span><span class="nx">Term</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">me</span><span class="p">.</span><span class="nx">reject_vote</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">CandidateId</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">me</span><span class="p">.</span><span class="nx">accept_vote</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">CandidateId</span><span class="p">,</span> <span class="nx">value</span><span class="p">.</span><span class="nx">Term</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">VoteResponse</span><span class="p">:</span> <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">AppendRequest</span><span class="p">:</span> <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">AppendResponse</span><span class="p">:</span> <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no need for the default case, unless you wish to leave one or more of the cases out.</p>

<p>Ideally, these could be implemented as inline structs instead of using dynamic dispatch. I&rsquo;m not sure
what this entails for the GC design, but I&rsquo;d love to hear thoughts on this.</p>

<p>We also make it possible to add methods to closed interfaces. This is in the spirit of
<a href="https://github.com/golang/go/issues/16254">this proposal</a>, where you allow</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">message</span> <span class="nx">RaftMessage</span><span class="p">)</span> <span class="nx">Process</span><span class="p">(</span><span class="nx">me</span> <span class="nx">Me</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// message handling logic</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>for closed interfaces.</p>

<p>This aligns more with how sum types are written and used in other languages; instead of assuming
that each method will be a <code>switch</code> on the variant, you can write arbitrary code that <em>may</em> <code>switch</code>
on the type but it can also just call other methods. This is really nice because you can write
methods in <em>both</em> ways &ndash; if it&rsquo;s a &ldquo;responsibility of the inner type&rdquo; kind of method, require it in
the interface and delegate it to the individual types. If it&rsquo;s a &ldquo;responsibility of the interface&rdquo;
method, write it as a method on the interface as a whole. I kind of wish Rust had this, because in Rust
you sometimes end up writing things like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">match</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span><span class="o">::</span><span class="n">Stringy</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">process</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">Foo</span><span class="o">::</span><span class="n">Numerical</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">n</span><span class="p">.</span><span class="n">process</span><span class="p">(),</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, this would work better as a trait, but then you lose some niceties of Rust enums. With this
proposal Go can have it both ways.</p>

<hr />

<p>Anyway, thoughts? This is a really rough proposal, and I&rsquo;m not sure how receptive other Gophers will be
to this, nor how complex its implementation would be. I don&rsquo;t really intend to submit this as a formal proposal,
but if someone else wants to they are more than welcome to build on this idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Tokio and Async IO All About?]]></title>
    <link href="http://manishearth.github.io/blog/2018/01/10/whats-tokio-and-async-io-all-about/"/>
    <updated>2018-01-10T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2018/01/10/whats-tokio-and-async-io-all-about</id>
    <content type="html"><![CDATA[<p>The Rust community lately has been focusing a lot on &ldquo;async I/O&rdquo; through the <a href="https://github.com/tokio-rs/">tokio</a>
project. This is pretty great!</p>

<p>But for many in the community who haven&rsquo;t worked with web servers and related things it&rsquo;s pretty
confusing as to what we&rsquo;re trying to achieve there. When this stuff was being discussed around 1.0,
I was pretty lost as well, having never worked with this stuff before.</p>

<p>What&rsquo;s all this Async I/O business about? What are coroutines? Lightweight threads? Futures? How
does this all fit together?</p>

<h2>What problem are we trying to solve?</h2>

<p>One of Rust&rsquo;s key features is &ldquo;fearless concurrency&rdquo;. But the kind of concurrency required for handling a
large amount of I/O bound tasks &ndash; the kind of concurrency found in Go, Elixir, Erlang &ndash; is absent
from Rust.</p>

<p>Let&rsquo;s say you want to build something like a web service. It&rsquo;s going to be handling thousands of
requests at any point in time (known as the &ldquo;<a href="https://en.wikipedia.org/wiki/C10k_problem">c10k</a> problem&rdquo;). In general, the problem we&rsquo;re
considering is having a huge number of I/O bound (usually network I/O) tasks.</p>

<p>&ldquo;Handling N things at once&rdquo; is best done by using threads. But &hellip; <em>thousands</em> of threads? That
sounds a bit much. Threads can be pretty expensive: Each thread needs to allocate a large stack,
setting up a thread involves a bunch of syscalls, and context switching is expensive.</p>

<p>Of course, thousands of threads <em>all doing work</em> at once is not going to work anyway. You only
have a fixed number of cores, and at any one time only one thread will be running on a core.</p>

<p>But for cases like web servers, most of these threads won&rsquo;t be doing work. They&rsquo;ll be waiting on the
network. Most of these threads will either be listening for a request, or waiting for their response
to get sent.</p>

<p>With regular threads, when you perform a blocking I/O operation, the syscall returns control
to the kernel, which won&rsquo;t yield control back, because the I/O operation is probably not finished.
Instead, it will use this as an opportunity to swap in a different thread, and will swap the original
thread back when its I/O operation is finished (i.e. it&rsquo;s &ldquo;unblocked&rdquo;). Without Tokio and friends,
this is how you would handle such things in Rust. Spawn a million threads; let the OS deal with
scheduling based on I/O.</p>

<p>But, as we already discovered, threads don&rsquo;t scale well for things like this<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>We need &ldquo;lighter&rdquo; threads.</p>

<h2>Lightweight threading</h2>

<p>I think the best way to understand lightweight threading is to forget about Rust for a moment
and look at a language that does this well, Go.</p>

<p>So instead, Go has lightweight threads, called &ldquo;goroutines&rdquo;. You spawn these with the <code>go</code>
keyword. A web server might do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">listener</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'><span class="c1">// handle err</span>
</span><span class='line'><span class="k">for</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">Accept</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// handle err</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// spawn goroutine:</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a loop which waits for new TCP connections, and spawns a goroutine with the connection
and the function <code>handler</code>. Each connection will be a new goroutine, and the goroutine will shut down
when <code>handler</code> finishes. In the meantime, the main loop continues executing, because it&rsquo;s running in
a different goroutine.</p>

<p>So if these aren&rsquo;t &ldquo;real&rdquo; (operating system) threads, what&rsquo;s going on?</p>

<p>A goroutine is an example of a &ldquo;lightweight&rdquo; thread. The operating system doesn&rsquo;t know about these,
it sees N threads owned by the Go runtime, and the Go runtime maps M goroutines onto them<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, swapping
goroutines in and out much like the operating system scheduler. It&rsquo;s able to do this because
Go code is already interruptible for the GC to be able to run, so the scheduler can always ask goroutines
to stop. The scheduler is also aware of I/O, so when a goroutine is waiting on I/O it yields to the scheduler.</p>

<p>Essentialy, a compiled Go function will have a bunch of points scattered throughout it where it
tells the scheduler and GC &ldquo;take over if you want&rdquo; (and also &ldquo;I&rsquo;m waiting on stuff, please take
over&rdquo;).</p>

<p>When a goroutine is swapped on an OS thread, some registers will be saved, and
the program counter will switch to the new goroutine.</p>

<p>But what about its stack? OS threads have a large stack with them, and you kinda need a stack for functions
and stuff to work.</p>

<p>What Go used to do was segmented stacks. The reason a thread needs a large stack is that most
programming languages, including C, expect the stack to be contiguous, and stacks can&rsquo;t just be
&ldquo;reallocated&rdquo; like we do with growable buffers since we expect stack data to stay put so that
pointers to stack data to continue to work. So we reserve all the stack we think we&rsquo;ll ever need
(~8MB), and hope we don&rsquo;t need more.</p>

<p>But the expectation of stacks being contiguous isn&rsquo;t strictly necessary. In Go, stacks are made of tiny
chunks. When a function is called, it checks if there&rsquo;s enough space on the stack for it to run, and if not,
allocates a new chunk of stack and runs on it. So if you have thousands of threads doing a small amount of work,
they&rsquo;ll all get thousands of tiny stacks and it will be fine.</p>

<p>These days, Go actually does something different; it <a href="https://blog.cloudflare.com/how-stacks-are-handled-in-go/">copies stacks</a>. I mentioned that stacks can&rsquo;t
just be &ldquo;reallocated&rdquo; we expect stack data to stay put. But that&rsquo;s not necessarily true &mdash;
because Go has a GC it knows what all the pointers are <em>anyway</em>, and it can rewrite pointers to
stack data on demand.</p>

<p>Either way, Go&rsquo;s rich runtime lets it handle this stuff well. Goroutines are super cheap, and you can spawn
thousands without your computer having problems.</p>

<p>Rust <em>used</em> to support lightweight/&ldquo;green&rdquo; threads (I believe it used segmented stacks). However, Rust cares
a lot about not paying for things you don&rsquo;t use, and this imposes a penalty on all your code even if you
aren&rsquo;t using green threads, and it was removed pre-1.0.</p>

<h2>Async I/O</h2>

<p>A core building block of this is Async I/O. As mentioned in the previous section,
with regular blocking I/O, the moment you request I/O your thread will not be allowed to run
(&ldquo;blocked&rdquo;) until the operation is done. This is perfect when working with OS threads (the OS
scheduler does all the work for you!), but if you have lightweight threads you instead want to
replace the lightweight thread running on the OS thread with a different one.</p>

<p>Instead, you use non-blocking I/O, where the thread queues a request for I/O with the OS and continues
execution. The I/O request is executed at some later point by the kernel. The thread then needs to ask the
OS &ldquo;Is this I/O request ready yet?&rdquo; before looking at the result of the I/O.</p>

<p>Of course, repeatedly asking the OS if it&rsquo;s done can be tedious and consume resources. This is why
there are system calls like <a href="https://en.wikipedia.org/wiki/Epoll"><code>epoll</code></a>. Here, you can bundle together a bunch of unfinished I/O requests,
and then ask the OS to wake up your thread when <em>any</em> of these completes. So you can have a scheduler
thread (a real thread) that swaps out lightweight threads that are waiting on I/O, and when there&rsquo;s nothing
else happening it can itself go to sleep with an <code>epoll</code> call until the OS wakes it up (when one of the I/O
requests completes).</p>

<p>(The exact mechanism involved here is probably more complex)</p>

<p>So, bringing this to Rust, Rust has the <a href="https://github.com/carllerche/mio">mio</a> library, which is a platform-agnostic
wrapper around non-blocking I/O and tools like epoll/kqueue/etc. It&rsquo;s a building block; and while
those used to directly using <code>epoll</code> in C may find it helpful, it doesn&rsquo;t provide a nice programming
model like Go does. But we can get there.</p>

<h2>Futures</h2>

<p>These are another building block. A <a href="https://docs.rs/futures/0.1.17/futures/future/trait.Future.html"><code>Future</code></a> is the promise of eventually having a value
(in fact, in Javascript these are called <code>Promise</code>s).</p>

<p>So for example, you can ask to listen on a network socket, and get a <code>Future</code> back  (actually, a
<code>Stream</code>, which is like a future but for a sequence of values). This <code>Future</code> won&rsquo;t contain the
response <em>yet</em>, but will know when it&rsquo;s ready. You can <code>wait()</code> on a <code>Future</code>, which will block
until you have a result, and you can also <code>poll()</code> it, asking it if it&rsquo;s done yet (it will give you
the result if it is).</p>

<p>Futures can also be chained, so you can do stuff like <code>future.then(|result| process(result))</code>.
The closure passed to <code>then</code> itself can produce another future, so you can chain together
things like I/O operations. With chained futures, <code>poll()</code> is how you make progress; each time
you call it it will move on to the next future provided the existing one is ready.</p>

<p>This is a pretty good abstraction over things like non-blocking I/O.</p>

<p>Chaining futures works much like chaining iterators. Each <code>and_then</code> (or whatever combinator)
call returns a struct wrapping around the inner future, which may contain an additional closure.
Closures themselves carry their references and data with them, so this really ends up being
very similar to a tiny stack!</p>

<h2>🗼 Tokio 🗼</h2>

<p>Tokio&rsquo;s essentially a nice wrapper around mio that uses futures. Tokio has a core
event loop, and you feed it closures that return futures. What it will do is
run all the closures you feed it, use mio to efficiently figure out which futures
are ready to make a step<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, and make progress on them (by calling <code>poll()</code>).</p>

<p>This actually is already pretty similar to what Go was doing, at a conceptual level.
You have to manually set up the Tokio event loop (the &ldquo;scheduler&rdquo;), but once you do
you can feed it tasks which intermittently do I/O, and the event loop takes
care of swapping over to a new task when one is blocked on I/O. A crucial difference is
that Tokio is single threaded, whereas the Go scheduler can use multiple OS threads
for execution. However, you can offload CPU-critical tasks onto other OS threads and
use channels to coordinate so this isn&rsquo;t that big a deal.</p>

<p>While at a conceptual level this is beginning to shape up to be similar to what we had for Go, code-
wise this doesn&rsquo;t look so pretty. For the following Go code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// error handling ignored for simplicity</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo</span><span class="p">(</span><span class="o">...</span><span class="p">)</span> <span class="nx">ReturnType</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">data</span> <span class="o">:=</span> <span class="nx">doIo</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">compute</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">moreData</span> <span class="p">=</span> <span class="nx">doMoreIo</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">moreResult</span> <span class="o">:=</span> <span class="nx">moreCompute</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">someFinalResult</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Rust code will look something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// error handling ignored for simplicity</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="p">(...)</span> <span class="o">-&gt;</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">ReturnType</span><span class="p">,</span> <span class="n">ErrorType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">do_io</span><span class="p">().</span><span class="n">and_then</span><span class="p">(</span><span class="o">|</span><span class="n">data</span><span class="o">|</span> <span class="n">do_more_io</span><span class="p">(</span><span class="n">compute</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">.</span><span class="n">and_then</span><span class="p">(</span><span class="o">|</span><span class="n">more_data</span><span class="o">|</span> <span class="n">do_even_more_io</span><span class="p">(</span><span class="n">more_compute</span><span class="p">(</span><span class="n">more_data</span><span class="p">)))</span>
</span><span class='line'>    <span class="c1">// ......</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not pretty. <a href="http://alexcrichton.com/futures-rs/futures/future/fn.loop_fn.html#examples">The code gets worse if you introduce branches and loops</a>. The problem is that in Go we
got the interruption points for free, but in Rust we have to encode this by chaining up combinators
into a kind of state machine. Ew.</p>

<h2>Generators and async/await</h2>

<p>This is where generators (also called coroutines) come in.</p>

<p><a href="https://doc.rust-lang.org/nightly/unstable-book/language-features/generators.html">Generators</a> are an experimental feature in Rust. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">generator</span> <span class="o">=</span> <span class="o">||</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">yield</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">generator</span><span class="p">.</span><span class="n">resume</span><span class="p">(),</span> <span class="n">GeneratorState</span><span class="o">::</span><span class="n">Yielded</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">generator</span><span class="p">.</span><span class="n">resume</span><span class="p">(),</span> <span class="n">GeneratorState</span><span class="o">::</span><span class="n">Yielded</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">generator</span><span class="p">.</span><span class="n">resume</span><span class="p">(),</span> <span class="n">GeneratorState</span><span class="o">::</span><span class="n">Yielded</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Functions are things which execute a task and return once. On the other hand, generators
return multiple times; they pause execution to &ldquo;yield&rdquo; some data, and can be resumed
at which point they will run until the next yield. While my example doesn&rsquo;t show this, generators
can also finish executing like regular functions.</p>

<p>Closures in Rust are
<a href="http://huonw.github.io/blog/2015/05/finding-closure-in-rust/">sugar for a struct containing captured data, plus an implementation of one of the <code>Fn</code> traits to make it callable</a>.</p>

<p>Generators are similar, except they implement the <code>Generator</code> trait<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, and usually store an enum representing various states.</p>

<p>The <a href="https://doc.rust-lang.org/nightly/unstable-book/language-features/generators.html#generators-as-state-machines">unstable book</a> has some examples on what the generator state machine enum will look like.</p>

<p>This is much closer to what we were looking for! Now our code can look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="p">(...)</span> <span class="o">-&gt;</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">ReturnType</span><span class="p">,</span> <span class="n">ErrorType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">generator</span> <span class="o">=</span> <span class="o">||</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">future</span> <span class="o">=</span> <span class="n">do_io</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// poll the future, yielding each time it fails,</span>
</span><span class='line'>            <span class="c1">// but if it succeeds then move on</span>
</span><span class='line'>            <span class="k">match</span> <span class="n">future</span><span class="p">.</span><span class="n">poll</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">Ok</span><span class="p">(</span><span class="n">Async</span><span class="o">::</span><span class="n">Ready</span><span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">data</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span> <span class="k">break</span> <span class="p">},</span>
</span><span class='line'>                <span class="nb">Ok</span><span class="p">(</span><span class="n">Async</span><span class="o">::</span><span class="n">NotReady</span><span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="p">(),</span>
</span><span class='line'>                <span class="nb">Err</span><span class="p">(..)</span> <span class="o">=&gt;</span> <span class="p">...</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="kr">yield</span> <span class="n">future</span><span class="p">.</span><span class="n">polling_info</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">compute</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// do the same thing for `doMoreIo()`, etc</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">futurify</span><span class="p">(</span><span class="n">generator</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>futurify</code> is a function that takes a generator and returns a future which on
each <code>poll</code> call will <code>resume()</code> the generator, and return <code>NotReady</code> until the generator
finishes executing.</p>

<p>But wait, this is even <em>more</em> ugly! What was the point of converting our relatively
clean callback-chaining code into this mess?</p>

<p>Well, if you look at it, this code now looks <em>linear</em>. We&rsquo;ve converted our callback
code to the same linear flow as the Go code, however it has this weird loop-yield boilerplate
and the <code>futurify</code> function and is overall not very neat.</p>

<p>And that&rsquo;s where <a href="https://github.com/alexcrichton/futures-await">futures-await</a> comes in. <code>futures-await</code> is a procedural macro that
does the last-mile work of packaging away this boilerplate. It essentially lets you write
the above function as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[async]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">foo</span><span class="p">(...)</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">ReturnType</span><span class="p">,</span> <span class="n">ErrorType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">await</span><span class="o">!</span><span class="p">(</span><span class="n">do_io</span><span class="p">());</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">compute</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">more_data</span> <span class="o">=</span> <span class="n">await</span><span class="o">!</span><span class="p">(</span><span class="n">do_more_io</span><span class="p">());</span>
</span><span class='line'>    <span class="c1">// ....</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice and clean. Almost as clean as the Go code, just that we have explicit <code>await!()</code> calls. These
await calls are basically providing the same function as the interruption points that Go code
gets implicitly.</p>

<p>And, of course, since it&rsquo;s using a generator under the hood, you can loop and branch and do whatever
else you want as normal, and the code will still be clean.</p>

<h2>Tying it together</h2>

<p>So, in Rust, futures can be chained together to provide a lightweight stack-like system. With async/await,
you can neatly write these future chains, and <code>await</code> provides explicit interruption points on each I/O operation.
Tokio provides an event loop &ldquo;scheduler&rdquo; abstraction, which you can feed async functions to, and under the hood it
uses mio to abstract over low level non-blocking I/O primitives.</p>

<p>These are components which can be used independently &mdash; you can use tokio with futures without
using async/await. You can use async/await without using Tokio. For example, I think this would be
useful for Servo&rsquo;s networking stack. It doesn&rsquo;t need to do <em>much</em> parallel I/O (not at the order
of thousands of threads), so it can just use multiplexed OS threads. However, we&rsquo;d still want
to pool threads and pipeline data well, and async/await would help here.</p>

<p>Put together, all these components get something almost as clean as the Go stuff, with a little more
explicit boilerplate. Because generators (and thus async/await) play nice with the borrow checker
(they&rsquo;re just enum state machines under the hood), Rust&rsquo;s safety guarantees are all still in play,
and we get to have &ldquo;fearless concurrency&rdquo; for programs having a huge quantity of I/O bound tasks!</p>

<p><em>Thanks to Arshia Mufti, Steve Klabnik, Zaki Manian, and Kyle Huey for reviewing drafts of this post</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Note that this isn&rsquo;t necessarily true for <em>all</em> network server applications. For example, Apache uses OS threads. OS threads are often the best tool for the job.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Lightweight threading is also often called M:N threading (also &ldquo;green threading&rdquo;)<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>In general future combinators aren&rsquo;t really aware of tokio or even I/O, so there&rsquo;s no easy way to ask a combinator &ldquo;hey, what I/O operation are you waiting for?&rdquo;. Instead, with Tokio you use special I/O primitives that still provide futures but also register themselves with the scheduler in thread local state. This way when a future is waiting for I/O, Tokio can check what the recentmost I/O operation was, and associate it with that future so that it can wake up that future again when <code>epoll</code> tells it that that I/O operation is ready.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>The <code>Generator</code> trait has a <code>resume()</code> function which you can call multiple times, and each time it will return any yielded data or tell you that the generator has finished running.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust in 2018]]></title>
    <link href="http://manishearth.github.io/blog/2018/01/10/rust-in-2018/"/>
    <updated>2018-01-10T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2018/01/10/rust-in-2018</id>
    <content type="html"><![CDATA[<p>A week ago <a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html">we put out a call for blog posts for what folks think Rust should do in 2018</a>.</p>

<p>This is mine.</p>

<h2>Overall focus</h2>

<p>I think 2017 was a great year for Rust. Near the beginning of the year, after custom derive
and a bunch of things stabilized, I had a strong feeling that Rust was &ldquo;complete&rdquo;. Not really &ldquo;finished&rdquo;,
there&rsquo;s still tons of stuff to improve, but this was the first time stable Rust was the language
I wanted it to be, and was something I could recommend for most kinds of work without reservations.</p>

<p>I think this is a good signal to wind down the frightening pace of new features Rust has been getting.
And that happened! We had the impl period, which took some time to focus on <em>getting things done</em> before
proposing new things. And Rust is feeling more polished than ever.</p>

<p>Like <a href="https://www.ncameron.org/blog/rust-2018/">Nick</a>, I feel like 2018 should be boring. I feel like we should focus on polishing what
we have, implementing all the things, and improving our approachability as a language.</p>

<p>Basically, I want to see this as an extended impl period.</p>

<p>This doesn&rsquo;t mean I&rsquo;m looking for a moratorium on RFCs, really. Hell, in the past few days I&rsquo;ve posted
one pre-pre-RFC<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, one pre-RFC, and one RFC (from the pre-RFC). I&rsquo;m mostly looking for <em>prioritizing</em> impl
work over designing new things, but still having <em>some</em> focus on design.</p>

<h2>Language</h2>

<p>I think Rust still has some &ldquo;missing bits&rdquo; which make it hard to justify for some use cases. Rust&rsquo;s
async story is being fleshed out. We don&rsquo;t yet have stable SIMD or stable inline ASM. The microcontroller
story is kinda iffy. RLS/clippy need nightly. I&rsquo;d like to see these crystallize and stabilize this year.</p>

<p>I think this year we need to continue to take a critical look at Rust&rsquo;s ergonomics. Last year the
ergonomics initiative was really good for Rust, and I&rsquo;d like to see more of that. This is kind of at
odds with my &ldquo;focus on polishing Rust&rdquo; statement, but fixing ergonomics is not just new features. It&rsquo;s
also about figuring out barriers in Rust, polishing mental models, improving docs/diagnostics, and in
general figuring out how to best present Rust&rsquo;s features. Starting dialogues about confusing bits of
the language and figuring out the best mental model to present them with is something we should
continue doing. Sometimes this may need new features, indeed, but not always. We must continue
to take a critical look at how our language presents itself to newcomers.</p>

<h2>Community</h2>

<p>I&rsquo;d like to see a stronger focus on mentoring. Mentoring on rustc, mentoring on major libraries, mentoring on
Rust tooling, mentoring everywhere. This includes not just the mentors, but the associated infrastructure &ndash;
contribution docs, sites like <a href="http://starters.servo.org/">servo-starters</a> and <a href="https://www.rustaceans.org/findwork">findwork</a>, and similar tooling.</p>

<p>I&rsquo;m also hoping for more companies to invest back into Rust. This year <a href="http://buoyant.io/">Buoyant</a> became pretty well
known within the community, and many of their employees are paid to work on various important parts
of the Rust ecosystem. There are also multiple consulting groups that contribute to the ecosystem.
It&rsquo;s nice to see that &ldquo;paid to work on Rust&rdquo; is no longer limited to Mozilla, and this is crucial
for the health of the language. I hope this trend continues.</p>

<p>Finally, I want to see more companies <em>talk</em> about Rust. Success stories are really nice to hear.
I&rsquo;ve heard many amazing success stories this year, but a lot of them are things which can&rsquo;t be shared.</p>

<h2>Governance</h2>

<p>Last year we started seeing the limits of the RFC process. Large RFCs were stressful for both the RFC authors
and participating community members, and rather opaque for newer community members wishing to participate.
Alternative models have been discussed; I&rsquo;d like to see more movement on this front.</p>

<p>I&rsquo;d also like to grow the moderation team; it is currently rather small and doesn&rsquo;t have the capacity to handle
incidents in a timely fashion.</p>

<h2>Docs / Learning</h2>

<p>I&rsquo;d like to see a focus on improving Rust for folks who learn the language by <em>trying things</em> over reading books <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>&nbsp;<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>This means better diagnostics, better alternative resources like rustbyexample, etc. Improving mentorship helps here
as well.</p>

<p>Of course, I&rsquo;d like to see our normal docs work continue to happen.</p>

<hr />

<p>I&rsquo;m overall really excited for 2018. I think we&rsquo;re doing great on most fronts so far, and if we
maintain the momentum we&rsquo;ll have an even-more-awesome Rust by the end of this year!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This isn&rsquo;t a &ldquo;pre rfc&rdquo; because I&rsquo;ve written it as a much looser sketch of the problem and a solution<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>There is literally no programming language I&rsquo;ve personally learned through a book or formal teaching. I&rsquo;ve often read books after I know a language because it&rsquo;s fun and instructive, but it&rsquo;s always started out as &ldquo;learn extreme basics&rdquo; followed by &ldquo;look at existing code, tweak stuff, and write your own code&rdquo;.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Back in <em>my</em> day Rust didn&rsquo;t have a book, just this tiny thing called &ldquo;The Tutorial&rdquo;. <em>grouches incessantly</em><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undefined vs Unsafe in Rust]]></title>
    <link href="http://manishearth.github.io/blog/2017/12/24/undefined-vs-unsafe-in-rust/"/>
    <updated>2017-12-24T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/12/24/undefined-vs-unsafe-in-rust</id>
    <content type="html"><![CDATA[<p>Recently Julia Evans wrote an <a href="https://jvns.ca/blog/2017/12/23/segfault-debugging/">excellent post</a> about debugging a segfault in Rust. (Go read it, it&rsquo;s good)</p>

<p>One thing it mentioned was</p>

<blockquote><p>I think “undefined” and “unsafe” are considered to be synonyms.</p></blockquote>

<p>This is &hellip; incorrect. However, we in the Rust community have never really explicitly outlined the
distinction, so that confusion is on us! This blog post is an attempt to clarify the difference of
terminology as used within the Rust community. It&rsquo;s a very useful but subtle distinction and I feel we&rsquo;d be
able to talk about safety more expressively if this was well known.</p>

<h2>Unsafe means two things in Rust, yay</h2>

<p>So, first off, the waters are a bit muddied by the fact that Rust uses <code>unsafe</code> to both mean &ldquo;within
an <code>unsafe {}</code> block&rdquo; block and &ldquo;something Bad is happening here&rdquo;. It&rsquo;s possible to have safe code
within an <code>unsafe</code> block; indeed this is the <em>primary function</em> of an <code>unsafe</code> block. Somewhat
counterintutively, the <code>unsafe</code> block&rsquo;s purpose is to actually tell the compiler &ldquo;I know you don&rsquo;t
like this code but trust me, it&rsquo;s safe!&rdquo; (where &ldquo;safe&rdquo; is the negation of the <em>second</em> meaning of &ldquo;unsafe&rdquo;,
i.e. &ldquo;something Bad is not happening here&rdquo;).</p>

<p>Similarly, we use &ldquo;safe code&rdquo; to mean &ldquo;code not using <code>unsafe{}</code> blocks&rdquo; but also &ldquo;code that is not unsafe&rdquo;,
i.e. &ldquo;code where nothing bad happens&rdquo;.</p>

<p>This blog post is primarily about the &ldquo;something bad is happening here&rdquo; meaning of &ldquo;unsafe&rdquo;. When referring
to the other kind I&rsquo;ll specifically say &ldquo;code within <code>unsafe</code> blocks&rdquo; or something like that.</p>

<h2>Undefined behavior</h2>

<p>In languages like C, C++, and Rust, undefined behavior is when you reach a point where
the compiler is allowed to do anything with your code. This is distinct from implementation-defined
behavior, where usually a given compiler/library will do a deterministic thing, however they have some
freedom from the spec in deciding what that thing is.</p>

<p>Undefined behavior can be pretty scary. This is usually because in practice it causes problems when
the compiler assumes &ldquo;X won&rsquo;t happen because it is undefined behavior&rdquo;, and X ends up happening,
breaking the assumptions. In some cases this does nothing dangerous, but often the compiler will
end up doing wacky things to your code. Dereferencing a null pointer will <em>sometimes</em> cause segfaults
(which is the compiler generating code that actually dereferences the pointer, making the kernel
complain), but sometimes it will be optimized in a way that assumes it won&rsquo;t and moves around code
such that you have major problems.</p>

<p>Undefined behavior is a global property, based on how your code is <em>used</em>. The following function
in C++ or Rust may or may not exhibit undefined behavior, based on how it gets used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">deref</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// do not try this at home</span>
</span><span class='line'><span class="k">fn</span> <span class="n">deref</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="o">*</span><span class="k">mut</span> <span class="kt">u32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">u32</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span> <span class="o">*</span><span class="n">x</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As long as you always call it with a valid pointer to an integer, there is no undefined behavior
involved.</p>

<p>But in either language, if you use it with some pointer conjured out of thin air (or, like <code>0x01</code>), that&rsquo;s
probably undefined behavior.</p>

<p>As it stands, UB is a property of the entire program and its execution. Sometimes you may have snippets of code
that will always exhibit undefined behavior regardless of how they are called, but in general UB
is a global property.</p>

<h2>Unsafe behavior</h2>

<p>Rust&rsquo;s concept of &ldquo;unsafe behavior&rdquo; (I&rsquo;m coining this term because &ldquo;unsafety&rdquo; and &ldquo;unsafe code&rdquo; can
be a bit confusing) is far more scoped. Here, <code>fn deref</code> <em>is</em> &ldquo;unsafe&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, even if you <em>always</em>
call it with a valid pointer. The reason it is still unsafe is because it&rsquo;s possible to trigger UB by only
changing the &ldquo;safe&rdquo; caller code. I.e. &ldquo;changes to code outside unsafe blocks can trigger UB if they include
calls to this function&rdquo;.</p>

<p>Basically, in Rust a bit of code is &ldquo;safe&rdquo; if it cannot exhibit undefined behavior under all circumstances of
that code being used. The following code exhibits &ldquo;safe behavior&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">raw</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">x</span> <span class="k">as</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u32</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">raw</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We dereferenced a raw pointer, but we knew it was valid. Of course, actual <code>unsafe</code> blocks will
usually be &ldquo;actually totally safe&rdquo; for less obvious reasons, and part of this is because
<a href="https://doc.rust-lang.org/nomicon/working-with-unsafe.html#working-with-unsafe"><code>unsafe</code> blocks sometimes can pollute the entire module</a>.</p>

<p>Basically, &ldquo;safe&rdquo; in Rust is a more local property. Code isn&rsquo;t safe just because you only use it in
a way that doesn&rsquo;t trigger UB, it is safe because there is literally <em>no way to use it such that it
will do so</em>. No way to do so without using <code>unsafe</code> blocks, that is<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>This is a distinction that&rsquo;s <em>possible</em> to draw in Rust because it gives us the ability
to compartmentalize safety. Trying to apply this definition to C++ is problematic; you can
ask &ldquo;is <code>std::unique_ptr&lt;T&gt;</code> safe?&rdquo;, but you can <em>always</em> use it within code in a way that you trigger
undefined behavior, because C++ does not have the tools for compartmentalizing safety. The distinction
between &ldquo;code which doesn&rsquo;t need to worry about safety&rdquo; and &ldquo;code which does need to worry about safety&rdquo;
exists in Rust in the form of &ldquo;code outside of <code>unsafe {}</code>&rdquo; and &ldquo;code within <code>unsafe {}</code>&rdquo;, whereas in
C++ it&rsquo;s a lot fuzzier and based on expectations (and documentation/the spec).</p>

<p>So C++&rsquo;s <code>std::unique_ptr&lt;T&gt;</code> is &ldquo;safe&rdquo; in the sense that it does what you expect but
if you use it in a way counter to how it&rsquo;s <em>supposed</em> to be used (constructing one from an invalid pointer, for example)
it can blow up. This is still a useful sense of safety, and is how one regularly reasons about safety in C++. However it&rsquo;s not
the same sense of the term as used in Rust, which can be a bit more formal about what the expectations
actually are.</p>

<p>So <code>unsafe</code> in Rust is a strictly more general concept &ndash; all code exhibiting undefined behavior in Rust is also &ldquo;unsafe&rdquo;,
however not all &ldquo;unsafe&rdquo; code in Rust exhibits undefined behavior as written in the current program.</p>

<p>Rust furthermore attempts to guarantee that you will not trigger undefined behavior if you do not use <code>unsafe {}</code> blocks.
This of course depends on the correctness of the compiler (it has bugs) and of the libraries you use (they may also have bugs)
but this compartmentalization gets you most of the way there in having UB-free programs.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Once again in we have a slight difference between an &ldquo;<code>unsafe fn</code>&rdquo;, i.e. a function that needs an <code>unsafe</code> block to call and probably is unsafe, and an &ldquo;unsafe function&rdquo;, a function that exhibits unsafe behavior.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This caveat and the confusing dual-usage of the term &ldquo;safe&rdquo; lead to the rather tautological-sounding sentence &ldquo;Safe Rust code is Rust code that cannot cause undefined behavior when used in safe Rust code&rdquo;<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Font-size: An Unexpectedly Complex CSS Property]]></title>
    <link href="http://manishearth.github.io/blog/2017/08/10/font-size-an-unexpectedly-complex-css-property/"/>
    <updated>2017-08-10T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/08/10/font-size-an-unexpectedly-complex-css-property</id>
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en/docs/Web/CSS/font-size"><code>font-size</code></a> is the worst.</p>

<p>It&rsquo;s a CSS property probably everyone who writes CSS has used at some point. It&rsquo;s pretty ubiquitous.</p>

<p>And it&rsquo;s <em>super</em> complicated.</p>

<p>&ldquo;But it&rsquo;s just a number&rdquo;, you say. &ldquo;How can that be complicated?&rdquo;</p>

<p>I too felt that way one time. And then I worked on implementing it for <a href="https://wiki.mozilla.org/Quantum/Stylo">stylo</a>.</p>

<p>Stylo is the project to integrate <a href="http://github.com/servo/servo/">Servo</a>&rsquo;s styling system into Firefox. The styling system handles
parsing CSS, determining which rules apply to which elements, running this through the cascade,
and eventually computing and assigning styles to individual elements in the tree. This happens not
only on page load, but also whenever various kinds of events (including DOM manipulation) occur,
and is a nontrivial portion of pageload and interaction times.</p>

<p>Servo is in <a href="https://rust-lang.org">Rust</a>, and makes use of Rust&rsquo;s safe parallelism in many places, one of them being
styling. Stylo has the potential to bring these speedups into Firefox, along with the added safety
of the code being in a safer systems language.</p>

<p>Anyway, as far as the styling system is concerned, I believe that font-size is the most complex
property it has to handle. Some properties may be more complicated when it comes to layout or
rendering, but font-size is probably the most complex one in the department of styling.</p>

<p>I&rsquo;m hoping this post can give an idea of how complex the Web can <em>get</em>, and also serve as documentation
for some of these complexities. I&rsquo;ll also try to give an idea of how the styling system works throughout this post.</p>

<p>Alright. Let&rsquo;s see what is so complex about font-size.</p>

<h2>The basics</h2>

<p>The syntax of the property is pretty straightforward. You can specify it as:</p>

<ul>
<li>A length (<code>12px</code>, <code>15pt</code>, <code>13em</code>, <code>4in</code>, <code>8rem</code>)</li>
<li>A percentage (<code>50%</code>)</li>
<li>A compound of the above, via a calc (<code>calc(12px + 4em + 20%)</code>)</li>
<li>An absolute keyword (<code>medium</code>, <code>small</code>, <code>large</code>, <code>x-large</code>, etc)</li>
<li>A relative keyword (<code>larger</code>, <code>smaller</code>)</li>
</ul>


<p>The first three are common amongst quite a few length-related properties. Nothing abnormal in the syntax.</p>

<p>The next two are interesting. Essentially, the absolute keywords map to various pixel values, and match
the result of <code>&lt;font size=foo&gt;</code> (e.g. <code>size=3</code> is the same as <code>font-size: medium</code>). The <em>actual</em> value they map to
is not straightforward, and I&rsquo;ll get to that later in this post.</p>

<p>The relative keywords basically scale the size up or down. The mechanism of the scaling was also complex, however
this has changed. I&rsquo;ll get to that too.</p>

<h2>em and rem units</h2>

<p>First up: <code>em</code> units. One of the things you can specify in <em>any</em> length-based CSS property is a value with an <code>em</code> or <code>rem</code>
unit.</p>

<p><code>5em</code> means &ldquo;5 times the <code>font-size</code> of the element this is applied to&rdquo;. <code>5rem</code> means &ldquo;5 times the font-size of the root element&rdquo;</p>

<p>The implications of this are that font-size needs to be computed before all the other properties (well, not quite, but we&rsquo;ll get to that!)
so that it is available during that time.</p>

<p>You can also use <code>em</code> units within <code>font-size</code> itself. In this case, it computed relative to the font-size of the <em>parent</em> element, since
you can&rsquo;t use the font-size of the element to compute itself.</p>

<h2>Minimum font size</h2>

<p>Browsers let you set a &ldquo;minimum&rdquo; font size in their preferences, and text will not be scaled below it. It&rsquo;s useful for those with
trouble seeing small text.</p>

<p>However, this doesn&rsquo;t affect properties which depend on font-size via <code>em</code> units. So if you&rsquo;re using a minimum font size,
<code>&lt;div style="font-size: 1px; height: 1em; background-color: red"&gt;</code> will have a very tiny height (which you&rsquo;ll notice from the color),
but the text will be clamped to the minimum size.</p>

<p>What this effectively means is that you need to keep track of <em>two</em> separate computed font size values. There&rsquo;s one value that
is used to actually determine the font size used for the text, and one value that is used whenever the style system needs to
know the font-size (e.g. to compute an <code>em</code> unit.)</p>

<p>This gets slightly more complicated when <a href="https://en.wikipedia.org/wiki/Ruby_character">ruby</a> is involved. In ideographic scripts (usually, Han
and Han-based scripts like Kanji or Hanja) it&rsquo;s sometimes useful to have the pronunciation
of each character above it in a phonetic script, for the aid of readers without proficiency in that
script, and this is known as &ldquo;ruby&rdquo; (&ldquo;furigana&rdquo; in Japanese). Because these scripts are ideographic,
it&rsquo;s not uncommon for learners to know the pronunciation of a word but have no idea how to write it.
An example would be <ruby><rb>日</rb><rt>に</rt><rb>本</rb><rt>ほん</rt></ruby>, which is 日本 (&ldquo;nihon&rdquo;,
i.e. &ldquo;Japan&rdquo;) in Kanji with ruby にほん in the phonetic Hiragana script above it.</p>

<p>As you can probably see, the phonetic ruby text is in a smaller font size (usually 50% of the font
size of the main text<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>). The minimum font-size support <em>respects</em> this, and ensures that if the ruby
is supposed to be <code>50%</code> of the size of the text, the minimum font size for the ruby is <code>50%</code> of the
original minimum font size. This avoids clamped text from looking like <ruby><rb>日</rb><rt style="font-size: 1em">に</rt><rb>本</rb><rt style="font-size: 1em">ほん</rt></ruby> (where both get set to
the same size), which is pretty ugly.</p>

<h2>Text zoomm</h2>

<p>Firefox additionally lets you zoom text only when zooming. If you have trouble reading small things, it&rsquo;s great to
be able to just blow up the text on the page without having the whole page get zoomed (which means you need to scroll
around a lot).</p>

<p>In this case, <code>em</code> units of other properties <em>do</em> get zoomed as well. After all, they&rsquo;re supposed to be relative to the text&rsquo;s font
size (and may have some relation to the text), so if that size has changed so should they.</p>

<p>(Of course, that argument could also apply to the min font size stuff. I don&rsquo;t have an answer for why it doesn&rsquo;t.)</p>

<p>This is actually pretty straightforward to implement. When computing absolute font sizes (including
keywords), zoom them if text zoom is on. For everything else continue as normal.</p>

<p>Text zoom is also disabled within <code>&lt;svg:text&gt;</code> elements, which leads to some trickiness here.</p>

<h2>Interlude: How the style system works</h2>

<p>Before I go ahead it&rsquo;s probably worth giving a quick overview of how everything works.</p>

<p>The responsibiltiy of a style system is to take in CSS code and a DOM tree, and assign computed styles to each element.</p>

<p>There&rsquo;s a distinction between &ldquo;specified&rdquo; and &ldquo;computed&rdquo; here. &ldquo;specified&rdquo; styles are in the format
you specify in CSS, whereas computed styles are those that get attached to the elements, sent to
layout, and inherited from. A given specified style may compute to different values when applied to
different elements.</p>

<p>So while you can <em>specify</em> <code>width: 5em</code>, it will compute to something like <code>width: 80px</code>. Computed values are usually a
cleaned up form of the specified value.</p>

<p>The style system will first parse the CSS, producing a bunch of rules usually containing declarations (a declaration is like <code>width: 20%;</code>; i.e. a property name and a specified value)</p>

<p>It then goes through the tree in top-down order (this is parallelized in Stylo), figuring out which declarations <em>apply</em> to each element
and in which order &ndash; some declarations have precedence over others. Then it will compute each relevant declaration against the element&rsquo;s style (and parent style, among other bits of info),
and store this value in the element&rsquo;s &ldquo;computed style&rdquo;.</p>

<p>There are a bunch of optimizations that Gecko and Servo do here to avoid duplicated work<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. There&rsquo;s a
bloom filter for quickly checking if deep descendent selectors apply to a subtree. There&rsquo;s a &ldquo;rule
tree&rdquo; that helps cache effort from determining applicable declarations. Computed styles are
reference counted and shared very often (since the default state is to inherit from the parent or
from the default style).</p>

<p>But ultimately, this is the gist of what happens.</p>

<h2>Keyword values</h2>

<p>Alright, this is where it gets complicated.</p>

<p>Remember when I said <code>font-size: medium</code> was a thing that mapped to a value?</p>

<p>So what does it map to?</p>

<p>Well, it turns out, it depends on the font family. For the following HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">&quot;font: medium monospace&quot;</span><span class="nt">&gt;</span>text<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">&quot;font: medium sans-serif&quot;</span><span class="nt">&gt;</span>text<span class="nt">&lt;/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>you get (<a href="https://codepen.io/anon/pen/RZgxjw">codepen</a>)</p>

<div style="border: 1px solid black; display: inline-block; padding: 15px;">
<span style="font: medium monospace">text</span>
<span style="font: medium sans-serif">text</span>
</div>


<p>where the first one computes to a font-size of 13px, and the second one computes to a font-size of
16px. You can check this in the computed style pane of your devtools, or by using
<code>getComputedStyle()</code>.</p>

<p>I <em>think</em> the reason behind this is that monospace fonts tend to be wider, so the default font size (medium)
is scaled so that they have similar widths, and all other keyword font sizes get shifted as well. The final result is something like this:</p>

<p><img class="center" src="http://manishearth.github.io/images/post/font-size-table.png" width="600"></p>

<p>Firefox and Servo have <a href="https://github.com/servo/servo/blob/d415617a5bbe65a73bd805808a7ac76f38a1861c/components/style/properties/longhand/font.mako.rs#L763-L774">a matrix</a> that helps derive the values for all the absolute
font-size keywords based on the &ldquo;base size&rdquo; (i.e. the computed of <code>font-size: medium</code>). Actually,
Firefox has <a href="http://searchfox.org/mozilla-central/rev/c329d562fb6c6218bdb79290faaf015467ef89e2/layout/style/nsRuleNode.cpp#3272-3341">three tables</a> to support some legacy use cases like quirks mode (Servo has
yet to add support for these tables). We query other parts of the browser for what the &ldquo;base size&rdquo;
is based on the language and font family.</p>

<p>Wait, but what does the language have to do with this anyway? How does the language impact font-size?</p>

<p>It turns out that the base size depends on the font family <em>and</em> the language, and you can configure this.</p>

<p>Both Firefox and Chrome (using an extension) actually let you tweak which fonts get used on a per-language basis,
<em>as well as the default (base) font-size</em>.</p>

<p>This is not as obscure as one might think. Default system fonts are often really ugly for non-Latin-
using scripts. I have a separate font installed that produces better-looking Devanagari ligatures.</p>

<p>Similarly, some scripts are just more intricate than Latin. My default font size for Devanagari is
set to 18 instead of 16. I&rsquo;ve started learning Mandarin and I&rsquo;ve set that font size to 18 as well. Hanzi glyphs
can get pretty complicated and I still struggle to learn (and later recognize) them. A larger font size is great for this.</p>

<p>Anyway, this doesn&rsquo;t complicate things too much.  This does mean that the font family needs to be
computed before font-size, which already needs to be computed before most other properties. The
language, which can be set using a <code>lang</code> HTML attribute, is internally treated as a CSS property by
Firefox since it inherits, and it must be computed earlier as well.</p>

<p>Not too bad. So far.</p>

<p>Now here&rsquo;s the kicker. This <em>dependence</em> on the language and family <em>inherits</em>.</p>

<p>Quick, what&rsquo;s the font-size of the inner <code>div</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;font-size: medium; font-family: sans-serif;&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- base size 16 --&gt;</span>
</span><span class='line'>    font size is 16px
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;font-family: monospace&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- base size 13 --&gt;</span>
</span><span class='line'>        font size is ??
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a normal inherited CSS property<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, if the parent has a computed value of <code>16px</code>,
and the child has no additional values specified, the child will inherit a value of <code>16px</code>.
<em>Where</em> the parent got that computed value from doesn&rsquo;t matter.</p>

<p>Here, <code>font-size</code> &ldquo;inherits&rdquo; a value of <code>13px</code>. You can see this below (<a href="https://codepen.io/anon/pen/MvorQQ">codepen</a>):</p>

<div style="border: 1px solid black; display: inline-block; padding: 15px;">
<div style="font-size: medium; font-family: sans-serif;"> <!-- base size 16 -->
    font size is 16px
    <div style="font-family: monospace"> <!-- base size 13 -->
        font size is ??
    </div>
</div>
</div>


<p>Basically, if the computed value originated from a keyword, whenever the font family or language
change, font-size is recomputed from the original keyword with the new font family and language.</p>

<p>The reason this exists is because otherwise the differing font sizes wouldn&rsquo;t work anyway! The default font size
is <code>medium</code>, so basically the root element gets a <code>font-size: medium</code> and all elements inherit from it. If you change
to monospace or a different language in the document you need the font-size recomputed.</p>

<p>But it doesn&rsquo;t stop here. This even inherits <em>through relative units</em> (Not in IE).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;font-size: medium; font-family: sans-serif;&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- base size 16 --&gt;</span>
</span><span class='line'>    font size is 16px
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;font-size: 0.9em&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- could also be font-size: 50%--&gt;</span>
</span><span class='line'>        font size is 14.4px (16 * 0.9)
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;font-family: monospace&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!-- base size 13 --&gt;</span>
</span><span class='line'>            font size is 11.7px! (13 * 0.9)
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://codepen.io/anon/pen/oewpER">codepen</a>)</p>

<div style="border: 1px solid black; display: inline-block; padding: 15px;">
<div style="font-size: medium; font-family: sans-serif;"> <!-- base size 16 -->
    font size is 16px
    <div style="font-size: 0.9em"> <!-- could also be font-size: 90%-->
        font size is 14.4px (16 * 0.9)
        <div style="font-family: monospace"> <!-- base size 13 -->
            font size is 11.7px! (13 * 0.9)
        </div>
    </div>
</div>
</div>


<p>So we&rsquo;re actually inheriting a font-size of <code>0.9*medium</code> when we inherit from the second div, not <code>14.4px</code>.</p>

<p>Another way of looking at it is whenever the font family or language changes, you should recompute the font-size as if the language and family <em>were always that way</em> up the tree.</p>

<p>Firefox code uses both of these strategies. The original Gecko style system handles this by actually
going back to the top of the tree and recalculating the font size as if the language/family were
different. I suspect this is inefficient, but the rule tree seems to be involved in making this slightly
more efficient</p>

<p>Servo, on the other hand, stores some extra data on the side when computing stuff, data which gets copied over to the child element. It basically
stores the equivalent of saying &ldquo;Yes, this font was computed from a keyword. The keyword was <code>medium</code>, and after that we applied a factor of 0.9 to it.&rdquo;<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<p>In both cases, this leads to a bunch of complexities in all the <em>other</em> font-size complexities, since they need to be carefully preserved through this.</p>

<p>In Servo, <em>most</em> of this gets handled <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/longhand/font.mako.rs#L964-L1061">via custom cascading functions for font-size</a>.</p>

<h2>Larger/smaller</h2>

<p>So I mentioned that <code>font-size: larger</code> and <code>smaller</code> scale the size, but didn&rsquo;t mention by what fraction.</p>

<p>According <a href="https://drafts.csswg.org/css-fonts-3/#relative-size-value">to the spec</a>, if the font-size currently matches the value of an absolute keyword size (medium/large/etc),
you should pick the value of the next/previous keyword sizes respectively.</p>

<p>If it is <em>between</em> two, find the same point between the next/previous two sizes.</p>

<p>This, of course, must play well with the weird inheritance of keyword font sizes mentioned before. In gecko&rsquo;s model this isn&rsquo;t too hard,
since Gecko recalculates things anyway. In Servo&rsquo;s model we&rsquo;d have to store a sequence of applications of <code>larger</code>/<code>smaller</code> and relative
units, instead of storing just a relative unit.</p>

<p>Additionally, when computing this during text-zoom, you have to unzoom before looking it up in the table, and then rezoom.</p>

<p>Overall, a bunch of complexity for not much gain &mdash; turns out only Gecko actually followed the spec here! All other browser engines
used simple ratios here.</p>

<p>So my fix here <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1361550">was simply to remove this behavior from Gecko</a>. That simplified things.</p>

<h2>MathML</h2>

<p>Firefox and Safari support MathML, a markup language for math. It doesn&rsquo;t get used much on the Web these days, but it exists.</p>

<p>MathML has its own complexities when it comes to font-size. Specifically, <code>scriptminsize</code>, <code>scriptlevel</code>, and <code>scriptsizemultiplier</code>.</p>

<p>For example, in MathML, the text in the numerator or denominator of a fraction or the text of a superscript is 0.71 times the size of the text outside of it. This is because
the default <code>scriptsizemultiplier</code> for MathML elements is 0.71, and these specific elements all get a default scriptlevel of <code>+1</code>.</p>

<p>Basically, <code>scriptlevel=+1</code> means &ldquo;multiply the font size by <code>scriptsizemultiplier</code>&rdquo;, and
<code>scriptlevel=-1</code> is for dividing. This can be specified via a <code>scriptlevel</code> HTML attribute on an <code>mstyle</code> element. You can
similarly tweak the (inherited) multiplier via the <code>scriptsizemultiplier</code> HTML attribute, and the minimum size via <code>scriptminsize</code>.</p>

<p>So, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;math&gt;&lt;msup&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mi&gt;</span>text<span class="nt">&lt;/mi&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mn&gt;</span>small superscript<span class="nt">&lt;/mn&gt;</span>
</span><span class='line'><span class="nt">&lt;/msup&gt;&lt;/math&gt;&lt;br&gt;</span>
</span><span class='line'><span class="nt">&lt;math&gt;</span>
</span><span class='line'>    text
</span><span class='line'>    <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">+1</span><span class="nt">&gt;</span>
</span><span class='line'>        small
</span><span class='line'>        <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">+1</span><span class="nt">&gt;</span>
</span><span class='line'>            smaller
</span><span class='line'>            <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">-1</span><span class="nt">&gt;</span>
</span><span class='line'>                small again
</span><span class='line'>            <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'><span class="nt">&lt;/math&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will show as (you will need Firefox to see the rendered version, Safari supports MathML too but the support isn&rsquo;t as good):</p>

<div style="border: 1px solid black; display: inline-block; padding: 15px;">
<math><msup><mi>text</mi><mn>small superscript</mn></msup></math><br>
<math>text<mstyle scriptlevel=+1> small <mstyle scriptlevel=+1> smaller <mstyle scriptlevel=-1> small again </mstyle></mstyle></mstyle></math>
</div>


<p>(<a href="https://codepen.io/anon/pen/BdZJgR">codepen</a>)</p>

<p>So this isn&rsquo;t as bad. It&rsquo;s as if <code>scriptlevel</code> is a weird <code>em</code> unit. No biggie, we know how to deal with those already.</p>

<p>Except you also have <code>scriptminsize</code>. This lets you set the minimum font size <em>for changes caused by <code>scriptlevel</code></em>.</p>

<p>This means that <code>scriptminsize</code> will make sure <code>scriptlevel</code> never causes changes that make the font smaller than the min size,
but it will ignore cases where you deliberately specify an <code>em</code> unit or a pixel value.</p>

<p>There&rsquo;s already a subtle bit of complexity introduced here, <code>scriptlevel</code> now becomes another thing
that tweaks how <code>font-size</code> inherits. Fortunately, in Firefox/Servo internally <code>scriptlevel</code> (as are
<code>scriptminsize</code> and <code>scriptsizemultiplier</code>) is also handled as a CSS property, which means that we
can use the same framework we used for font-family and language here &ndash; compute the script
properties before font-size, and if <code>scriptlevel</code> is set, force-recalculate the font size even if
font-size itself was not set.</p>

<h3>Interlude: early and late computed properties</h3>

<p>In Servo the way we handle dependencies in properties is to have a set of &ldquo;early&rdquo; properties and a
set of &ldquo;late&rdquo; properties (which are allowed to depend on early properties). We iterate the
declarations twice, once looking for early properties, and once for late. However, now we have a
pretty intricate set of dependencies, where font-size must be calculated after language, font-family,
and the script properties, but before everything else that involves lengths. Additionally, font-family
has to be calculated after all the other early properties due to another font complexity I&rsquo;m not covering here.</p>

<p>The way we handle this is to <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/properties.mako.rs#L3195-L3204">pull font-size and font-family</a> out during the early computation,
but not deal with them until <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/properties.mako.rs#L3211-L3327">after the early computation is done</a>.</p>

<p>At that stage we first <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/properties.mako.rs#L3219-L3233">handle the disabling of text-zoom</a>, and then handle <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/properties.mako.rs#L3235-L3277">the complexities of font-family</a>.</p>

<p>We then <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/properties.mako.rs#L3280-L3303">compute the font family</a>. If a font size was specified, we <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/properties.mako.rs#L3305-L3309">just compute that</a>. If it
was not, but a font family, lang, or scriptlevel was specified, we <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/properties.mako.rs#L3310-L3324">force compute as inherited</a>, which handles all the constraints.</p>

<h3>Why scriptminsize gets complicated</h3>

<p>Unlike with the other &ldquo;minimum font size&rdquo;, using an <code>em</code> unit in any property will calculate the
length with the clamped value, not the &ldquo;if nothing had been clamped&rdquo; value, when the font size has
been clamped with scriptminsize. So at first glance handling this seems straightforward; only
consider the script min size when deciding to scale because of scriptlevel.</p>

<p>As always, it&rsquo;s not that simple 😀:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;math&gt;</span>
</span><span class='line'><span class="nt">&lt;mstyle</span> <span class="na">scriptminsize=</span><span class="s">&quot;10px&quot;</span> <span class="na">scriptsizemultiplier=</span><span class="s">&quot;0.75&quot;</span> <span class="na">style=</span><span class="s">&quot;font-size:20px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    20px
</span><span class='line'>    <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;+1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        15px
</span><span class='line'>        <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;+1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            11.25px
</span><span class='line'>                <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;+1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    would be 8.4375, but is clamped at 10px
</span><span class='line'>                        <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;+1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                            would be 6.328125, but is clamped at 10px
</span><span class='line'>                                <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                    This is not 10px/0.75=13.3, rather it is still clamped at 10px
</span><span class='line'>                                        <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                            This is not 10px/0.75=13.3, rather it is still clamped at 10px
</span><span class='line'>                                            <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                                This is 11.25px again
</span><span class='line'>                                                    <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                                        This is 15px again
</span><span class='line'>                                                    <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>                                            <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'><span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'><span class="nt">&lt;/math&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://codepen.io/anon/pen/wqepjo">codepen</a>)</p>

<p>Basically, if you increase the level a bunch of times after hitting the min size, decreasing it by one should not immediately
compute <code>min size / multiplier</code>. That would make things asymmetric; something with a net script level of <code>+5</code> should
have the same size as something with a net script level of <code>+6 -1</code>, provided the multiplier hasn&rsquo;t changed.</p>

<p>So what happens is that the script level is calculated against the font size <em>as if scriptminsize had never applied</em>,
and we only use that size if it is greater than the min size.</p>

<p>It&rsquo;s not just a matter of keeping track of the script level at which clamping happened &ndash; the multiplier could change
in the process and you need to keep track of that too. So this ends up in creating <em>yet another font-size value to inherit</em>.</p>

<p>To recap, we are now at <em>four</em> different notions of font size being inherited:</p>

<ul>
<li>The main font size used by styling</li>
<li>The &ldquo;actual&rdquo; font size, i.e. the main font size but clamped by the min size</li>
<li>(In servo only) The &ldquo;keyword&rdquo; size; i.e. the size stored as a keyword and ratio, if it was derived from a keyword</li>
<li>The &ldquo;script unconstrained&rdquo; size; the font size as if scriptminsize never existed.</li>
</ul>


<p>Another complexity here is that the following should still work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;math&gt;</span>
</span><span class='line'><span class="nt">&lt;mstyle</span> <span class="na">scriptminsize=</span><span class="s">&quot;10px&quot;</span> <span class="na">scriptsizemultiplier=</span><span class="s">&quot;0.75&quot;</span> <span class="na">style=</span><span class="s">&quot;font-size: 5px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    5px
</span><span class='line'>    <span class="nt">&lt;mstyle</span> <span class="na">scriptlevel=</span><span class="s">&quot;-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        6.666px
</span><span class='line'>    <span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'><span class="nt">&lt;/mstyle&gt;</span>
</span><span class='line'><span class="nt">&lt;/math&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="https://codepen.io/anon/pen/prwpVd">codepen</a>)</p>

<p>Basically, if you were already below the scriptminsize, reducing the script level (to increase the font size) should not get clamped, since then you&rsquo;d get something too large.</p>

<p>This basically means you only apply scriptminsize if you are applying the script level to a value <em>greater than</em> the script min size.</p>

<p>In Servo, all of the MathML handling culminates in <a href="https://github.com/servo/servo/blob/53c6f8ea8bf1002d0c99c067601fe070dcd6bcf1/components/style/properties/gecko.mako.rs#L2304-L2403">this wonderful function that is more comment than code</a>, and
some code in the functions near it.</p>

<hr />

<p>So there you have it. <code>font-size</code> is actually pretty complicated. A lot of the web platform has hidden complexities like this, and it&rsquo;s always fun to encounter more of them.</p>

<p>(Perhaps less fun when I have to implement them 😂)</p>

<p><em>Thanks to mystor, mgattozzi, bstrie, and projektir for reviewing drafts of this post</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Interestingly, in Firefox, this number is 50% for all ruby <em>except</em> for when the language is Taiwanese Mandarin (where it is 30%). This is because Taiwan uses a phonetic script called Bopomofo, and each Han glyph can be represented as a maximum of 3 Bopomofo letters. So it is possible to choose a reasonable minimum size such that the ruby never extends the size of the glyph below it. On the other hand, pinyin can be up to six letters, and Hiranaga up to (I think) 5, and the corresponding &ldquo;no overflow&rdquo; scaling will be too tiny. So fitting them on top of the glyph is not a consideration and instead we elect to have a larger font size for better readability. Additionally, Bopomofo ruby is often set on the side of the glyph instead of on top, and 30% works better there. (h/t @upsuper for pointing this out)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Other browser engines have other optimizations, I&rsquo;m just less familiar with them<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Some properties are inherited, some are &ldquo;reset&rdquo;. For example, <code>font-family</code> is inherited &mdash; child elements inherit font family from the parent unless otherwise specified. However <code>transform</code> is not, if you transform an element that does not further transform the children.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>This won&rsquo;t handle <code>calc</code>s, which is something I need to fix. Fixing this is trivial, you store an absolute offset in addition to the ratio.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching Programming: Proactive vs Reactive]]></title>
    <link href="http://manishearth.github.io/blog/2017/05/19/teaching-programming-proactive-vs-reactive/"/>
    <updated>2017-05-19T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/05/19/teaching-programming-proactive-vs-reactive</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been thinking about this a lot these days. In part because of <a href="https://github.com/Manishearth/rust-clippy/issues/1737">an idea I had</a>
but also due to <a href="https://twitter.com/sehurlburt/status/863829482645340160">this twitter discussion</a>.</p>

<p>When teaching most things, there are two non-mutually-exclusive ways of approaching the problem. One
is &ldquo;proactive&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, which is where the teacher decides a learning path beforehand, and executes it. The
other is &ldquo;reactive&rdquo;, where the teacher reacts to the student trying things out and dynamically
tailors the teaching experience.</p>

<p>Most in-person teaching experiences are a mix of both. Planning beforehand is very important whilst teaching,
but tailoring the experience to the student&rsquo;s reception of the things being taught is important too.</p>

<p>In person, you <em>can</em> mix these two, and in doing so you get a &ldquo;best of both worlds&rdquo; situation. Yay!</p>

<p>But &hellip; we don&rsquo;t really learn much programming in a classroom setup.
Sure, some folks learn the basics in college for a few years, but everything
they learn after that isn&rsquo;t in a classroom situation where this can work<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.
I&rsquo;m an autodidact,
and while I have taken a few programming courses for random interesting things, I&rsquo;ve taught myself most of what I know
using various sources. I care a lot about improving the situation here.</p>

<p>With self-driven learning we have a similar divide. The &ldquo;proactive&rdquo; model corresponds to reading books
and docs. Various people have proactively put forward a path for learning in the form of a book
or tutorial. It&rsquo;s up to you to pick one, and follow it.</p>

<p>The &ldquo;reactive&rdquo; model is not so well-developed. In the context of self-driven learning in programming,
it&rsquo;s basically &ldquo;do things, make mistakes, hope that Google/Stackoverflow help&rdquo;. It&rsquo;s how
a lot of people learn programming; and it&rsquo;s how I prefer to learn programming.</p>

<p>It&rsquo;s very nice to be able to &ldquo;learn along the way&rdquo;. While this is a long and arduous process,
involving many false starts and a lack of a sense of progress, it can be worth it in terms of
the kind of experience this gets you.</p>

<p>But as I mentioned, this isn&rsquo;t as well-developed. With the proactive approach, there still
is a teacher &ndash; the author of the book! That teacher may not be able to respond in real time,
but they&rsquo;re able to set forth a path for you to work through.</p>

<p>On the other hand, with the &ldquo;reactive&rdquo; approach, there is no teacher. Sure, there are
Random Answers on the Internet, which are great, but they don&rsquo;t form a coherent story.
Neither can you really be your own teacher for a topic you do not understand.</p>

<p>Yet plenty of folks do this. Plenty of folks approach things like learning a new language by reading
at most two pages of docs and then just diving straight in and trying stuff out. The only language I
have not done this for is the first language I learned<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>&nbsp;<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>I think it&rsquo;s unfortunate that folks who prefer this approach don&rsquo;t get the benefit of a teacher.
In the reactive approach, teachers can still tell you what you&rsquo;re doing wrong and steer you away from
tarpits of misunderstanding. They can get you immediate answers and guidance. When we look
for answers on stackoverflow, we get some of this, but it also involves a lot of pattern-matching
on the part of the student, and we end up with a bad facsimile of what a teacher can do for you.</p>

<p>But it&rsquo;s possible to construct a better teacher for this!</p>

<p>In fact, examples of this exist in the wild already!</p>

<p>The Elm compiler is my favorite example of this. <a href="http://elm-lang.org/blog/compilers-as-assistants">It has amazing error messages</a></p>

<p><img class="center" src="http://manishearth.github.io/images/post/elm-error.png">
<img class="center" src="http://manishearth.github.io/images/post/elm-error2.png"></p>

<p>The error messages tell you what you did wrong, sometimes suggest fixes, and help
correct potential misunderstandings.</p>

<p>Rust does this too. Many compilers do. (Elm is exceptionally good at it)</p>

<p><img class="center" src="http://manishearth.github.io/images/post/rust-error.png" width="700"></p>

<p>One thing I particularly like about Rust is that from that error you can
try <code>rustc --explain E0373</code> and get a terminal-friendly version
of <a href="https://doc.rust-lang.org/nightly/error-index.html#E0373">this help text</a>.</p>

<p>Anyway, diagnostics basically provide a reactive component to learning programming. I&rsquo;ve cared about
diagnostics in Rust for a long time, and I often remind folks that many things taught through the
docs can/should be taught through diagnostics too. Especially because diagnostics are a kind of soapbox
for compiler writers &mdash; you can&rsquo;t guarantee that your docs will be read, but you can guarantee
that your error messages will. These days, while I don&rsquo;t have much time to work on stuff myself I&rsquo;m
very happy to mentor others working on improving diagnostics in Rust.</p>

<p>Only recently did I realize <em>why</em> I care about them so much &ndash; they cater exactly to my approach
to learning programming languages! If I&rsquo;m not going to read the docs when I get started and try the
reactive approach, having help from the compiler is invaluable.</p>

<p>I think this space is relatively unexplored. Elm might have the best diagnostics out there,
and as diagnostics (helping all users of a language &ndash; new and experienced), they&rsquo;re great,
but as a teaching tool for newcomers; they still have a long way to go. Of course, compilers
like Rust are even further behind.</p>

<p>One thing I&rsquo;d like to experiment with is a first-class tool for reactive teaching. In a sense,
<a href="https://github.com/Manishearth/rust-clippy">clippy</a> is already something like this. Clippy looks out for antipatterns, and tries to help
teach. But it also does many other things, and not all are teaching moments are antipatterns.</p>

<p>For example, in C, this isn&rsquo;t necessarily an antipattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">thingy</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">=</span> <span class="n">do_the_thing</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">frob</span><span class="p">(</span><span class="o">*</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many C codebases use <code>if (foo = bar())</code>. It is a potential footgun if you confuse it with <code>==</code>,
but there&rsquo;s no way to be sure. Many compilers now have a warning for this that you can silence by
doubling the parentheses, though.</p>

<p>In Rust, this isn&rsquo;t an antipattern either:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">add_one</span><span class="p">(</span><span class="k">mut</span> <span class="n">x</span><span class="o">:</span> <span class="kt">u8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">add_one</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'><span class="c1">// num is still 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>For someone new to Rust, they may feel that the way to have a function mutate arguments (like <code>num</code>) passed to it
is to use something like <code>mut x: u8</code>. What this actually does is copies <code>num</code> (because <code>u8</code> is a <code>Copy</code> type),
and allows you to mutate the copy within the scope of the function. The right way to make a function that
mutates arguments passed to it by-reference would be to do something like <code>fn add_one(x: &amp;mut u8)</code>.
If you try the <code>mut x</code> thing for non-Copy values, you&rsquo;d get a &ldquo;reading out of moved value&rdquo; error
when you try to access <code>num</code> after calling <code>add_one</code>. This would help you figure out what you did wrong,
and potentially that error could detect this situation and provide more specific help.</p>

<p>But for <code>Copy</code> types, this will just compile. And it&rsquo;s not an antipattern &ndash; the way this works
makes complete sense in the context of how Rust variables work, and is something that you do need
to use at times.</p>

<p>So we can&rsquo;t even warn on this. Perhaps in &ldquo;pedantic clippy&rdquo; mode, but really, it&rsquo;s not
a pattern we want to discourage. (At least in the C example that pattern is one
that many people prefer to forbid from their codebase)</p>

<p>But it would be nice if we could tell a learning programmer &ldquo;hey, btw, this is what this syntax
means, are you sure you want to do this?&rdquo;. With explanations and the ability to dismiss the error.</p>

<p>In fact, you don&rsquo;t even need to restrict this to potential footguns!</p>

<p>You can detect various things the learner is trying to do. Are they probably mixing up <code>String</code>
and <code>&amp;str</code>? Help them! Are they writing a trait? Give a little tooltip explaining the feature.</p>

<p>This is beginning to remind me of the original &ldquo;office assistant&rdquo; <a href="https://en.wikipedia.org/wiki/Office_Assistant">Clippy</a>, which was super annoying.
But an opt-in tool or IDE feature which gives helpful suggestions could still be nice, especially
if you can strike a balance between being so dense it is annoying and so sparse it is useless.</p>

<p>It also reminds me of well-designed tutorial modes in games. Some games have a tutorial mode that guides you
through a set path of doing things. Other games, however, have a tutorial mode that will give you hints even
if you stray off the beaten path. <a href="https://twitter.com/mgattozzi">Michael</a> tells me that <a href="http://store.steampowered.com/app/480490/Prey/">Prey</a> is
a recent example of such a game.</p>

<p>This really feels like it fits the &ldquo;reactive&rdquo; model I prefer. The student gets to mold their own
journey, but gets enough helpful hints and nudges from the &ldquo;teacher&rdquo; (the tool) so that they
don&rsquo;t end up wasting too much time and can make informed decisions on how to proceed learning.</p>

<p>Now, rust-clippy isn&rsquo;t exactly the place for this kind of tool. This tool needs the ability to globally
&ldquo;silence&rdquo; a hint once you&rsquo;ve learned it. rust-clippy is a linter, and while you can silence lints in
your code, you can&rsquo;t silence them globally for the current user. Nor does that really make sense.</p>

<p>But rust-clippy does have the infrastructure for writing stuff like this, so it&rsquo;s an ideal prototyping
point. I&rsquo;ve filed <a href="https://github.com/Manishearth/rust-clippy/issues/1737">this issue</a> to discuss this topic.</p>

<p>Ultimately, I&rsquo;d love to see this as an IDE feature.</p>

<p>I&rsquo;d also like to see more experimentation in the department of &ldquo;reactive&rdquo; teaching &mdash; not just tools like this.</p>

<p>Thoughts? Ideas? Let me know!</p>

<p><em>thanks to Andre (llogiq) and Michael Gattozzi for reviewing this</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is how I&rsquo;m using these terms. There seems to be precedent in pedagogy for the proactive/reactive classification, but it might not be exactly the same as the way I&rsquo;m using it.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This is true for everything, but I&rsquo;m focusing on programming (in particular programming <em>languages</em>) here.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>And when I learned Rust, it only <em>had</em> two pages of docs, aka &ldquo;The Tutorial&rdquo;. Good times.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>I do eventually get around to doing a full read of the docs or a book but this is after I&rsquo;m already able to write nontrivial things in the language, and it takes a lot of time to get there.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mentally Modelling Modules]]></title>
    <link href="http://manishearth.github.io/blog/2017/05/14/mentally-modelling-modules/"/>
    <updated>2017-05-14T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/05/14/mentally-modelling-modules</id>
    <content type="html"><![CDATA[<p>The module and import system in Rust is sadly one of the many confusing things you have to deal with whilst
learning the language. A lot of these confusions stem from a misunderstanding of how it works.
In explaining this I&rsquo;ve seen that it&rsquo;s usually a common set of misunderstandings.</p>

<p>In the spirit of <a href="http://manishearth.github.io/blog/2017/04/05/youre-doing-it-wrong/">&ldquo;You&rsquo;re doing it wrong&rdquo;</a>, I want to try and explain one
&ldquo;right&rdquo; way of looking at it. You can go pretty far<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> without knowing this, but it&rsquo;s useful
and helps avoid confusion.</p>

<hr />

<p><br></p>

<p>First off, just to get this out of the way, <code>mod foo;</code> is basically a way of saying
&ldquo;look for <code>foo.rs</code> or <code>foo/mod.rs</code> and make a module named <code>foo</code> with its contents&rdquo;.
It&rsquo;s the same as <code>mod foo { ... }</code> except the contents are in a different file. This
itself can be confusing at first, but it&rsquo;s not what I wish to focus on here. The Rust book explains this more
in <a href="https://doc.rust-lang.org/book/crates-and-modules.html#multiple-file-crates">the chapter on modules</a>.</p>

<p>In the examples here I will just be using <code>mod foo { ... }</code> since multi-file examples are annoying,
but keep in mind that the stuff here applies equally to multi-file crates.</p>

<h3>Motivating examples</h3>

<p>To start off, I&rsquo;m going to provide some examples of Rust code which compiles. Some of these may be
counterintuitive, based on your existing model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=7673736a57fe99092446ec73f8b8f555&amp;version=undefined">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// not std::mem::transmute!</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">mem</span><span class="o">::</span><span class="n">transmute</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">transmute</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=49415d74214b07b13c236ce88bdf54aa&amp;version=undefined">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// this works!</span>
</span><span class='line'>        <span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// this doesn&#39;t</span>
</span><span class='line'>        <span class="c1">// baz::baz_inner();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// but these do!</span>
</span><span class='line'>        <span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">baz_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="n">super</span><span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">baz_inner</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// these do too!</span>
</span><span class='line'>        <span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="n">super</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">bar_inner</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">baz</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">baz_inner</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=547fea76590b6c5dbbb04ccbc89cf8d2&amp;version=undefined">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">bar</span><span class="o">::</span><span class="n">baz</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// this won&#39;t work</span>
</span><span class='line'>    <span class="c1">// use baz::inner();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// this will</span>
</span><span class='line'>    <span class="kn">use</span> <span class="bp">self</span><span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">inner</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// or</span>
</span><span class='line'>    <span class="c1">// use bar::baz::inner</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// but this will work!</span>
</span><span class='line'>        <span class="n">baz</span><span class="o">::</span><span class="n">inner</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">baz</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">inner</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=e553e52d1cbf0d38fd0b42c09ccafe44&amp;version=undefined">playpen</a>)</p>

<p>These examples remind me of the &ldquo;point at infinity&rdquo; in elliptic curve crypto or fake particles in
physics or fake lattice elements in various fields of CS<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Sometimes, for something to make sense,
you add in things that don&rsquo;t normally exist. Similarly, these examples may contain code which
is not traditional Rust style, but the import system
still makes more sense when you include them.</p>

<h3>Imports</h3>

<p>The core confusion behind how imports work can really be resolved by remembering two rules:</p>

<ul>
<li><code>use foo::bar::baz</code> resolves <code>foo</code> relative to the root module (<code>lib.rs</code> or <code>main.rs</code>)

<ul>
<li>You can resolve relative to the current module by explicily trying <code>use self::foo::bar::baz</code></li>
</ul>
</li>
<li><code>foo::bar::baz</code> within your code<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> resolves <code>foo</code> relative to the current module

<ul>
<li>You can resolve relative to the root by explicitly using <code>::foo::bar::baz</code></li>
</ul>
</li>
</ul>


<p>That&rsquo;s actually &hellip; it. There are no further caveats. The rest of this is modelling what
constitutes as &ldquo;being within a module&rdquo;.</p>

<p>Let&rsquo;s take a pretty standard setup, where <code>extern crate</code> declarations are placed in the the root
module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// won&#39;t work</span>
</span><span class='line'>        <span class="c1">// let ex = regex::Regex::new(&quot;&quot;);</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">ex</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we say <code>extern crate regex</code>, we pull in the <code>regex</code> crate into the crate root. This behaves
pretty similar to <code>mod regex { /* contents of regex crate */}</code>. Basically, we&rsquo;ve imported
the crate into the crate root, and since all <code>use</code> paths are relative to the crate root,
<code>use regex::Regex</code> works fine inside the module.</p>

<p>Inline in code, <code>regex::Regex</code> won&rsquo;t work because as mentioned before inline paths are relative
to the current module. However, you can try <code>::regex::Regex::new("")</code>.</p>

<p>Since we&rsquo;ve imported <code>regex::Regex</code> in <code>mod foo</code>, that name is now accessible to everything inside
the module directly, so the code can just say <code>Regex::new()</code>.</p>

<p>The way you can view this is that <code>use blah</code> and <code>extern crate blah</code> create an item named
<code>blah</code> &ldquo;within the module&rdquo;, which is basically something like a symbolic link, saying
&ldquo;yes this item named <code>blah</code> is actually elsewhere but we&rsquo;ll pretend it&rsquo;s within the module&rdquo;</p>

<p>The error message from this code may further drive this home:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=07527a61153519fbf218ffb93f13b3cd&amp;version=undefined">playpen</a>)</p>

<p>The error I get is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">function</span> <span class="err">`</span><span class="n">replace</span><span class="err">`</span> <span class="n">is</span> <span class="n">private</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">3</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="mi">3</span> <span class="o">|</span> <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'>  <span class="o">|</span>     <span class="o">^^^^^^^^^^^^</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no function named <code>replace</code> in the module <code>foo</code>! But the compiler seems to think there is?</p>

<p>That&rsquo;s because <code>use std::mem::replace</code> basically is equivalent to there being something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">replace</span><span class="p">(...)</span> <span class="o">-&gt;</span> <span class="p">...</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// here we can refer to `replace` freely (in inline paths)</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">whatever</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">something</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">blah</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>except it&rsquo;s actually like a symlink to the function defined in <code>std::mem</code>. Because inline paths
are relative to the current module, saying <code>use std::mem::replace</code> works as if you had defined
a function <code>replace</code> in the same module, and you can refer to <code>replace()</code> without needing
any extra qualification in inline paths.</p>

<p>This also makes <code>pub use</code> fit perfectly in our model. <code>pub use</code> says &ldquo;make this symlink, but let
others see it too&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// works now!</span>
</span><span class='line'><span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><br></p>

<p>Folks often get annoyed when this doesn&rsquo;t work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// nope</span>
</span><span class='line'>    <span class="c1">// use mem::replace;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As mentioned before, <code>use</code> paths are relative to the root module. There is no <code>mem</code>
in the root module, so this won&rsquo;t work. We can make it work via <code>self</code>, which I mentioned
before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// yep!</span>
</span><span class='line'>    <span class="kn">use</span> <span class="bp">self</span><span class="o">::</span><span class="n">mem</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Note that this brings overloading of the <code>self</code> keyword up to a grand total of <em>four</em>! Two cases
which occur in the import/path system:</p>

<ul>
<li><code>use self::foo</code> means &ldquo;find me <code>foo</code> within the current module&rdquo;</li>
<li><code>use foo::bar::{self, baz}</code> is equivalent to <code>use foo::bar; use foo::bar::baz;</code></li>
<li><code>fn foo(&amp;self)</code> lets you define methods and specify if the receiver is by-move, borrowed, mutably borrowed, or other</li>
<li><code>Self</code> within implementations lets you refer to the type being implemented on</li>
</ul>


<p>Oh well, at least it&rsquo;s not <code>static</code>.</p>

<hr />

<p><br><br></p>

<p>Going back to one of the examples I gave at the beginning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">mem</span><span class="o">::</span><span class="n">transmute</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">transmute</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=49415d74214b07b13c236ce88bdf54aa&amp;version=undefined">playpen</a>)</p>

<p>It should be clearer now why this works. The root module imports <code>mem</code>. Now, from everyone&rsquo;s point
of view, there&rsquo;s an item called <code>mem</code> in the root.</p>

<p>Within <code>mod foo</code>, <code>use mem::transmute</code> works because <code>use</code> is relative to the root, and <code>mem</code>
already exists in the root! When you <code>use</code> something, all child modules will see it as if it were
actually belonging to the module. (Non-child modules won&rsquo;t see it because of privacy, we
saw an example of this already)</p>

<p>This is why <code>use foo::transmute</code> works from <code>mod bar</code>, too. <code>bar</code> can refer to the contents
of <code>foo</code> via <code>use foo::whatever</code>, since <code>foo</code> is a child of the root module, and <code>use</code> is relative
to the root. <code>foo</code> already has an item named <code>transmute</code> inside it because it imported one.
Nothing in the parent module is private from the child, so we can <code>use foo::transmute</code> from
<code>bar</code>.</p>

<p>Generally, the standard way of doing things is to either not use modules (just a single lib.rs),
or, if you do use modules, put nothing other than <code>extern crate</code>s and <code>mod</code>s in the root.
This is why we rarely see shenanigans like the above; there&rsquo;s nothing in the root crate
to import, aside from other crates specified by <code>extern crate</code>. The trick of
&ldquo;reimport something from the parent module&rdquo; is also pretty rare because there&rsquo;s basically no
point to using that (just import it directly!). So this is not the kind of code
you&rsquo;ll see in the wild.</p>

<hr />

<p><br></p>

<p>Basically, the way the import system works can be summed up as:</p>

<ul>
<li><code>extern crate</code> and <code>use</code> will act as if they were defining the imported item in the current module, like a symbolic link</li>
<li><code>use foo::bar::baz</code> resolves the path relative to the root module</li>
<li><code>foo::bar::baz</code> in an inline path (i.e. not in a <code>use</code>) will resolve relative to the current module</li>
<li><code>::foo::bar::baz</code> will <em>always</em> resolve relative to the root module</li>
<li><code>self::foo::bar::baz</code> will <em>always</em> resolve relative to the current module</li>
<li><code>super::foo::bar::baz</code> will <em>always</em> resolve relative to the parent module</li>
</ul>


<p>Alright, on to the other half of this. Privacy.</p>

<h3>Privacy</h3>

<p>So how does privacy work?</p>

<p>Privacy, too, follows some basic rules:</p>

<ul>
<li>If you can access a module, you can access all of its <code>pub</code> contents</li>
<li>A module can always access its child modules, but not recursively

<ul>
<li>This means that a module cannot access private items in its children, nor can it access private grandchildren modules</li>
</ul>
</li>
<li>A child can always access its parent modules (and their parents), and <em>all</em> their contents</li>
<li><code>pub(restricted)</code> <a href="https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md">is a proposal</a> which extends this a bit, but it&rsquo;s experimental so we won&rsquo;t deal with it here</li>
</ul>


<p>Giving some examples,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// can access `foo::foofunc`, even though `foofunc` is private</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">barfunc</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// can access `foo::bar::barfunc()`, even though `bar` is private</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">foofunc</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// We can access our parent and _all_ its contents,</span>
</span><span class='line'>        <span class="c1">// so we have access to `foo::baz`. We can access</span>
</span><span class='line'>        <span class="c1">// all pub contents of modules we have access to, so we</span>
</span><span class='line'>        <span class="c1">// can access `foo::baz::bazfunc`</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">bazfunc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">baz</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">bazfunc</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s important to note that this is all contextual; whether or not a particular
path works is a function of where you are. For example, this works<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* not pub */</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="kn">mod</span> <span class="n">baz</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">pub</span> <span class="k">fn</span> <span class="n">bazfunc</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">pub</span> <span class="kn">mod</span> <span class="n">quux</span> <span class="p">{</span>
</span><span class='line'>            <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">bazfunc</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are able to write the path <code>foo::bar::baz::bazfunc</code> even though <code>bar</code> is private!</p>

<p>This is because we still have <em>access</em> to the module <code>bar</code>, by being a descendent module.</p>

<hr />

<p><br></p>

<p>Hopefully this is helpful to some of you. I&rsquo;m not really sure how this can fit into the official
docs, but if you have ideas, feel free to adapt it<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is because most of these misunderstandings lead to a model where you think fewer things compile, which is fine as long as it isn&rsquo;t too restrictive. Having a mental model where you feel more things will compile than actually do is what leads to frustration; the opposite can just be restrictive.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>One example closer to home is how Rust does lifetime resolution. Lifetimes form a lattice with <code>'static</code> being the bottom element. There is no top element for lifetimes in Rust syntax, but internally <a href="http://manishearth.github.io/rust-internals-docs/rustc/ty/enum.Region.html#variant.ReEmpty">there is the &ldquo;empty lifetime&rdquo;</a> which is used during borrow checking. If something resolves to have an empty lifetime, it can&rsquo;t exist, so we get a lifetime error.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>When I say &ldquo;within your code&rdquo;, I mean &ldquo;anywhere but a <code>use</code> statement&rdquo;. I may also term these as &ldquo;inline paths&rdquo;.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Example adapted from <a href="https://www.reddit.com/r/rust/comments/5m4w95/the_rust_module_system_is_too_confusing/dc1df2z/">this discussion</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Contact me if you have licensing issues; I still have to figure out the licensing situation for the blog, but am more than happy to grant exceptions for content being uplifted into official or semi-official docs.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Interpretations Diverged in a Yellow Wood]]></title>
    <link href="http://manishearth.github.io/blog/2017/05/02/two-interpretations-diverged-in-a-yellow-wood/"/>
    <updated>2017-05-02T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/05/02/two-interpretations-diverged-in-a-yellow-wood</id>
    <content type="html"><![CDATA[<p>Whose words are these I think I know<br>
His house is in the village though<br>
He will not see me stopping here<br>
To interpret his work as I go<br></p>

<p>My little student must think it queer<br>
To read without some context near<br>
Between the words and the intent<br>
He wonders what the poem meant<br></p>

<p>He gives his head a little shake<br>
To ask if there is some mistake<br>
&ldquo;That&rsquo;s not what the author said!&rdquo;<br>
Providing another view instead<br></p>

<p>The words are lovely, dark, and deep<br>
But I have literary criticism to preach<br>
And miles to go before I sleep<br>
And miles to go before I sleep<br></p>

<hr />

<p><br><br><br><br><br></p>

<p>Seriously though, try reading <em>The Road Not Taken</em> as metacircular commentary on how the poem
<a href="https://en.wikipedia.org/wiki/The_Road_Not_Taken#Analysis">is very often &ldquo;mis&#8221;interpreted</a>, and the nature of interpretation / <em>Death of the Author</em>. It fits perfectly when
you read &ldquo;road&rdquo; as &ldquo;interpretation&rdquo;.</p>

<p><small>(Yes, I know, the parody above is not based on <em>The Road Not Taken</em> but instead a different Frost
poem. I was originally going to modify <em>The Road Not Taken</em> but realized all I had to do was change
a few words to get there, which was no fun at all) </small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prolonging Temporaries in Rust]]></title>
    <link href="http://manishearth.github.io/blog/2017/04/13/prolonging-temporaries-in-rust/"/>
    <updated>2017-04-13T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/04/13/prolonging-temporaries-in-rust</id>
    <content type="html"><![CDATA[<p>A colleague of mine learning Rust had an interesting type / borrow checker error. The solution needs
a less-used feature of Rust (which basically exists precisely for this kind of thing), so I thought
I&rsquo;d document it.</p>

<p>The code was like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span> <span class="c1">// returns Option&lt;&amp;Foo&gt;, borrowed from `thing`</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">()</span> <span class="c1">// returns Option&lt;Foo&gt;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kn">use</span><span class="p">(</span><span class="n">maybe_foo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to follow along, here is a full program that does this (<a href="https://play.rust-lang.org/?gist=e09a79b511e347fe786e4689d282b806&amp;version=stable&amp;backtrace=0">playpen</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[derive(Debug)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Thingy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">:</span> <span class="n">Foo</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">Thingy</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">get_ref</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">get_owned</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Some</span><span class="p">(</span><span class="n">Foo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">new</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Self</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Thingy</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">foo</span><span class="o">:</span> <span class="n">Foo</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">some_condition</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">thing</span> <span class="o">=</span> <span class="n">Thingy</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span> <span class="c1">// returns Option&lt;&amp;Foo&gt;, borrowed from `thing`</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">()</span> <span class="c1">// returns Option&lt;Foo&gt;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="n">maybe_foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m only going to be changing the contents of <code>main()</code> here.</p>

<p>What&rsquo;s happening here is that a non-<code>Copy</code> type, <code>Foo</code>, is returned in an <code>Option</code>. In one case,
we have a reference to the <code>Foo</code>, and in another case an owned copy.</p>

<p>We want to set a variable to these, but of course we can&rsquo;t because they&rsquo;re different types.</p>

<p>In one case, we have an owned <code>Foo</code>, and we can usually obtain a borrow from an owned type. For
<code>Option</code>, there&rsquo;s a convenience method <code>.as_ref()</code> that does this<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Let&rsquo;s try using that (<a href="https://play.rust-lang.org/?gist=41c3f836b9485c216ccb05c257ae5326&amp;version=stable&amp;backtrace=0">playpen</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">().</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will give us an error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">borrowed</span> <span class="n">value</span> <span class="n">does</span> <span class="n">not</span> <span class="n">live</span> <span class="n">long</span> <span class="n">enough</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="o">&lt;</span><span class="n">anon</span><span class="o">&gt;:</span><span class="mi">32</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="mi">31</span> <span class="o">|</span>         <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">().</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'>   <span class="o">|</span>         <span class="o">-----------------</span> <span class="n">temporary</span> <span class="n">value</span> <span class="n">created</span> <span class="n">here</span>
</span><span class='line'><span class="mi">32</span> <span class="o">|</span>     <span class="p">};</span>
</span><span class='line'>   <span class="o">|</span>     <span class="o">^</span> <span class="n">temporary</span> <span class="n">value</span> <span class="n">dropped</span> <span class="n">here</span> <span class="k">while</span> <span class="n">still</span> <span class="n">borrowed</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">35</span> <span class="o">|</span> <span class="p">}</span>
</span><span class='line'>   <span class="o">|</span> <span class="o">-</span> <span class="n">temporary</span> <span class="n">value</span> <span class="n">needs</span> <span class="n">to</span> <span class="n">live</span> <span class="n">until</span> <span class="n">here</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">aborting</span> <span class="n">due</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is, <code>thing.get_owned()</code> returns an owned value. There&rsquo;s nothing that it gets anchored to
(we don&rsquo;t set its value to a variable), so it is just a temporary &ndash; we can call methods on it, but
once we&rsquo;re done the value will go out of scope.</p>

<p>What we want is something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">owned</span> <span class="o">=</span> <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">();</span>
</span><span class='line'>    <span class="n">owned</span><span class="p">.</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>but this will still give a borrow error &ndash; <code>owned</code> will still go out of scope within the <code>if</code> block,
and we need the reference to it last as long as <code>maybe_foo</code> (outside the block) is supposed to last.</p>

<p>So this is no good.</p>

<p>An alternate solution here <em>can</em> be copying/cloning the <code>Foo</code> in the <em>first</em> case by calling <code>.map(|x|
x.clone())</code> or <code>.cloned()</code> or something. Sometimes you don&rsquo;t want to clone, so this isn&rsquo;t great.</p>

<p>Another solution here &ndash; the generic advice for dealing with values which may be owned or borrow &ndash;
is to use <code>Cow</code>. It does incur a runtime check, though; one which can be optimized out if things are
inlined enough.</p>

<p>What we need to do here is to extend the lifetime of the temporary returned by <code>thing.get_owned()</code>.
We need to extend it <em>past</em> the scope of the <code>if</code>.</p>

<p>One way to do this is to have an <code>Option</code> outside that scope which we mutate (<a href="https://play.rust-lang.org/?gist=7868045f2cebec6d23e7a065f5823767&amp;version=stable&amp;backtrace=0">playpen</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">owned</span> <span class="o">=</span> <span class="nb">None</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">owned</span> <span class="o">=</span> <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">();</span>
</span><span class='line'>    <span class="n">owned</span><span class="p">.</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works in this case, but in this case we already had an <code>Option</code>. If <code>get_ref()</code> and <code>get_owned()</code>
returned <code>&amp;Foo</code> and <code>Foo</code> respectively, then we&rsquo;d need to do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">owned</span> <span class="o">=</span> <span class="nb">None</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">owned</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">());</span>
</span><span class='line'>    <span class="n">owned</span><span class="p">.</span><span class="n">as_ref</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is icky since it introduces an unwrap.</p>

<p>What we really need is a way to signal to the compiler that it needs to hold on to that temporary
for the scope of the enclosing block.</p>

<p>We can do that! (<a href="https://play.rust-lang.org/?gist=1ddf2a428e73b01baa72acdad7cbbf2b&amp;version=stable&amp;backtrace=0">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">owned</span><span class="p">;</span> <span class="c1">// 😯😯😯😯😯</span>
</span><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">owned</span> <span class="o">=</span> <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">();</span>
</span><span class='line'>    <span class="n">owned</span><span class="p">.</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We know that Rust doesn&rsquo;t do &ldquo;uninitialized&rdquo; variables. If you want to name a variable, you have to
initialize it. <code>let foo;</code> feels rather like magic in this context, because it looks like we&rsquo;ve declared
an uninitialized variable.</p>

<p>What&rsquo;s less well known is that Rust <em>can</em> do &ldquo;deferred&rdquo; initialization. Here, you declare a variable
and can initialize it later, but expressions involving the variable can only exist in branches
where the compiler knows it has been initialized.</p>

<p>This is the case here. We declared the <code>owned</code> variable beforehand. It now lives in the outer scope
and won&rsquo;t be destroyed until the end of the outer scope. However, the variable cannot be used directly
in an expression in the first branch, or after the <code>if</code>. Doing so will give a compile time error
saying <code>use of possibly uninitialized variable: `owned`</code>. We can only use it in the <code>else</code> branch
because the compiler can see that it is unconditionally initialized in that branch.</p>

<p>We can still read the value of <code>owned</code> indirectly through <code>maybe_foo</code> from outside the branch.
This is okay because the storage of <code>owned</code> is guaranteed to live as long as the outer scope,
and <code>maybe_foo</code> borrows from it. The only time <code>maybe_foo</code> is set to a value inside <code>owned</code> is when
<code>owned</code> has been initialized, so it is safe.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In my experience <code>.as_ref()</code> is the solution to many, many borrow check issues newcomers come across, especially those involving <code>.map()</code><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Doing It Wrong]]></title>
    <link href="http://manishearth.github.io/blog/2017/04/05/youre-doing-it-wrong/"/>
    <updated>2017-04-05T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/04/05/youre-doing-it-wrong</id>
    <content type="html"><![CDATA[<p>&ldquo;You&rsquo;re doing it wrong&rdquo;</p>

<p>A common refrain in issue trackers and discussion forums everywhere. In isolation,
it&rsquo;s a variant of RTFM &ndash; give a non-answer when someone wants help, and bounce them
back to a manual or docs which they probably have already read. Not very helpful,
and not useful to anyone. Of course, one can accompany it with a nice explanation
of how to do it right; &ldquo;You&rsquo;re doing it wrong&rdquo; isn&rsquo;t always a bad thing :)</p>

<p>Especially when it comes to programming languages, but in general in the context of any programming
tool or library, &ldquo;you&rsquo;re doing it wrong&rdquo; is almost always due to a &ldquo;bad&rdquo; mental model. The person, whilst
learning, has built a mental model of how the tool works, but this doesn&rsquo;t accurately reflect
reality. Other times, it does reflect reality, but it does not reflect the mental model of the
maintainers (there can be multiple valid ways of looking at something!),
which leads to an impedance mismatch when reading docs or error messages.</p>

<p>In other cases, &ldquo;doing it wrong&rdquo; is a <a href="https://meta.stackexchange.com/q/66377/178438">case of the XY problem</a>, where the user has problem X,
and think they can solve it with solution Y, and end up asking how they can achieve Y. This happens pretty
often &mdash; folks may be approaching your technology with prior experience with related things
that work differently, and may think the same idioms apply.</p>

<p>When I was at <a href="https://maintainerati.org/">WONTFIX</a>, someone who had done support work in the past mentioned that one
thing everyone learns in support is <strong>&ldquo;the user is always wrong &hellip;. and it&rsquo;s not their fault!&rdquo;</strong>.</p>

<p>This is a pretty good template for an attitude to approach &ldquo;doing it wrong&rdquo; questions about your
technology on online forums as well. And this doesn&rsquo;t just benefit the users who ask questions,
this attitude can benefit your technology!</p>

<p>Back when I used to be more active contributing to the Rust compiler, I also used to hang out in
<code>#rust</code> a lot, and often answer newbie questions (now <code>#rust-beginners</code> exists too, and I hang out
in both, but I don&rsquo;t really actively participate as much). One thing I learned to do was probe
deeper into why people hit that confusion in the first place. It&rsquo;s almost always a &ldquo;bad&rdquo; mental
model. Rust is rarely the first programming language folks learn, and people approach it with
preconceptions about how programming works. This isn&rsquo;t unique to Rust, this happens any time someone
learns a language with a different paradigm &mdash; learning C or C++ after doing a GCd language,
learning a functional language after an imperative one, statically typed after dynamic, or one of
the many other axes by which programming languages differ.</p>

<p>Other times, it&rsquo;s just assumptions they made when reading between the lines of whatever resource
they used to learn the language.</p>

<p>So, anyway, folks often have a &ldquo;bad&rdquo; mental model. If we are able to identify that model and correct
it, we have saved that person from potentially getting confused at every step in the future. Great!</p>

<p>With a <em>tiny</em> bit more effort, however, we can do one step better. Not for that person, but for
ourselves! We can probe a bit more and try to understand what caused them to obtain that mental
model. And fix the docs so that it never happens again! Of course, not everyone reads the docs, but
that&rsquo;s what diagnostics are for (in the case of errors). They&rsquo;re a tool to help us nudge the user
towards the right mental model, whilst helping them fix their immediate problem. Rust has for a long
time had pretty great diagnostics, with improvements happening all the time<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I think this is at
least in part due to the attitude of the folks in <code>#rust</code>; always trying to figure out how to
preempt various confusions they see.</p>

<p>It&rsquo;s a good attitude to have. I hope more folks, both in and out of the Rust community, approach
&ldquo;You&rsquo;re doing it wrong&rdquo; cases like that.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Diagnostics issues are often the easiest way to contribute to the compiler itself, so if you want to contribute, I suggest starting there. Willing to mentor!<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Never Hear the Phrase 'INHTPAMA' Anymore]]></title>
    <link href="http://manishearth.github.io/blog/2017/03/18/inhtpinhtpamaa/"/>
    <updated>2017-03-18T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/03/18/inhtpinhtpamaa</id>
    <content type="html"><![CDATA[<p>Imagine never hearing the phrase &lsquo;INHTPAMA&rsquo; again.</p>

<p>Oh, that&rsquo;s already the case? Bummer.</p>

<p>Often, when talking about Rust, folks refer to the core aliasing rule as &ldquo;that <code>&amp;mut</code> thing&rdquo;,
&ldquo;compile-time <code>RWLock</code>&rdquo; (or &ldquo;compile-time <code>RefCell</code>&rdquo;), or something similar. Basically, referring to
the fact that you can&rsquo;t mutate the data that is currently held via an <code>&amp;</code> reference, and that you
can&rsquo;t mutate or read the data currently held via an <code>&amp;mut</code> reference except through that reference
itself.</p>

<p>It&rsquo;s always bugged me that we really don&rsquo;t have a name for this thing. It&rsquo;s one of the core
bits of Rust, and crops up often in discussions.</p>

<p>But we did have a name for it! It was &ldquo;INHTPAMA&rdquo; (which was later butchered into &ldquo;INHTWAMA&rdquo;).</p>

<p>This is a reference to <a href="http://smallcultfollowing.com/babysteps/blog/2012/11/18/imagine-never-hearing-the-phrase-aliasable/">Niko&rsquo;s 2012 blog post</a>, titled
&ldquo;Imagine Never Hearing The Phrase &lsquo;aliasable, mutable&rsquo; again&rdquo;. It&rsquo;s where the aliasing
rules came from. Go read it, it&rsquo;s great. It talks about this weird language with at symbols
and purity, but I assure you, that language is Baby Rust. Or maybe Teenage Rust. The
<a href="https://www.ars.usda.gov/images/docs/9910_10104/Pg-lifecycle.jpg">lifecycle of rusts is complex and interesting</a> and I don&rsquo;t know how to categorize it.</p>

<p>The point of this post isn&rsquo;t really to encourage reviving the use of &ldquo;INHTWAMA&rdquo;; it&rsquo;s
a rather weird acronym that will probably confuse folks. I would like to have a better
way of refering to &ldquo;that <code>&amp;mut</code> thing&rdquo;, but I&rsquo;d prefer if it wasn&rsquo;t a confusing acronym
that carries no meaning of its own if you don&rsquo;t know the history of it. That&rsquo;s a recipe for
making new community members feel like outsiders.</p>

<p>But that post is amazing and I&rsquo;d hate to see it drop out of the collective
memory of the Rust community.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Signal. Use Tor.]]></title>
    <link href="http://manishearth.github.io/blog/2017/03/12/use-signal-use-tor/"/>
    <updated>2017-03-12T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/03/12/use-signal-use-tor</id>
    <content type="html"><![CDATA[<p>I went to send a missive today<br>
As I have done so oft before<br>
But I forgot to employ that scrap of advice<br>
&ldquo;Use Signal. Use Tor.&rdquo;</p>

<p>Intercepted of course the missive was<br>
By a ferocious beast of lore<br>
Because I failed to use that bit of advice<br>
&ldquo;Use Signal. Use Tor.&rdquo;</p>

<p>The beast was strong; and formidable<br>
He hated the amendments four<br>
I should have remembered that piece of advice<br>
&ldquo;Use Signal. Use Tor.&rdquo;</p>

<p>I tried to reason with the beast<br>
but he only wanted war<br>
Do not neglect that important advice<br>
&ldquo;Use Signal. Use Tor.&rdquo;</p>

<p>Here I lie in the belly of the beast<br>
I shall discount this advice no more<br>
If I ever manage to leave this place<br>
I&rsquo;ll use Signal, and Tor.</p>

<p>Heed this advice, children.<br>
It&rsquo;s not something to ignore<br>
Always, always, always, always<br>
Use Signal. Use Tor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Quantum Computing Is Weird]]></title>
    <link href="http://manishearth.github.io/blog/2017/03/11/why-quantum-computing-is-weird/"/>
    <updated>2017-03-11T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/03/11/why-quantum-computing-is-weird</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;ve been meaning to write about physics for a while. When I started this blog the intention was to
write about a wide variety of interests, but I ended up focusing on programming, despite the fact
that I was doing more physics than programming for most of the lifetime of this blog. Time to change
that, and hopefully write about other non-programming topics too.</em></p>

<p>Quantum Computing. It&rsquo;s the new hip thing that&rsquo;s going to change the world<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Someday.</p>

<p>In it&rsquo;s essence, where classical computing deals with &ldquo;bits&rdquo;, which are on/off states, quantum
computing deals with &ldquo;qubits&rdquo;, which are probabalistic quantum states that are often a mixture of on
and off. These have interesting properties which make certain kinds of so-far-hard computation very
easy to perform.</p>

<p>The goal of this post is not to teach quantum computing, rather to garner interest. I come to praise
quantum computing, not bury it<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. As a result, this post doesn&rsquo;t require a background in physics.
Having worked with very simple logic circuits is probably enough, though you may not even need that.</p>

<p>I&rsquo;m basically going to sketch out an example of a very simple quantum algorithm. One that&rsquo;s very
logic-defying. It&rsquo;s even logic-defying for many who have studied quantum mechanics; it certainly
was for me. When I learned this first I could understand <em>why</em> it worked but there was a lot of
dissonance between that and my intuitive conviction that it was <em>wrong</em>.</p>

<h2>The algorithm</h2>

<p><img class="center" src="http://manishearth.github.io/images/post/deutsch/deutsch-jozsa.png" width="600"></p>

<p>This is a quantum circuit (specifically, the circuit for the <a href="https://en.wikipedia.org/wiki/Deutsch%E2%80%93Jozsa_algorithm">Deutsch-Jozsa algorithm</a>).
It&rsquo;s used to find out the nature of a black-box function <code>f(x)</code>, which takes in one qubit and outputs
another<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. For now, you can try to interpret this circuit as if it were a regular logic circuit.
You&rsquo;ll soon see that this interpretation is wrong, but it&rsquo;s useful for the purposes of this explanation.</p>

<p>To run this algorithm, you first construct an &ldquo;oracle&rdquo; out of the black-box function. The oracle,
given inputs <code>x</code> and <code>y</code>, has outputs <code>x</code> and <code>y ⊕ f(x)</code> (where <code>⊕</code> is the symbol for XOR, the
&ldquo;exclusive OR&rdquo;).</p>

<p>As with logic circuits, data flow here goes from left to right. This circuit has two constant
inputs, a zero and a one. This is similar to how we might have constant &ldquo;true&rdquo; and &ldquo;false&rdquo; inputs
to logic circuits.</p>

<p>They are then passed through &ldquo;Hadamard gates&rdquo;. These are <em>like</em> NOT gates, in that applying them
twice is a no-op (they are their own inverse), but they&rsquo;re not actually NOT gates. I like to
describe them as &ldquo;sideways NOT gates&rdquo; since that description somewhat intuitively captures what&rsquo;s
going on with the qubits. What&rsquo;s important to note here is that they have one input and one
output, so they&rsquo;re unaffected by the goings-on in a different wire.</p>

<p>Once these inputs have been Hadamard&#8217;ed, they are fed to the oracle we constructed. The top input
goes on to become the top output. It&rsquo;s also passed through <code>f(x)</code> and XORd with the bottom input to make
the bottom output.</p>

<p>The top output is then Hadamard&#8217;ed again, and finally we observe its value.</p>

<p>Here&rsquo;s where the magic comes in. By observing the top output, <em>we will know the nature of <code>f(x)</code></em><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>Wait, what? The top output doesn&rsquo;t appear to have any interaction with <code>f(x)</code> at all! How can that work?</p>

<p>In fact, we could try to rewrite this circuit such that the measured output definitely has no interaction with
<code>f(x)</code> whatever, assuming that the Hadamard gate isn&rsquo;t doing anything funky<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> (it isn&rsquo;t):</p>

<p><img class="center" src="http://manishearth.github.io/images/post/deutsch/deutsch-jozsa-wrong.png" width="600"></p>

<p>How in the world does this work?</p>

<h2>Why it works</h2>

<p>Sadly, I can&rsquo;t give a satisfying explanation to <em>exactly</em> why this works. This requires some quantum mechanics
background<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup> to grasp.</p>

<p>However, I can give a hopefully-satisfying explanation as to why our regular intuition doesn&rsquo;t work here.</p>

<p>First and foremost: The rewritten circuit I showed above? It&rsquo;s wrong. If this was a logic circuit, we could always do that,
but in quantum computing, T-junctions like the following can&rsquo;t exist:</p>

<p><img class="center" src="http://manishearth.github.io/images/post/deutsch/deutsch-jozsa-tjunction.png" width="600"></p>

<p>This is due to the <a href="https://en.wikipedia.org/wiki/No-cloning_theorem">&ldquo;No Cloning theorem&rdquo;</a>. Unlike regular logic circuits, you can&rsquo;t
just &ldquo;duplicate&rdquo; a qubit. In some cases (like this one), you can try to create a similar qubit
via the same process (e.g. here we could take another 0 and pass it through a Hadamard gate), but
it&rsquo;s not the &ldquo;same&rdquo; qubit. Unlike bits, qubits have a stronger notion of unique identity.</p>

<p>And it&rsquo;s this sense of identity that fuels this algorithm (and most of quantum computing).</p>

<p>You see, while the top output of the oracle was <code>x</code>, it wasn&rsquo;t exactly the <em>same</em> <code>x</code>. This <code>x</code> had
been mixed with the lower output. This means that the upper and lower outputs are now <em>entangled</em>,
with their state depending on each other. In fact, it&rsquo;s really misleading to show the output as two
wires in the first place &ndash; it&rsquo;s really a single &ldquo;entangled&rdquo; state of two qubits that can&rsquo;t be
decomposed as a &ldquo;top half&rdquo; and a &ldquo;bottom half&rdquo;. Of course, this way of representing quantum circuits
is still used because it&rsquo;s a tidy way of visualizing these circuits, and physicists are aware of the
caveats involved.</p>

<p>So what happens is that when you observe the top output, you are really doing a partial observation
on the combined state of the two outputs, and this includes some information about <code>f(x)</code>, which
leaks out when you perform the observation.</p>

<p>These properties of qubits make quantum circuits work significantly differently from regular logic
ones. On one hand, this severely restricts what you can do with them, but at the same time, new
avenues of erstwhile-impossible operations open up. Most useful quantum algorithms (like Shor&rsquo;s
factorization algorithm) involve a mixture of a classical algorithm and a quantum circuit due to
this reason. It&rsquo;s pretty cool!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>What isn&rsquo;t?<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The abstruseness of physics lives after it; the coolness is oft interred with its bones.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>This actually can be generalized to a function with n input and n output qubits, and the circuit stays mostly the same, except the top &ldquo;x&rdquo; line becomes n lines all initialized to 0 and passing through n parallel H gates.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Specifically, if the observation is 1, the function is a constant, whereas if the observation is 0, the function is &ldquo;balanced&rdquo; (gives a different output for inputs 1 and 0)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>For Hadamard is an honorable gate. So are they all, all honorable gates.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>If you do have this background, it&rsquo;s relatively straightforward; the Wikipedia page has the equations for it.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Git Filter-branch and the Git Storage Model]]></title>
    <link href="http://manishearth.github.io/blog/2017/03/05/understanding-git-filter-branch/"/>
    <updated>2017-03-05T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/03/05/understanding-git-filter-branch</id>
    <content type="html"><![CDATA[<p>The other day <a href="http://twitter.com/steveklabnik">Steve</a> wanted git alchemy done on the Rust repo.</p>

<p>Specifically, he wanted the reference and nomicon moved out into
their <a href="https://github.com/rust-lang-nursery/reference">own</a> <a href="https://github.com/rust-lang-nursery/nomicon">repositories</a>, preserving history. Both situations had some interesting
quirks, the reference has lived in <code>src/doc/reference/*</code> and <code>src/doc/reference.md</code>,
and the nomicon has lived in <code>src/doc/nomicon</code>, <code>src/doc/tarpl</code>, and at the top level
in a separate git root.</p>

<p>As you can guess from the title of this post, the correct tool for this job is <code>git filter-branch</code>.
<a href="https://twitter.com/indygreg">My colleague Greg</a> calls it &ldquo;the swiss-army knife of Git history rewriting&rdquo;.</p>

<p>I had some fun with filter-branch that day, thought I&rsquo;d finally write an accessible tutorial for it. A lot
of folks treat filter-branch like rebase, but it isn&rsquo;t, and this crucial difference can lead to many
false starts. It certainly did for me back when I first learned it.</p>

<p>This kind of ties into the common bit of pedantry about the nature of a commit I keep seeing pop up:</p>

<blockquote><p><a href="https://twitter.com/ManishEarth/status/837203953926352896">Git commits appear to be diffs, but they&rsquo;re actually file copies, but they&rsquo;re actually ACTUALLY diffs.</a></p></blockquote>

<h2>So what is a git commit?</h2>

<p>Generally we interact with git commits via <code>git show</code> or by looking at commits on
a git GUI / web UI. Here, we see diffs. It&rsquo;s natural to think of a commit as a diff,
it&rsquo;s the model that makes the most sense for the most common ways of interacting
with commits. It also makes some sense from an implementation point of view, diffs
seem like an efficient way of storing things.</p>

<p>It turns out that the &ldquo;real&rdquo; model is not this, it&rsquo;s actually that each commit
is a snapshot of the whole repo state at the time.</p>

<p>But actually, it isn&rsquo;t, the underlying implementation does make use of deltas
in packfiles and some other tricks like copy-on-write forking.</p>

<p>Ultimately, arguing about the &ldquo;real&rdquo; mental model is mostly pedantry. There are
multiple ways of looking at a commit. The documentation tends to implicitly think
of them as &ldquo;full copies of the entire file tree&rdquo;, which is where most
of the confusion about <code>filter-branch</code> comes from. But often it&rsquo;s important
to picture them as diffs, too.</p>

<p>Understanding the implementation can be helpful, especially when you break the
repository whilst doing crazy things (I do this often). I&rsquo;ve explained how it works
in a later section, it&rsquo;s not really a prerequisite for understanding filter-branch,
but it&rsquo;s interesting.</p>

<h2>How do I rewrite history with <code>git rebase</code>?</h2>

<p>This is where some of the confusion around <code>filter-branch</code> stems from. Folks have worked with
<code>rebase</code>, and they think <code>filter-branch</code> is a generalized version of this. They&rsquo;re actually quite
different.</p>

<p>For those of you who haven&rsquo;t worked with <code>git rebase</code>, it&rsquo;s a pretty useful way of rewriting
history, and is probably what you should use when you want to rewrite history, especially for
maintaining clean git history in an unmerged under-review branch.</p>

<p>Rebase does a whole bunch of things. Its core task is, given the current branch and a branch that
you want to &ldquo;rebase onto&rdquo;, it will take all commits unique to your branch, and apply them in order
to the new one. Here, &ldquo;apply&rdquo; means &ldquo;apply the diff of the commit, attempting to resolve any conflicts&rdquo;.
At times, it may ask you to manually resolve the conflicts, using the same tooling
you use for conflicts during <code>git merge</code>.</p>

<p>Rebase is much more powerful than that, though. <code>git rebase -i</code> will open up &ldquo;interactive rebase&rdquo;,
which will show you the commits that are going to be rebased. In this interface, you can reorder
commits, mark them for edits (wherein the rebase will stop at that commit and let you <code>git commit
--amend</code> changes into it), and even &ldquo;squash&rdquo; commits which lets you mark a commit to be absorbed
into the previous one. This is rather useful for when you&rsquo;re working on a feature and want to keep
your commits neat, but also want to make fixup patches to older commits. <a href="https://blog.filippo.io/git-fixup-amending-an-older-commit/">Filippo&rsquo;s <code>git fixup</code> alias</a>
packages this particular task into a single git command. Changing <code>EDITOR=true</code> into
<code>EDITOR=: GIT_SEQUENCE_EDITOR=:</code> will make it not even open the editor for confirmation
and try to do the whole thing automatically.</p>

<p><code>git rebase -x some_command</code> is also pretty neat, lets you run a shell command on each step during a rebase.</p>

<p>In this model, you are fundamentally thinking of commits as diffs. When you move around
commits in the interactive rebase editor, you&rsquo;re moving around diffs. When you mark things
for squashing, you&rsquo;re basically merging diffs. The whole process is about taking a set of
diffs and applying them to a different &ldquo;base commit&rdquo;.</p>

<p><img class="center" src="http://manishearth.github.io/images/post/memes/diffs-everywhere.jpg" width="400"></p>

<h2>How do I rewrite history with <code>git filter-branch</code>?</h2>

<p><code>filter-branch</code> does <em>not</em> work with diffs. You&rsquo;re working with the &ldquo;snapshot&rdquo; model
of commits here, where each commit is a snapshot of the tree, and rewriting these commits.</p>

<p>What <code>git filter-branch</code> will do is for each commit in the specified branch, apply filters to the
snapshot, and create a new commit. The new commit&rsquo;s parent will be the filtered version of the old
commit&rsquo;s parent. So it creates a parallel commit DAG.</p>

<p>Because the filters apply on the snapshots instead of the diffs, there&rsquo;s no chance for this to cause
conflicts like in git rebase. In git rebase, if I have one commit that makes changes to a file, and
I change the previous commit to just remove the area of the file that was changed, I&rsquo;d have a conflict
and git would ask me to figure out how the changes are supposed to be applied.</p>

<p>In git-filter-branch, if I do this, it will just power through. Unless you explicitly write
your filters to refer to previous commits, the new commit is created in isolation, so it doesn&rsquo;t
worry about changes to the previous commits. If you had indeed edited the previous commit,
the new commit will appear to undo those changes and apply its own on top of that.</p>

<p><code>filter-branch</code> is generally for operations you want to apply pervasively to a repository. If
you just want to tweak a few commits, it won&rsquo;t work, since future commits will appear to undo
your changes. <code>git rebase</code> is for when you want to tweak a few commits.</p>

<p>So, how do you use it?</p>

<p>The basic syntax is <code>git filter-branch &lt;filters&gt; branch_name</code>. You can use <code>HEAD</code> or <code>@</code>
to refer to the current branch instead of explicitly typing <code>branch_name</code>.</p>

<p>A very simple and useful filter is the subdirectory filter. It makes a given subdirectory
the repository root. You use it via <code>git filter-branch --subdirectory-filter name_of_subdir @</code>.
This is useful for extracting the history of a folder into its own repository.</p>

<p>Another useful filter is the tree filter, you can use it to do things like moving around, creating,
or removing files. For example, if you want to move <code>README.md</code> to <code>README</code> in the entire history,
you&rsquo;d do something like <code>git filter-branch --tree-filter 'mv README.md README' @</code> (you can also
achieve this much faster with some manual work and <code>rebase</code>). The tree filter will work by checking
out each commit (in a separate temporary folder), running your filter on the working directory,
adding any changes to the index (no need to <code>git add</code> yourself), and committing the new index.</p>

<p>The <code>--prune-empty</code> argument is useful here, as it removes commits which are now empty due to the
rewrite.</p>

<p>Because it is checking out each commit, this filter is quite slow. When I initially was trying to
do Steve&rsquo;s task on the rust repo, I wrote a long tree filter and it was taking forever.</p>

<p>The faster version is the index filter. However, this is a bit trickier to work with (which is why I
tend to use a tree filter if I can get away with it). What this does is operate on the index,
directly.</p>

<p>The &ldquo;index&rdquo; is basically where things go when you <code>git add</code> them. Running <code>git add</code> will create
temporary objects for the added file, and modify the WIP index (directory tree) to include a
reference to the new file or change an existing file reference to the new one. When you commit, this
index is packaged up into a commit and stored as an object. (More on how these objects work in a
later section)</p>

<p>Now, since this deals with files that are already stored as objects, git doesn&rsquo;t need to unwrap
these objects and create a working directory to operate on them. So, with <code>--index-filter</code>, you
can operate on these in a much faster way. However, since you don&rsquo;t have a working directory,
stuff like adding and moving files can be trickier. You often have to use <code>git update-index</code>
to make this work.</p>

<p>However, a useful index filter is one which just scrubs a file (or files) from history:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch --index-filter <span class="s1">&#39;git rm --cached --ignore-unmatch filename&#39;</span> HEAD
</span></code></pre></td></tr></table></div></figure>


<p>The <code>--ignore-unmatch</code> makes the command still succeed if the file doesn&rsquo;t exist. <code>filter-branch</code>
will fail if one of the filters fails. In general I tend to write fallible filters like
<code>command1 1&gt;&amp;2 2&gt;/dev/null ; command2 1&gt;&amp;2 2&gt;/dev/null ; true</code>, which makes it always succeed
and also ignores any stdout/stderr output (which tends to make the progress screen fill up fast).</p>

<p>The <code>--cached</code> argument on <code>git rm</code> makes it operate only on the index, not the working directory.
This is great, because we don&rsquo;t <em>have</em> a working directory right now.</p>

<p>I rarely use <code>git update-index</code> so I&rsquo;m not really going to try and explain how it can be used here.
But if you need to do more complex operations in an index filter, that&rsquo;s the way to go.</p>

<p>There are many other filters, like <code>--commit-filter</code> (lets you discard a commit entirely),
<code>--msg-filter</code> (rewriting commit messages), and <code>--env-filter</code> (changing things like author metadata
or other env vars). You can see a complete list with examples <a href="https://git-scm.com/docs/git-filter-branch">in the docs</a></p>

<h2>How did I perform the rewrites on the reference and nomicon?</h2>

<p>For the Rust Reference, basically I had to extract the history of <code>src/doc/reference.md</code>,
AND <code>src/doc/reference/*</code> (<code>reference.md</code> was split up into <code>reference/*.md</code> recently) into
its own commit. This is an easy tree filter to write, but tree filters take forever.</p>

<p>Instead of trying my luck with an index filter, I decided to just make it so that the
tree filter would be faster. I first extracted <code>src/doc/</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --subdirectory-filter src/doc @
</span></code></pre></td></tr></table></div></figure>


<p>Now I had a branch that contained only the history of <code>src/doc</code>, with the root directory moved to
<code>doc</code>. This is a much smaller repo than the entirety of Rust.</p>

<p>Now, I moved <code>reference.md</code> into <code>reference/</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --tree-filter <span class="s1">&#39;mkdir -p reference; mv reference.md reference 1&gt;/dev/null 2&gt;/dev/null; true&#39;</span> @
</span></code></pre></td></tr></table></div></figure>


<p>As mentioned before, the <code>/dev/null</code> and <code>true</code> bits are because the mv command will fail in some cases
(when reference.md doesn&rsquo;t exist), and I want it to just continue without complaining when that happens.
I only care about moving instances of that file, if that file doesn&rsquo;t exist there it&rsquo;s still okay.</p>

<p>Now, everything I cared about was within <code>reference</code>. The next step was simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --subdirectory-filter reference @
</span></code></pre></td></tr></table></div></figure>


<p>The whole process took maybe 10 minutes to run, most of the time being spent by the second command.
The final result can be found <a href="https://github.com/rust-lang-nursery/reference">here</a>.</p>

<p>For the nomicon, the task was easier. In the case of the nomicon, it has always resided in
<code>src/doc/nomicon</code>, <code>src/doc/tarpl</code>, or at the root. This last bit is interesting, when
<a href="http://twitter.com/Gankro/">Alexis</a> was working on the nomicon, he started off by hacking on it in a separate repo, but
then within that repo moved it to <code>src/doc/tarpl</code>, and performed a merge commit with rustc. There&rsquo;s
no inherent restriction in Git that all merges must have a common ancestor, and you can do stuff
like this. I was <a href="https://twitter.com/ManishEarth/status/837441118753062912">quite surprised</a> when I saw this, since it&rsquo;s pretty uncommon in general,
but really, many projects of that size will have stuff like this. Servo and html5ever do too, and usually
it&rsquo;s when a large project is merged into it after being developed on the side.</p>

<p>This sounds complicated to work with, but it wasn&rsquo;t that hard. I took the same subdirectory-filtere&rsquo;d
doc directory branch used for the reference. Then, I renamed <code>tarpl/</code> to <code>nomicon/</code> via a tree filter,
and ran another subdirectory filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --tree-filter <span class="s1">&#39;mv tarpl nomicon 1&gt;/dev/null 2&gt;/dev/null; true&#39;</span> @
</span><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --subdirectory-filter nomicon @
</span></code></pre></td></tr></table></div></figure>


<p>Now, I had the whole history of the nomicon in the root dir. Except for the commits made by Alexis
before his frankenmerge, because these got removed in the first subdirectory filter (the commits
were operating outside of <code>src/doc</code>, even though their contents eventually got moved there).</p>

<p>But, at this stage, I already had a branch with the nomicon at the root. Alexis&#8217; original commits
were also operating on the root directory. I can just rebase here, and the diffs of my commits will
cleanly apply!</p>

<p>I found the commit (<a href="https://github.com/rust-lang/rust/commit/a54e64b3c41103c4f6ab840d8ddd3a56ec6b5da8"><code>a54e64</code></a>) where everything was moved to <code>tarpl/</code>, and took its parent
(<a href="https://github.com/rust-lang/rust/commit/c7919f2d9835578321bf7556ad1a01fa42e8a7e8"><code>c7919f</code></a>). Then, I just ran <code>git rebase --root c7919f</code>, and everything cleanly rebased.
As expected, because I had a history going back to the first child of <a href="https://github.com/rust-lang/rust/commit/a54e64b3c41103c4f6ab840d8ddd3a56ec6b5da8"><code>a54e64</code></a> with files
moved, and <a href="https://github.com/rust-lang/rust/commit/a54e64b3c41103c4f6ab840d8ddd3a56ec6b5da8"><code>a54e64</code></a> itself only moved files, so the diffs should cleanly apply.</p>

<p>The final result can be found <a href="https://github.com/rust-lang-nursery/nomicon">here</a>.</p>

<h2>Appendix: How are commits actually stored?</h2>

<p>The way the actual implementation of a commit works is that each file being stored is hashed and
stored in a compressed format, indexed by the hash. A directory (&ldquo;tree&rdquo;) will be a list of hashes, one for
each file/directory inside it, alongside the filenames and other metadata. This list will be hashed
and used everywhere else to refer to the directory.</p>

<p>A commit will reference the &ldquo;tree&rdquo; object for the root directory via its hash.</p>

<p>Now, if you make a commit changing some files, most of the files will be unchanged. So will most of
the directories. So the commits can share the objects for the unchanged files/directories, reducing
their size. This is basically a copy-on-write model. Furthermore, there&rsquo;s a second optimization
called a &ldquo;packfile&rdquo;, wherein instead of storing a file git will store a delta (a diff) and a
reference to the file the diff must be applied to.</p>

<p>We can see this at work using <code>git cat-file</code>. <code>cat-file</code> lets you view objects in
the &ldquo;git filesystem&rdquo;, which is basically a bunch of hash-indexed objects stored in
<code>.git/objects</code>. You can view them directly by traversing that directory (they&rsquo;re
organized as a trie), but <code>cat-file -p</code> will let you pretty-print their contents
since they&rsquo;re stored in a binary format.</p>

<p>I&rsquo;m working with <a href="https://github.com/rust-lang/book">the repo for the Rust Book</a>,
playing with commit <a href="4822f2baa69c849e4fa3b85204f219a16bde2f42"><code>4822f2</code></a>. It&rsquo;s a commit that changes
just one file (<code>second-edition/src/ch15-01-box.md</code>), perfect.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git show 4822f2baa69c849e4fa3b85204f219a16bde2f42
</span><span class='line'>commit 4822f2baa69c849e4fa3b85204f219a16bde2f42
</span><span class='line'>Author: Jake Goulding &lt;...&gt;
</span><span class='line'>Date:   Fri Mar <span class="m">3</span> 14:07:24 <span class="m">2017</span> -0500
</span><span class='line'>
</span><span class='line'>    Reorder sentence about a generic cons list.
</span><span class='line'>
</span><span class='line'>diff --git a/second-edition/src/ch15-01-box.md b/second-edition/src/ch15-01-box.md
</span><span class='line'>index 14c5533..29d8793 100644
</span><span class='line'>--- a/second-edition/src/ch15-01-box.md
</span><span class='line'>+++ b/second-edition/src/ch15-01-box.md
</span><span class='line'><span class="o">(</span>diff omitted<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git cat-file -p 4822f2baa69c849e4fa3b85204f219a16bde2f42
</span><span class='line'>
</span><span class='line'>tree ec7cd2821d4bcbafe08f3eca6ea60487bfdc1b52
</span><span class='line'>parent 24cd100e061bb11c3f7f3219467d6d644c50d811
</span><span class='line'>author Jake Goulding &lt;...&gt; <span class="m">1488568044</span> -0500
</span><span class='line'>committer GitHub &lt;noreply@github.com&gt; <span class="m">1488568044</span> -0500
</span><span class='line'>
</span><span class='line'>Reorder sentence about a generic cons list.
</span></code></pre></td></tr></table></div></figure>


<p>This tells us that the commit is a thing with some author information, a pointer to
a parent, a commit message, and a &ldquo;tree&rdquo;. What&rsquo;s this tree?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git cat-file -p ec7cd2821d4bcbafe08f3eca6ea60487bfdc1b52
</span><span class='line'><span class="m">100644</span> blob 4cab1f4d267628ab5f4f7c14b1b64a9d4b032409    .gitattributes
</span><span class='line'><span class="m">040000</span> tree e1dcc1c754d72450b03542b2106fcb67c78805ff    .github
</span><span class='line'><span class="m">100644</span> blob 4c699f440ac134c577cb6f67b04ec5b93c652440    .gitignore
</span><span class='line'><span class="m">100644</span> blob e86d887d84a839417c960faf877c9057a8dc6823    .travis.yml
</span><span class='line'><span class="m">100644</span> blob 7990f2738876fc0fbc2ca30f5f91e91745b0b8eb    README.md
</span><span class='line'><span class="m">040000</span> tree 17b33cb52a5abb67ff678a03e7ed88cf9f163c69    ci
</span><span class='line'><span class="m">040000</span> tree 0ffd2c1238345c1b0e99af6c1c618eee4a0bab58    first-edition
</span><span class='line'><span class="m">100644</span> blob 5d1d2bb79e1521b28dd1b8ff67f9b04f38d83620    index.md
</span><span class='line'><span class="m">040000</span> tree b7160f7d05d5b5bfe28bad029b1b490e310cff22    redirects
</span><span class='line'><span class="m">040000</span> tree d5672dd9ef15adcd1527813df757847d745e299a    second-edition
</span></code></pre></td></tr></table></div></figure>


<p>This is just a directory! You can see that each entry has a hash. We can use
<code>git cat-file -p</code> to view each one. Looking at a <code>tree</code> object will just give
us a subdirectory, but the <code>blob</code>s will show us actual files!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git cat-file -p 7990f2738876fc0fbc2ca30f5f91e91745b0b8eb <span class="c"># Show README</span>
</span><span class='line'><span class="c"># The Rust Programming Language</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>!<span class="o">[</span>Build Status<span class="o">](</span>https://travis-ci.org/rust-lang/book.svg?branch<span class="o">=</span>master<span class="o">)](</span>https://travis-ci.org/rust-lang/book<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>To <span class="nb">read </span>this book online, visit <span class="o">[</span>rust-lang.github.io/book/<span class="o">][</span>html<span class="o">]</span>.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>rest of file omitted<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how does this share objects? Let&rsquo;s look at the previous commit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git cat-file -p 4822f2baa69c849e4fa3b85204f219a16bde2f42^ <span class="c"># `^` means &quot;parent&quot;</span>
</span><span class='line'>tree d219be3c5010f64960ddb609a849fc42a01ad31b
</span><span class='line'>parent 21c063868f9d7fb0fa488b6f1124262f055d275b
</span><span class='line'>author steveklabnik &lt;...&gt; <span class="m">1488567224</span> -0500
</span><span class='line'>committer steveklabnik &lt;...&gt; <span class="m">1488567239</span> -0500
</span><span class='line'>
</span><span class='line'>mdbook needs to be on the PATH <span class="k">for</span> deploy
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git cat-file -p d219be3c5010f64960ddb609a849fc42a01ad31b <span class="c"># the tree</span>
</span><span class='line'><span class="m">100644</span> blob 4cab1f4d267628ab5f4f7c14b1b64a9d4b032409    .gitattributes
</span><span class='line'><span class="m">040000</span> tree e1dcc1c754d72450b03542b2106fcb67c78805ff    .github
</span><span class='line'><span class="m">100644</span> blob 4c699f440ac134c577cb6f67b04ec5b93c652440    .gitignore
</span><span class='line'><span class="m">100644</span> blob e86d887d84a839417c960faf877c9057a8dc6823    .travis.yml
</span><span class='line'><span class="m">100644</span> blob 7990f2738876fc0fbc2ca30f5f91e91745b0b8eb    README.md
</span><span class='line'><span class="m">040000</span> tree 17b33cb52a5abb67ff678a03e7ed88cf9f163c69    ci
</span><span class='line'><span class="m">040000</span> tree 0ffd2c1238345c1b0e99af6c1c618eee4a0bab58    first-edition
</span><span class='line'><span class="m">100644</span> blob 5d1d2bb79e1521b28dd1b8ff67f9b04f38d83620    index.md
</span><span class='line'><span class="m">040000</span> tree b7160f7d05d5b5bfe28bad029b1b490e310cff22    redirects
</span><span class='line'><span class="m">040000</span> tree d48b2e06970cf3a6ae65655c340922ae69723989    second-edition
</span></code></pre></td></tr></table></div></figure>


<p>If you look closely, all of these hashes are the same, <em>except</em> for the hash for <code>second-edition</code>.
For the hashes which are the same, these objects are being shared across commits. The differing hash
is <code>d5672d</code> in the newer commit, and <code>d48b2e</code> in the older one.</p>

<p>Let&rsquo;s look at the objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git cat-file -p d5672d
</span><span class='line'><span class="m">100644</span> blob 82dc67a6b08f0eb62420e4da3b3aa9c0dc10911a    CONTRIBUTING.md
</span><span class='line'><span class="m">100644</span> blob 5cd51aa43f05416996c4ef055df5d6eb58fbe737    Cargo.lock
</span><span class='line'><span class="m">100644</span> blob 7ab2575fa5bf4abf6eaf767c72347580c9f769dd    Cargo.toml
</span><span class='line'><span class="m">100644</span> blob 96e9f0458b55a4047927de5bf04ceda89d772b2b    LICENSE-APACHE
</span><span class='line'><span class="m">100644</span> blob 5a56e6e8ed1909b4e4800aa8d2a0e7033ab4babe    LICENSE-MIT
</span><span class='line'><span class="m">100644</span> blob be1135fc6d28eca53959c7fc9ae191523e4bc96f    book.json
</span><span class='line'><span class="m">100644</span> blob 1400454f36840e916a7d7028d987c42fcb31b4db    dictionary.txt
</span><span class='line'><span class="m">100644</span> blob 5103c84d034d6e8a0e4b6090453ad2cdcde21537    doc-to-md.sh
</span><span class='line'><span class="m">040000</span> tree 6715d1d4c97e3d17a088922f687b8d9ffacb5953    dot
</span><span class='line'><span class="m">100644</span> blob f9e045c4c1824520534270a2643ebe68311503b8    nostarch.sh
</span><span class='line'><span class="m">040000</span> tree f8d9a9452b4bbaeba256b95d40b303cd5fb20a64    nostarch
</span><span class='line'><span class="m">100644</span> blob 0a2d16852c11355ef9d8758a304b812633dcf03c    spellcheck.sh
</span><span class='line'><span class="m">040000</span> tree 3f8db396566716299330cdd5f569fb0a0c4615dd    src
</span><span class='line'><span class="m">100644</span> blob 56677811f451084de7c3a2478587a09486209b14    style-guide.md
</span><span class='line'><span class="m">040000</span> tree 7601821a2ff38906332082671ea23e4074464dd2    tools
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git cat-file -p d48b2e
</span><span class='line'><span class="m">100644</span> blob 82dc67a6b08f0eb62420e4da3b3aa9c0dc10911a    CONTRIBUTING.md
</span><span class='line'><span class="m">100644</span> blob 5cd51aa43f05416996c4ef055df5d6eb58fbe737    Cargo.lock
</span><span class='line'><span class="m">100644</span> blob 7ab2575fa5bf4abf6eaf767c72347580c9f769dd    Cargo.toml
</span><span class='line'><span class="m">100644</span> blob 96e9f0458b55a4047927de5bf04ceda89d772b2b    LICENSE-APACHE
</span><span class='line'><span class="m">100644</span> blob 5a56e6e8ed1909b4e4800aa8d2a0e7033ab4babe    LICENSE-MIT
</span><span class='line'><span class="m">100644</span> blob be1135fc6d28eca53959c7fc9ae191523e4bc96f    book.json
</span><span class='line'><span class="m">100644</span> blob 1400454f36840e916a7d7028d987c42fcb31b4db    dictionary.txt
</span><span class='line'><span class="m">100644</span> blob 5103c84d034d6e8a0e4b6090453ad2cdcde21537    doc-to-md.sh
</span><span class='line'><span class="m">040000</span> tree 6715d1d4c97e3d17a088922f687b8d9ffacb5953    dot
</span><span class='line'><span class="m">100644</span> blob f9e045c4c1824520534270a2643ebe68311503b8    nostarch.sh
</span><span class='line'><span class="m">040000</span> tree f8d9a9452b4bbaeba256b95d40b303cd5fb20a64    nostarch
</span><span class='line'><span class="m">100644</span> blob 0a2d16852c11355ef9d8758a304b812633dcf03c    spellcheck.sh
</span><span class='line'><span class="m">040000</span> tree f9fc05a6ff78b8211f4df931ed5e32c937aba66c    src
</span><span class='line'><span class="m">100644</span> blob 56677811f451084de7c3a2478587a09486209b14    style-guide.md
</span><span class='line'><span class="m">040000</span> tree 7601821a2ff38906332082671ea23e4074464dd2    tools
</span></code></pre></td></tr></table></div></figure>


<p>Again, these are the same, except for that of <code>src</code>. <code>src</code> has a <em>lot</em> of files in it,
which will clutter this post, so I&rsquo;ll run a diff on the outputs of <code>cat-file</code>:</p>

<pre><code class="udiff">$ diff -U5 &lt;(g cat-file -p f9fc05a6ff78b8211f4df931ed5e32c937aba66c) &lt;(g cat-file -p 3f8db396566716299330cdd5f569fb0a0c4615dd)
--- /dev/fd/63  2017-03-05 11:58:22.000000000 -0800
+++ /dev/fd/62  2017-03-05 11:58:22.000000000 -0800
@@ -63,11 +63,11 @@
 100644 blob ff6b8f8cd44f624e1239c47edda59560cdf491ae   ch14-02-publishing-to-crates-io.md
 100644 blob c53ef854a74b6c9fbd915be1bf824c6e78439c42   ch14-03-cargo-workspaces.md
 100644 blob 3fb59f9cc85b6b81994e83a34d542871a260a8f0   ch14-04-installing-binaries.md
 100644 blob e1cd1ca779fdf202af433108a8af6eda317f2717   ch14-05-extending-cargo.md
 100644 blob 3173cc508484cc447ebe42a024eac7d9e6c2ddcd   ch15-00-smart-pointers.md
-100644 blob 14c5533bb3b604c6e6274db278d1e7129f78d55d   ch15-01-box.md
+100644 blob 29d87933d6832374b87d98aa5588e09e0c1a4991   ch15-01-box.md
 100644 blob 47b35ed489d63ce6a885289fec01b7b16ba1afea   ch15-02-deref.md
 100644 blob 2d20c55cc8605c0c899bc4867adc6b6ea1f5c902   ch15-03-drop.md
 100644 blob 8e3fcf4e83fe1ce985a7c0b479b8b16701765aaf   ch15-04-rc.md
 100644 blob a4ade4ae8bf5296d79ed51d69506e71a83f9f489   ch15-05-interior-mutability.md
 100644 blob 3a4db5616c4f5baeb95d04ea40c6747e60181684   ch15-06-reference-cycles.md
</code></pre>

<p>As you can see, only the file that was changed in the commit has a new blob stored.
If you view <code>14c553</code> and <code>29d879</code> you&rsquo;ll get the pre- and post- commit versions
of the file respectively.</p>

<p>So basically, each commit stores a tree of references to objects, often sharing nodes
with other commits.</p>

<p>I haven&rsquo;t had the opportunity to work with packfiles much, but they&rsquo;re an
additional optimization on top of this. <a href="https://codewords.recurse.com/issues/three/unpacking-git-packfiles">Aditya&rsquo;s post</a> is a good
intro to these.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Sum, Product, and Pi Types?]]></title>
    <link href="http://manishearth.github.io/blog/2017/03/04/what-are-sum-product-and-pi-types/"/>
    <updated>2017-03-04T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/03/04/what-are-sum-product-and-pi-types</id>
    <content type="html"><![CDATA[<p><em>See also: <a href="https://tonyarcieri.com/a-quick-tour-of-rusts-type-system-part-1-sum-types-a-k-a-tagged-unions">Tony&rsquo;s post on the same topic</a></em></p>

<p>You often hear people saying &ldquo;Language X<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> has sum types&rdquo; or &ldquo;I wish language X had sum types&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>,
or &ldquo;Sum types are cool&rdquo;.</p>

<p>Much like fezzes and bow ties, sum types are indeed cool.</p>

<p><img class="center" src="http://manishearth.github.io/images/post/memes/sum-types-are-cool.jpg" width="400"></p>

<p>These days, I&rsquo;ve also seen people asking about &ldquo;Pi types&rdquo;, because of <a href="https://github.com/ticki/rfcs/blob/pi-types-2/text/0000-pi-types.md">this Rust RFC</a>.</p>

<p>But what does &ldquo;sum type&rdquo; mean? And why is it called that? And what, in the name of sanity, is
a Pi type?</p>

<p>Before I start, I&rsquo;ll mention that while I will be covering some type theory to explain the names
&ldquo;sum&rdquo; and &ldquo;product&rdquo;, you don&rsquo;t need to understand these names to use these things! Far too often
do people have trouble understanding relatively straightforward concepts in languages because
they have confusing names with confusing mathematical backgrounds<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<h2>So what&rsquo;s a sum type? (the no-type-theory version)</h2>

<p>In it&rsquo;s essence, a sum type is basically an &ldquo;or&rdquo; type. Let&rsquo;s first look at structs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="kt">bool</span><span class="p">,</span>
</span><span class='line'>    <span class="n">y</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Foo</code> is a <code>bool</code> AND a <code>String</code>. You need one of each to make one.
This is an &ldquo;and&rdquo; type, or a &ldquo;product&rdquo; type (I&rsquo;ll explain the name later).</p>

<p>So what would an &ldquo;or&rdquo; type be? It would be one where the value can be a
<code>bool</code> OR a <code>String</code>. You can achieve this with C++ with a union:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">union</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// set it to a bool</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="s">&quot;blah&quot;</span><span class="p">;</span> <span class="c1">// set it to a string</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this isn&rsquo;t <em>exactly</em> right, since the value doesn&rsquo;t store the information
of which variant it is. You could store <code>false</code> and the reader wouldn&rsquo;t know
if you had stored an empty <code>string</code> or a <code>false</code> <code>bool</code>.</p>

<p>There&rsquo;s a pattern called &ldquo;tagged union&rdquo; (or &ldquo;discriminated union&rdquo;) in C++ which bridges this gap.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">union</span> <span class="n">FooUnion</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">FooTag</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BOOL</span><span class="p">,</span> <span class="n">STRING</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">FooUnion</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="n">FooTag</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set it to a bool</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">BOOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set it to a string</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="s">&quot;blah&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">STRING</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, you manually set the tag when setting the value. C++ also has <code>std::variant</code> (or
<code>boost::variant</code>) that encapsulates this pattern with a better API.</p>

<p>While I&rsquo;m calling these &ldquo;or&rdquo; types here, the technical term for such types is &ldquo;sum&rdquo; types.
Other languages have built-in sum types.</p>

<p>Rust has them and calls them &ldquo;enums&rdquo;. These are a more generalized version of the
enums you see in other languages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Str</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Bool</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">::</span><span class="nb">Bool</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;pattern matching&quot;</span>
</span><span class='line'><span class="k">match</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Str</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="cm">/* do something with string `s` */</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">Bool</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="cm">/* do something with bool `b` */</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift is similar, and also calls them enums</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">str</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">boolean</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">.</span><span class="n">boolean</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="k">switch</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">str</span><span class="p">(</span><span class="k">let</span> <span class="n">s</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// do something with string `s`</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">boolean</span><span class="p">(</span><span class="k">let</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// do something with boolean `b`</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can fake these in Go using interfaces, as well. Typescript has built-in
unions which can be typechecked without any special effort, but you need
to add a tag (like in C++) to pattern match on them.</p>

<p>Of course, Haskell has them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">Foo</span> <span class="ow">=</span> <span class="kt">B</span> <span class="kt">Bool</span> <span class="o">|</span> <span class="kt">S</span> <span class="kt">String</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- define a function</span>
</span><span class='line'><span class="nf">doThing</span> <span class="ow">::</span> <span class="kt">Foo</span> <span class="ow">-&gt;</span> <span class="kt">SomeReturnType</span>
</span><span class='line'><span class="nf">doThing</span> <span class="p">(</span><span class="kt">B</span> <span class="n">b</span><span class="p">)</span> <span class="ow">=</span> <span class="c1">-- do something with boolean b</span>
</span><span class='line'><span class="nf">doThing</span> <span class="p">(</span><span class="kt">S</span> <span class="n">s</span><span class="p">)</span> <span class="ow">=</span> <span class="c1">-- do something with string s</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- call it</span>
</span><span class='line'><span class="nf">doThing</span> <span class="p">(</span><span class="kt">S</span> <span class="s">&quot;blah&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nf">doThing</span> <span class="p">(</span><span class="kt">B</span> <span class="kt">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the very common things that languages with sum types do is express nullability
as a sum type;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// an Option is either &quot;something&quot;, containing a type, or &quot;nothing&quot;</span>
</span><span class='line'><span class="k">enum</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Some</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">None</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">match</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Some</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">None</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;no string for you&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generally, these languages have &ldquo;pattern matching&rdquo;, which is like a <code>switch</code>
statement on steroids. It lets you match on and destructure all kinds of things,
sum types being one of them. Usually, these are &ldquo;exhaustive&rdquo;, which means that
you are forced to handle all possible cases. In Rust, if you remove that <code>None</code>
branch, the program won&rsquo;t compile. So you&rsquo;re forced to deal with the none case,
<em>somehow</em>.</p>

<p>In general sum types are a pretty neat and powerful tool. Languages with them built-in
tend to make heavy use of them, almost as much as they use structs.</p>

<h2>Why do we call it a sum type?</h2>

<p><em>Here be (type theory) <a href="https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">dragons</a></em></p>

<p>Let&rsquo;s step back a bit and figure out what a type is.</p>

<p>It&rsquo;s really a restriction on the values allowed. It can have things like methods and whatnot
dangling off it, but that&rsquo;s not so important here.</p>

<p>In other words, it&rsquo;s like<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> a <a href="https://en.wikipedia.org/wiki/Set_(mathematics)">set</a>. A boolean is the set \(\{\mathtt{true}, \mathtt{false}\}\). An 8-bit unsigned integer
(<code>u8</code> in Rust) is the set \(\{0, 1, 2, 3, &hellip;. 254, 255\}\). A string is a set with
infinite elements, containing all possible valid strings<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>What&rsquo;s a struct? A struct with two fields contains every possible combination of elements from the two sets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="kt">bool</span><span class="p">,</span>
</span><span class='line'>    <span class="n">y</span><span class="o">:</span> <span class="kt">u8</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The set of possible values of <code>Foo</code> is</p>

&#92;[&#92;{(\mathtt{x}, \mathtt{y}): \mathtt{x} \in \mathtt{bool}, \mathtt y \in \mathtt{u8}&#92;}&#92;]


<p>(Read as &ldquo;The set of all \((\mathtt{x}, \mathtt{y})\) where \(\tt x\) is in \(\mathtt{bool}\) and \(\tt y\) is in \(\mathtt{u8}\)&rdquo;)</p>

<p>This is called a <em>Cartesian product</em>, and is often represented as \(\tt Foo = bool \times u8\).
An easy way to view this as a product is to count the possible values: The number of possible values
of <code>Foo</code> is the number of possible values of <code>bool</code> (2) <em>times</em> the number of possible values of <code>u8</code> (256).</p>

<p>A general struct would be a &ldquo;product&rdquo; of the types of each field, so something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="kt">bool</span><span class="p">,</span>
</span><span class='line'>    <span class="n">y</span><span class="o">:</span> <span class="kt">u8</span><span class="p">,</span>
</span><span class='line'>    <span class="n">z</span><span class="o">:</span> <span class="kt">bool</span><span class="p">,</span>
</span><span class='line'>    <span class="n">w</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>is \(\mathtt{Bar = bool \times u8 \times bool \times String}\)</p>

<p>This is why structs are called &ldquo;product types&rdquo;<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p>

<p>You can probably guess what comes next &ndash; Rust/Swift enums are &ldquo;sum types&rdquo;, because they are the
<em>sum</em> of the two sets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Bool</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Integer</span><span class="p">(</span><span class="kt">u8</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>is a set of all values which are valid booleans, <em>and</em> all values which are valid integers. This
is a sum of sets, \(\tt Foo = bool + u8\). More accurately, it&rsquo;s a <em>disjoint union</em>, where if the input
sets have overlap, the overlap is &ldquo;discriminated&rdquo; out.</p>

<p>An example of this being a disjoint union is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bool1</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Bool2</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Integer</span><span class="p">(</span><span class="kt">u8</span><span class="p">).</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not \(\tt Bar = bool + bool + u8\), because \(\tt bool + bool = bool\), (regular set addition doesn&rsquo;t duplicate the overlap).</p>

<p>Instead, it&rsquo;s something like</p>

&#92;[\tt Bar = bool + otherbool + u8&#92;]


<p>where \(\tt otherbool\) is also a set \(\tt \{true, false\}\),
except that these elements are <em>different</em> from those in \(\tt bool\). You can look at it as if</p>

&#92;[\tt otherbool = &#92;{true_2, false_2&#92;}&#92;]


<p>so that</p>

&#92;[\mathtt{bool + otherbool} = &#92;{\mathtt{true, false, true_2, false_2}&#92;}&#92;]


<p>For sum types, the number of possible values is the sum of the number of possible values of
each of its component types.</p>

<p>So, Rust/Swift enums are &ldquo;sum types&rdquo;.</p>

<p>You may often notice the terminology &ldquo;algebraic datatypes&rdquo; (ADT) being used, usually that&rsquo;s just
talking about sum and product types together &ndash; a language with ADTs will have both.</p>

<p>In fact, you can even have <em>exponential</em> types! The notation A<sup>B</sup> in set theory does mean something,
it&rsquo;s the set of all possible mappings from \(B\) to \(A\). The number of elements is \(N_A^{N_B}\). So
basically, the type of a function (which is a mapping) is an &ldquo;exponential&rdquo; type. You can also view it as
an iterated product type, a function from type <code>B</code> to <code>A</code> is really a struct like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// the type</span>
</span><span class='line'><span class="k">fn</span> <span class="n">my_func</span><span class="p">(</span><span class="n">b</span><span class="o">:</span> <span class="n">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// is conceptually (each possible my_func can be written as an instance of)</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">my_func</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">b1</span><span class="o">:</span> <span class="n">A</span><span class="p">,</span> <span class="c1">// value for first element in B</span>
</span><span class='line'>    <span class="n">b2</span><span class="o">:</span> <span class="n">A</span><span class="p">,</span> <span class="c1">// value for second element in B</span>
</span><span class='line'>    <span class="n">b3</span><span class="o">:</span> <span class="n">A</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ... </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>given a value of the input <code>b</code>, the function will find the right field of <code>my_func</code> and return
the mapping. Since a struct is a product type, this is</p>

&#92;[\mathtt{A}^{N_\mathtt{B}} = \tt A \times A \times A \times \dots&#92;]


<p>making it an exponential type.</p>

<p><a href="http://strictlypositive.org/diff.pdf">You can even take <em>derivatives</em> of types!</a> (h/t Sam Tobin-Hochstadt for pointing this out to me)</p>

<h2>What, in the name of sanity, is a Pi type?</h2>

<p><img class="center" src="http://manishearth.github.io/images/post/memes/what-in-the-name-of-sanity.jpg" width="400"></p>

<p>It&rsquo;s essentially a form of dependent type. A dependent type is when your type
can depend on a value. An example of this is integer generics, where you
can do things like <code>Array&lt;bool, 5&gt;</code>, or <code>template&lt;unsigned int N, typename T&gt; Array&lt;T, N&gt; ...</code> (in C++).</p>

<p>Note that the type signature contains a <em>type</em> dependent on an integer, being generic over multiple
different array lengths.</p>

<p>The name comes from how a constructor for these types would look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// create an array of booleans from a given integer</span>
</span><span class='line'><span class="c1">// I made up this syntax, this is _not_ from the Rust Pi type RFC</span>
</span><span class='line'><span class="k">fn</span> <span class="n">make_array</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="n">x</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="c1">// (the proposed rust syntax)</span>
</span><span class='line'><span class="k">fn</span> <span class="n">make_array</span><span class="o">&lt;</span><span class="kr">const</span> <span class="n">x</span><span class="o">:</span> <span class="kt">u8</span><span class="o">&gt;</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="n">x</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// ... </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s the type of <code>make_array</code> here? It&rsquo;s a function which can accept any integer
and return a different type in each case. You can view it as a set of functions,
where each function corresponds to a different integer input. It&rsquo;s basically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">make_array</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make_array_0</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_1</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_2</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">2</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_3</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">3</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_4</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_5</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ... </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given an input, the function chooses the right child function here, and calls it.</p>

<p>This is a struct, or a product type! But it&rsquo;s a product of an infinite number of types<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>.</p>

<p>We can look at it as</p>

&#92;[&#92;texttt{make_array} = \prod\limits_{x = 0}^\infty\left( \texttt{fn()} \mathtt\to \texttt{Array&lt;bool, x&gt;}\right)&#92;]


<p>The usage of the \(\Pi\) symbol to denote an iterative product gives this the name &ldquo;Pi type&rdquo;.</p>

<p>In languages with lazy evaluation (like Haskell), there is no difference between having a function
that can give you a value, and actually having the value. So, the type of <code>make_array</code> is the type
of <code>Array&lt;bool, N&gt;</code> itself in languages with lazy evaluation.</p>

<p>There&rsquo;s also a notion of a &ldquo;sigma&rdquo; type, which is basically</p>

&#92;[\sum\limits_{x = 0}^\infty \left(\texttt{fn()} \mathtt\to \texttt{Array&lt;bool, x&gt;}\right)&#92;]


<p>With the Pi type, we had &ldquo;for all N we can
construct an array&rdquo;, with the sigma type we have &ldquo;there exists some N for which we can construct this array&rdquo;.
As you can expect, this type can be expressed with a possibly-infinite enum, and instances of this type
are basically instances of <code>Array&lt;bool, N&gt;</code> for some specific <code>N</code> where the <code>N</code> is only known at runtime.
(much like how regular sum types are instances of one amongst multiple types, where the exact type
is only known at runtime). <code>Vec&lt;bool&gt;</code> is conceptually similar to the sigma type <code>Array&lt;bool, ?&gt;</code>,
as is <code>&amp;[bool]</code>.</p>

<h2>Wrapping up</h2>

<p>Types are sets, and we can do set-theory things on them to make cooler types.</p>

<p>Let&rsquo;s try to avoid using confusing terminology, however. If Rust <em>does</em> get &ldquo;pi types&rdquo;,
let&rsquo;s just call them &ldquo;dependent types&rdquo; or &ldquo;const generics&rdquo; :)</p>

<p><em>Thanks to Zaki, Avi Weinstock, Corey Richardson, and Peter Atashian for reviewing drafts of this post.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Rust, Swift, <em>sort of</em> Typescript, and all the functional languages who had it before it was cool.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Lookin&#8217; at you, Go.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Moooooooooooooooonads<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Types are not exactly sets due to some differences, but for the purposes of this post we can think of them like sets.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Though you can argue that strings often have their length bounded by the pointer size of the platform, so it&rsquo;s still a finite set.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>This even holds for zero-sized types, for more examples, check out <a href="http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/">this blog post</a><a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>Like with strings, in practice this would probably be bounded by the integer type chosen<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mitigating Underhandedness: Fuzzing Your Code]]></title>
    <link href="http://manishearth.github.io/blog/2017/03/02/mitigating-underhandedness-fuzzing-your-code/"/>
    <updated>2017-03-02T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/03/02/mitigating-underhandedness-fuzzing-your-code</id>
    <content type="html"><![CDATA[<p><em>This may be part of a collaborative blog post series about underhanded Rust code. Or it may not. I invite you to write your own posts about underhanded code to make it so!</em></p>

<p>The <a href="https://underhanded.rs/blog/2017/02/28/extending-submission-deadline.en-US.html">submission deadline for the Underhanded Rust competition has been extended</a>, so
let&rsquo;s talk more about how to keep your code working and free from bugs/underhandedness!</p>

<p><a href="http://manishearth.github.io/blog/2017/01/21/mitigating-underhandedness-clippy/">Previously, we talked about Clippy</a>.</p>

<p>Now, really, underhanded bugs are just another form of bug. And how do we find bugs? We test!</p>

<p>We write unit tests. We run the code under Valgrind, ASan, MSan, UBSan, TSan, and any other sanitizer
we can get our hands on. Tests tests tests. More tests. Tests.</p>

<p>But, there&rsquo;s a problem here. You need to write <em>test cases</em> to make this work. These are inputs
fed to your code after which you check whatever invariants your code has. There&rsquo;s
no guarantee that the test cases you write will exercise all the code paths in your
program. This applies for sanitizers too, sanitizers are limited to testing the code paths
that your test cases hit.</p>

<p>Of course, you can use code coverage tools to ensure that all these code paths will be hit.
However, there&rsquo;s a conflict here &ndash; your code will have many code paths that are
<em>not supposed to be hit ever</em>. Things like redundant bounds checks, null checks, etc.
In Rust programs such code paths generally use panics.</p>

<p>Now, these code paths are never <em>supposed</em> to be hit, so they&rsquo;ll never show up in your
code coverage. But you don&rsquo;t have a guarantee that they can never be hit, short
of formally verifying your program. The only solution here is writing more test cases.</p>

<p>Aside from that, even ignoring those code paths, you still need to manually write
test cases for everything. For each possible code path in your code, if you want to
be sure.</p>

<p>Who wants to manually write a million test cases?</p>

<p><img class="center" src="http://manishearth.github.io/images/post/memes/aint-nobody.jpg" width="400"></p>

<p><img class="center" src="http://manishearth.github.io/images/post/memes/that-would-be-great.jpg" width="400"></p>

<p>Enter fuzzing. What fuzzing will do is feed your program random inputs, carefully watching the
codepaths being taken, and try to massage the inputs so that new, interesting (usually crashy)
codepaths are taken. You write tests for the fuzzer such that they can accept arbitrary input, and
the fuzzer will find cases where they crash or panic.</p>

<p>One of the most popular fuzzers out there is <a href="http://lcamtuf.coredump.cx/afl/">AFL</a>, which takes a binary and feeds it random
input. Rust <a href="https://github.com/rust-fuzz/afl.rs">has a library that you can use for running AFL</a>, however it currently needs
to be run via a Docker image or needs a recompilation of rustc, since it adds a custom LLVM pass.
We&rsquo;re working on making this step unnecessary.</p>

<p>However, as of a few weeks ago, we now have bindings for <a href="http://llvm.org/docs/LibFuzzer.html">libFuzzer</a>, which uses existing
instrumentation options built in to LLVM itself! libFuzzer works a bit differently; instead
of giving it a binary, you write a function in a special way and give it a library containing
that function, which it turns into a fuzzer binary. This is faster, since the fuzzer lives
inside the binary itself and it doesn&rsquo;t need to execute a new program each time.</p>

<p>Using libFuzzer in Rust is easy. Install <a href="https://github.com/rust-fuzz/cargo-fuzz"><code>cargo-fuzz</code></a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo install cargo-fuzz
</span></code></pre></td></tr></table></div></figure>


<p>Now, within your crate, initialize the fuzz setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo fuzz init
</span></code></pre></td></tr></table></div></figure>


<p>This will create a fuzzing crate in <code>fuzz/</code>, with a single &ldquo;fuzz target&rdquo;, <code>fuzzer_script_1</code>.
You can add more such targets with <code>cargo fuzz add name_of_target</code>. Fuzz targets are small libraries
with a single function in them; the function that will be called over and over again by the fuzzer.
It is up to you to fill in the body of this function, such that the program will crash or panic
if and only if something goes wrong.</p>

<p>For example, for the <code>unicode-segmentation</code> crate, <a href="https://github.com/Manishearth/unicode-segmentation/blob/99b3636ef6b4d96c05644403c1c2eccba2c5f5db/fuzz/fuzzers/equality.rs">one of the fuzz targets I wrote</a> just
takes the string, splits it by grapheme and word boundaries, recombines it, and then asserts that
the new string is the same.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">extern</span> <span class="k">fn</span> <span class="n">go</span><span class="p">(</span><span class="n">data</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// we only deal with unicode input</span>
</span><span class='line'>    <span class="c1">// bail early, *without panicking* if the input isn&#39;t utf8</span>
</span><span class='line'>    <span class="k">if</span> <span class="kd">let</span> <span class="nb">Ok</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=</span> <span class="kt">str</span><span class="o">::</span><span class="n">from_utf8</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// split into graphemes, recollect</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">UnicodeSegmentation</span><span class="o">::</span><span class="n">graphemes</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="k">true</span><span class="p">).</span><span class="n">flat_map</span><span class="p">(</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="p">.</span><span class="n">chars</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// recollected string should be the same as the input, panic if not</span>
</span><span class='line'>        <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// split into words, recollect</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">split_word_bounds</span><span class="p">().</span><span class="n">flat_map</span><span class="p">(</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="p">.</span><span class="n">chars</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// recollected string should be the same as the input, panic if not</span>
</span><span class='line'>        <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other targets ensure that the forward and reverse word/grapheme
iterators produce the same results. They all take the byte slice input, attempt to convert to UTF8
(silently failing  &ndash; NOT panicking &ndash; if not possible), and then use the string as an input
testcase.</p>

<p>Now, these targets will panic if the test fails, and the fuzzer will try and force that panic to
happen. But also, these targets put together exercise most of the API surface of the crate, so
the fuzzer may also find panics (or even segmentation faults!) in the crate itself. For example,
the <a href="https://github.com/servo/rust-url/blob/3e5541e51e02d8acb10a6ea8ab174ba1bc23ce41/fuzz/fuzzers/parse.rs#L10">fuzz target for rust-url</a> doesn&rsquo;t itself assert; all it does is try to parse the given
string. The fuzzer will try to get the URL parser to panic.</p>

<p>To run a fuzz script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo fuzz run fuzzer_script_1
</span></code></pre></td></tr></table></div></figure>


<p>This will start the fuzzer, running until it finds a crash or panic. It may also
find other things like inputs which make the code abnormally slow.</p>

<p>Fuzzing can find some interesting bugs. For example, the unicode-segmentation
fuzzers found <a href="https://github.com/unicode-rs/unicode-segmentation/issues/19">this bug</a>, where an emoji followed by <em>two</em> skin tone modifiers
isn&rsquo;t handled correctly. We&rsquo;d probably never have been able to come up with this testcase on our
own. But the fuzzer could find it!</p>

<p>The Rust Cap&#8217;n Proto crate ran cargo-fuzz and found <a href="https://dwrensha.github.io/capnproto-rust/2017/02/27/cargo-fuzz.html">a whole ton of bugs</a>. There
are more such examples <a href="https://github.com/rust-fuzz/cargo-fuzz#trophy-case">in the trophy case</a> (be sure to add any of your own findings
to the trophy case, too!)</p>

<p>cargo-fuzz is relatively new, so the API and behavior may still be tweaked a bit before 1.0.
But you can start taking it for a spin now, and finding bugs!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clarifying Misconceptions About SHAttered]]></title>
    <link href="http://manishearth.github.io/blog/2017/02/26/clarifying-misconceptions-about-shattered/"/>
    <updated>2017-02-26T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/02/26/clarifying-misconceptions-about-shattered</id>
    <content type="html"><![CDATA[<p>This week Google published a <a href="https://shattered.io/">SHA-1 collision</a>.</p>

<p>There&rsquo;s a lot of confusion about the implications of this. A lot of this is due to differences of
opinion on what exactly constitutes a &ldquo;new&rdquo; collision. I <a href="https://twitter.com/ManishEarth/status/835557328308969472">tweeted about this</a>. The webpage
for the attack itself is misleading, saying that the answer to &ldquo;Who is capable of mounting this attack?&rdquo;
is people with Google-esque resources. This depends on what exactly you mean by &ldquo;this attack&rdquo;.</p>

<p>So I&rsquo;m seeing a lot of &ldquo;oh well just another anti-milestone for SHA, doesn&rsquo;t affect anyone since its
still quite expensive to exploit&rdquo; reactions, as well as the opposite &ldquo;aaaaa everything is on fire&rdquo;
reaction. Both are wrong. It has practical implications for you even if you are certain that you
won&rsquo;t attract the ire of an entity with a lot of computational power. None of these implications,
however, are likely to be disastrous.</p>

<p>TLDR: Now <em>anyone</em>, without needing Google-esque resources,
can generate two colliding PDFs with arbitrary visual content in each.</p>

<p>(In fact, there&rsquo;s already <a href="http://alf.nu/SHA1">a PDF collision-generator</a> up where
you can upload two images and get a PDF with collisions in it)</p>

<h2>Okay, back up a bit. What&rsquo;s a hash? What&rsquo;s SHA-1?</h2>

<p>I explained this a bit in my older post about <a href="http://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs/">zero-knowledge-proofs</a>.</p>

<p>In essence, a hash function takes some data (usually of arbitrary size), and produces a value called
a <em>hash</em> (usually of fixed size). The function has some additional properties:</p>

<ul>
<li>In almost all cases, a small perturbation in the input will lead to a large perturbation in the hash</li>
<li>Given an input and its hash, it is computationally hard to find an alternate input producing the same hash</li>
<li>It&rsquo;s also hard to just find two inputs that has to the same value, though this is usually easier than the previous one</li>
</ul>


<p>when two inputs hash to the same value, this is called a collision. As mentioned, is easier to find
<em>a</em> collision, over finding a colliding alternate input for a known input.</p>

<p>SHA-1 is one such hash function. It&rsquo;s been known for a while that it&rsquo;s insecure, and the industry has
largely moved off of it, but it&rsquo;s still used, so it can still be a problem.</p>

<h2>What did the researchers do?</h2>

<p>They found a hash collision for SHA-1. In essence, they found two strings, <code>A</code> and <code>B</code>, where
<code>SHA1(A) == SHA1(B)</code>.</p>

<p><em>However</em>, given the way SHA-1 works, this means that you can generate infinitely many other
such pairs of strings. And given the nature of the exact <code>A</code> and <code>B</code> they created, it is possible
to use this to create arbitrary colliding PDFs.</p>

<p>Basically, SHA-1 (and many other hash functions), operate on &ldquo;blocks&rdquo;. These are fixed-size chunks
of data, where the size is a property of the hash function. For SHA1 this is 512 bits.</p>

<p>The function starts off with an &ldquo;initial&rdquo; built-in hash. It takes the first block of your data and
this hash, and does some computation with the two to produce a new hash, which is its state after
the first block.</p>

<p>It will then take this hash and the second block, and run the same computations to produce
a newer hash, which is its state after the second block. This is repeated till all blocks have
been processed, and the final state is the result of the function.</p>

<p>There&rsquo;s an important thing to notice here. At each block, the only inputs are the block itself and the
hash of the string up to that block.</p>

<p>This means, if <code>A</code> and <code>B</code> are of a size that is a multiple of the block size, and <code>SHA1(A) == SHA1(B)</code>,
then <code>SHA1(A + C) == SHA1(B + C)</code>. This is because, when the hash function reaches <code>C</code>, the state will
be the same due to the hash collision, and after this point the next input blocks are identical in
both cases, so the final hash will be the same.</p>

<p>Now, while you might consider <code>A+C, B+C</code> to be the &ldquo;same collision&rdquo; as <code>A, B</code>, the implications
of this are different than just &ldquo;there is now one known pair of inputs that collide&rdquo;, since everyone
now has the ability to generate new colliding inputs by appending an arbitrary string to <code>A</code> and <code>B</code>.</p>

<p>Of course, these new collisions have the restriction that the strings will always start with <code>A</code> or
<code>B</code> and the suffixes will be identical. If you want to break this restriction, you will
have to devote expensive resources to finding a new collision, like Google did.</p>

<h2>How does this let us generate arbitrary colliding PDFs?</h2>

<p>So this exploit actually uses features of the JPEG format to work. It was done in
a PDF format since JPEGs often get compressed when sent around the Internet. However,
since both A and B start a partial PDF document, they can only be used to generate colliding
PDFs, not JPEGs.</p>

<p>I&rsquo;m going to first sketch out a simplified example of what this is doing, using a hypothetical
pseudocode-y file format. The researchers found a collision between the strings:</p>

<ul>
<li>A: <code>&lt;header data&gt; COMMENT(&lt;nonce for A&gt;) DISPLAY IMAGE 1</code></li>
<li>B: <code>&lt;header data&gt; COMMENT(&lt;nonce for B&gt;) DISPLAY IMAGE 2</code></li>
</ul>


<p>Here, <code>&lt;header data&gt;</code> is whatever is necessary to make the format work, and the &ldquo;nonce&#8221;s are
strings that make <code>A</code> and <code>B</code> have the same hash. Finding these nonces is where
the computational power is required, since you basically have to brute-force a solution.</p>

<p>Now, to both these strings, they append a suffix C: <code>IMAGE 1(&lt;data for image 1&gt;) IMAGE 2(&lt;data for image 2&gt;)</code>.
This creates two complete documents. Both of the documents contain both images, but each one is instructed
to display a different one. Note that since <code>SHA1(A) == SHA1(B)</code>, <code>SHA1(A + C) = SHA1(B + C)</code>, so these
final documents have the same hash.</p>

<p>The contents of <code>C</code> don&rsquo;t affect the collision at all. So, we can insert any two images in <code>C</code>, to create
our own personal pair of colliding PDFs.</p>

<p>The actual technique used is similar to this, and it relies on JPEG comment fields. They have found
a collision between two strings that look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>pdf header data                       | String A
</span><span class='line'>begin embedded image                  |
</span><span class='line'>    jpg header data                   |
</span><span class='line'>    declare jpg comment of length N   |
</span><span class='line'>    random nonce of length N          | (comment ends here)
</span><span class='line'>                                     ---
</span><span class='line'>    image 1, length L                 | String C
</span><span class='line'>    jpg EOF byte (2 bytes)            |
</span><span class='line'>    image 2                           |
</span><span class='line'>end embedded image                    |
</span><span class='line'>
</span><span class='line'>and
</span><span class='line'>
</span><span class='line'>pdf header data                       | String B
</span><span class='line'>begin embedded image                  |
</span><span class='line'>    jpg header data                   |
</span><span class='line'>    declare jpg comment of length M   |
</span><span class='line'>    random nonce of length M-L-2      |
</span><span class='line'>                                     ---
</span><span class='line'>    image 1, length L                 | String C
</span><span class='line'>    jpg EOF marker (2 bytes)          | (comment ends here)
</span><span class='line'>    image 2                           |
</span><span class='line'>end embedded image                    |
</span></code></pre></td></tr></table></div></figure>


<p>By playing with the nonces, they managed to generate a collision between <code>A</code> and <code>B</code>. In the first
pdf, the embedded image has a comment containing only the nonce. Once the JPEG reader gets past that
comment, it sees the first image, displays it, and then sees the end-of-file marker and decides to
stop. Since the PDF format doesn&rsquo;t try to interpret the image itself, the PDF format won&rsquo;t be
boggled by the fact that there&rsquo;s some extra garbage data after the JPEG EOF marker. It
simply takes all the data between the &ldquo;begin embedded image&rdquo; and &ldquo;end embedded image&rdquo; blocks,
and passes it to the JPEG decoder. The JPEG decoder itself stops after it sees the end of file
marker, and doesn&rsquo;t get to the extra data for the second image.</p>

<p>In the second pdf, the jpg comment is longer, and subsumes the first image (as well as the EOF marker)
Thus, the JPEG decoder directly gets to the second image, which it displays.</p>

<p>Since the actual images are not part of the original collision (A and B), you can substitute any pair
of jpeg images there, with some length restrictions.</p>

<h2>What are the implications?</h2>

<p>This does mean that you should not trust the integrity of a PDF when all you have
to go on is its SHA-1 hash. Use a better hash. <em>Anyone can generate these colliding PDFs
now.</em></p>

<p>Fortunately, since all such PDFs will have the same prefix A or B, you can detect when
such a deception is being carried out.</p>

<p>Don&rsquo;t check colliding PDFs into SVN. <a href="https://bugs.webkit.org/show_bug.cgi?id=168774#c27">Things break</a>.</p>

<p>In some cases it is possible to use the PDF collision in other formats. For example,
<a href="https://mobile.twitter.com/arw/status/834883944898125824">it can be used to create colliding HTML documents</a>. I think it can be used to colide
ZIP files too.</p>

<p>Outside the world of complex file formats, little has changed. It&rsquo;s still a bad idea to use SHA-1.
It&rsquo;s still possible for people to generate entirely new collisions like Google did, though this
needs a lot of resources. It&rsquo;s possible that someone with resources has already generated such a
&ldquo;universal-key collision&rdquo; for some other file format<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> and will use it on you, but this was
equally possible before Google published their attack.</p>

<p>This does not make it easier to collide with arbitrary hashes &ndash; if someone else
has uploaded a document with a hash, and you trust them to not be playing any tricks,
an attacker won&rsquo;t be able to generate a colliding document for this without immense
resources. The attack only works when the attacker has control over the initial document;
e.g. in a bait-and-switch-like attack where the attacker uploads document A, you read and verify it
and broadcast your trust in document A with hash <code>SHA(A)</code>, and then the attacker switches it with
document B.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Google&rsquo;s specific collision was designed to be a &ldquo;universal key&rdquo;, since A and B are designed to have the image-switching mechanism built into it. Some other collision may not be like this; it could just be a collision of two images (or whatever) with no such switching mechanism. It takes about the same effort to do either of these, however, so if you have a file format that can be exploited to create a switching mechanism, it would always make more sense to build one into any collision you look for.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mitigating Underhandedness: Clippy!]]></title>
    <link href="http://manishearth.github.io/blog/2017/01/21/mitigating-underhandedness-clippy/"/>
    <updated>2017-01-21T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog/2017/01/21/mitigating-underhandedness-clippy</id>
    <content type="html"><![CDATA[<p><em>This may be part of a collaborative blog post series about underhanded Rust code. Or it may not. I invite you to write your own posts about underhanded code to make it so!</em></p>

<p>Last month we opened up <a href="https://underhanded.rs/blog/2016/12/15/underhanded-rust.en-US.html">The Underhanded Rust competition</a>. This contest is about
writing seemingly-innocuous malicious code; code that is deliberately written to do some harm,
but will pass a typical code review.</p>

<p>It is inspired by the <a href="http://www.underhanded-c.org">Underhanded C</a> contest. Most of the underhanded C submissions have to do
with hidden buffer overflows, pointer arithmetic fails, or misuse of C macros; and these problems
largely don&rsquo;t occur in Rust programs. However, the ability to layer abstractions on each other does
open up new avenues to introducing underhandedness by relying on sufficiently confusing abstraction
sandwiches. There are probably other interesting avenues. Overall, I&rsquo;m pretty excited to see what
kind of underhandedness folks come up with!</p>

<p>Of course, underhandedness is not just about fun and games; we should be hardening our code against
this kind of thing. Even if you trust your fellow programmers. Even if <em>you</em> are the sole programmer and you trust yourself.
After all, <a href="https://github.com/Gankro/thesis/blob/master/thesis.pdf">you can&rsquo;t spell Trust without Rust</a>; and Rust is indeed about trust. Specifically,
Rust is about trusting <em>nobody</em>. Not even yourself.</p>

<p><img src="http://manishearth.github.io/images/post/memes/trust-nobody.jpg" width="300"></p>

<p>Rust protects you from your own mistakes when it comes to memory management. But we
should be worried about other kinds of mistakes, too. Many of the techniques used in underhanded
programming involve sleights of hand that could just as well be introduced in the code by accident, causing bugs.
Not memory safety bugs (in Rust), but still, bugs. The existence of these sleights of hand is great for
that very common situation
<a href="https://underhanded.rs/blog/2016/12/15/underhanded-rust.en-US.html#prize">when you are feeling severely under-plushied and must win a competition to replenish your supply</a>
but we really don&rsquo;t want these creeping into real-world code, either by accident or intentionally.</p>

<hr />

<p>Allow me to take a moment out of your busy underhanded-submission-writing schedules to talk to you about
our Lord and Savior <a href="http://github.com/manishearth/rust-clippy/">Clippy</a>.</p>

<p>Clippy is for those of you who have become desensitized to the constant whining of the Rust compiler
and need a higher dosage of whininess to be kept on their toes. Clippy is for those perfectionists
amongst you who want to know every minute thing wrong with their code so that they can fix it.
But really, Clippy is for everyone.</p>

<p>Clippy is simply a large repository of lints. As of the time of writing this post, there are
<a href="https://github.com/manishearth/rust-clippy/#lints">183 lints</a> in it, though not all of them are enabled by default. These use the regular Rust lint
system so you can pick and choose the ones you need via <code>#[allow(lint_name)]</code> and
<code>#[warn(lint_name)]</code>. These lints cover a wide range of functions:</p>

<ul>
<li>Improving readability of the code (though <a href="https://github.com/rust-lang-nursery/rustfmt/">rustfmt</a> is the main tool you should use for this)</li>
<li>Helping make the code more compact by reducing unnecessary things (my absolute favorite is <a href="https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes">needless_lifetimes</a>)</li>
<li>Helping make the code more idiomatic</li>
<li>Making sure you don&rsquo;t do things that you&rsquo;re not supposed to</li>
<li>Catching mistakes and cases where the code may not work as expected</li>
</ul>


<p>The last two really are the ones which help with underhanded code. Just to give an example,
we have lints like:</p>

<ul>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#cmp_nan">cmp_nan</a>, which disallows things like <code>x == NaN</code></li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref">clone_double_ref</a>, which disallows calling <code>.clone()</code> on double-references (<code>&amp;&amp;T</code>), since that&rsquo;s a straightforward copy and you probably meant to do something like <code>(*x).clone()</code></li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option">for_loop_over_option</a>: <code>Option&lt;T&gt;</code> is iterable, and while this is useful when composing iterators, directly iterating over an option is usually an indication of a mistake.</li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#match_same_arms">match_same_arms</a>, which checks for identical match arm bodies (strong indication of a typo)</li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting">suspicious_assignment_formatting</a>, which checks for possible typos with the <code>+=</code> and <code>-=</code> operators</li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#unused_io_amount">unused_io_amount</a>, which ensures that you don&rsquo;t forget that some I/O APIs may not write all bytes in the span of a single call</li>
</ul>


<p>These catch many of the gotchas that might crop up in Rust code. In fact,
I based <a href="https://www.reddit.com/r/rust/comments/3hb0wm/underhanded_rust_contest/cu5yuhr/">my solution of an older, more informal Underhanded Rust contest</a> on one of these.</p>

<h2>Usage</h2>

<p>Clippy is still nightly-only. We hook straight into the compiler&rsquo;s guts to obtain
the information we need, and like most internal compiler APIs, this is completely unstable. This
does mean that you usually need a latest or near-latest nightly for clippy to work, and there will
be times when it won&rsquo;t compile while we&rsquo;re working to update it.</p>

<p>There is a plan to ship clippy as an optional component of rustc releases, which will fix all of
these issues (yay!).</p>

<p>But, for now, you can use clippy via:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rustup install nightly
</span><span class='line'><span class="c"># +nightly not necessary if nightly is your default toolchain</span>
</span><span class='line'>cargo +nightly install clippy
</span><span class='line'><span class="c"># in your project folder</span>
</span><span class='line'>cargo +nightly clippy
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re going to be making it part of the development procedures of a crate
you maintain, you can also <a href="https://github.com/manishearth/rust-clippy/#optional-dependency">make it an optional dependency</a>.</p>

<p>If you&rsquo;re on windows, there&rsquo;s currently a rustup/cargo <a href="https://github.com/rust-lang-nursery/rustup.rs/issues/876">bug</a> where you may have to add
the rustc libs path in your <code>PATH</code> for <code>cargo clippy</code> to work.</p>

<p>There&rsquo;s an experimental project called <a href="https://github.com/killercup/rustfix">rustfix</a> which can automatically apply suggestions from
clippy and rustc to your code. This may help in clippy-izing a large codebase, but it may
also eat your code and/or laundry, so beware.</p>

<h2>Contributing</h2>

<p>There&rsquo;s a <em>lot</em> of work that can be done on clippy. A hundred and eighty lints is just
a start, there are <a href="https://github.com/manishearth/rust-clippy/issues">hundreds more lint ideas filed on the issue tracker</a>. We&rsquo;re
willing to mentor anyone who wants to get involved; and have
<a href="https://github.com/manishearth/rust-clippy/issues?q=is%3Aissue+is%3Aopen+label%3AE-easy">specially tagged &ldquo;easy&rdquo; issues</a> for folks new to compiler internals. In general,
contributing to clippy is a great way to gain an understanding of compiler internals
if you want to contribute to the compiler itself.</p>

<p>If you don&rsquo;t want to write code for clippy, you can also run it on random crates,
open pull requests with fixes, and file bugs on clippy for any false positives that appear.</p>

<p>There are more tips about contributing in <a href="https://github.com/Manishearth/rust-clippy/blob/master/CONTRIBUTING.md">our CONTRIBUTING.md</a>.</p>

<hr />

<p>I hope this helps reduce mistakes and underhandedness in your code!</p>

<p>..unless you&rsquo;re writing code for the Underhanded Rust competition. In that case, underhand away!</p>
]]></content>
  </entry>
  
</feed>
