<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[In Pursuit of Laziness]]></title>
  <link href="http://manishearth.github.io/atom.xml" rel="self"/>
  <link href="http://manishearth.github.io/"/>
  <updated>2015-05-03T05:38:00+05:30</updated>
  <id>http://manishearth.github.io/</id>
  <author>
    <name><![CDATA[Manish Goregaokar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Where Rust Really Shines]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/03/where-rust-really-shines/"/>
    <updated>2015-05-03T03:49:49+05:30</updated>
    <id>http://manishearth.github.io/blog/2015/05/03/where-rust-really-shines</id>
    <content type="html"><![CDATA[<p>Yesterday I was working on a <a href="https://github.com/rust-lang/rust/pull/25027">small feature</a>
for Rust, and came across a situation which really showcased Rust&rsquo;s
awesomeness. I thought I&rsquo;d write about it to</p>

<p>What I was trying to do was give the auto-derive API access to a set of &ldquo;attributes&rdquo; that were on
the item being expanded. What exactly isn&rsquo;t really important, but basically I needed to just add a
field with a list of attributes that&rsquo;s the same as the original attribute list (which was <a href="http://doc.rust-lang.org/std/vec/struct.Vec.html">a heap-allocated
vector</a>).</p>

<p>Sounds straightforward, right? In a language like C++, it would be, because there&rsquo;s only once choice; that is
to clone the vector (i.e. make a copy of the contents) . In a large C++ codebase if I wished to use a pointer I would need to be sure that the vector
isn&rsquo;t deallocated by the time I&rsquo;m done with it, and more importantly, to be sure that no other code pushes to the vector (when a vector overflows its
capacity it will be reallocated, invalidating any other pointers to it). For a smaller codebase this might be possible,
but in this specific case it could have taken me a while to become sure of this. The code was related to the &ldquo;expansion&rdquo;
portion of compilation, where the AST is expanded to a bigger AST. A lot of things change and get moved around, so it is reasonable
to assume that it might not be possible to safely use it. I would have had to find out where the vector is originally
stored; all the entry points for the code I was modifying, and make sure it isn&rsquo;t being mutated (not as hard in Rust, but I would
still need to muck around a large codebase). This is a task which I would not even consider trying in C++.</p>

<p>However, I had another option here, because this was Rust. I could store a reference to the contents of the vector,
precisely, a <a href="http://doc.rust-lang.org/std/primitive.slice.html">slice</a>.
Whilst in C++ I would have to manually go through a lot of code to be sure of safety
(and even after all that be left with code that would be brittle to changes elsewhere
the codebase), in Rust the compiler can do this for me!</p>

<p>Being able to do this was important
&mdash; this code is called quite often for a regular compile, and all those
extra allocations could be heavy, especially given that this was a feature that would be used
by very few.</p>

<p>So first I started off by adding a field to the <code>FieldInfo</code> struct which was a <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R285">slice of attributes</a>. Notice that I added a lifetime specifier, <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R273">the <code>'a</code></a> to the struct definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c-Doc">/// Summary of the relevant parts of a struct/enum field.</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">FieldInfo</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// ...</span>
</span><span class='line'>    <span class="c-Doc">/// The attributes on the field</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">attrs</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For those of you new to Rust, a lifetime is part of the type of a reference. It&rsquo;s related to the scope of the reference, and generally can be treated as
a generic parameter. So, for example, here, I have a <code>FieldInfo</code> with a lifetime parameter of <code>'a</code> where <code>'a</code> is the lifetime of the inner slice of attributes.
If I construct this struct with slices from different scopes, its type will be different each time. Lifetimes can get automatically cast depending on their context however,
and quite often they get elided away, so one doesn&rsquo;t need to specify them that much (aside from struct/enum definitions). You can find more information <a href="http://doc.rust-lang.org/nightly/book/ownership.html#lifetimes">in the Rust book</a></p>

<p>I then updated code everywhere to pass the attributes from <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1440">their source</a>
to <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1155">their destination</a> through the chained methods.
An important thing to note here is that none of the lifetime specifiers you see now were added when I did this. For example, <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1410">the return value
of <code>create_struct_pattern</code></a> was
<code>(P&lt;ast::Pat&gt;, Vec&lt;(Span, Option&lt;Ident&gt;, P&lt;Expr&gt;, &amp;[ast::Attribute])&gt;)</code> at this point, not <code>(P&lt;ast::Pat&gt;, Vec&lt;(Span, Option&lt;Ident&gt;, P&lt;Expr&gt;, &amp;'a [ast::Attribute])&gt;)</code>.
You can ignore the complicated types being passed around, for now just pretend that a slice of attributes was returned.</p>

<p>Now comes the magic. After these small changes necessary for the feature, I basically let the compiler do the rest of the work. See, at this point the code was wrong.
I had forgotten lifetime specifiers in places where they were important, and still wasn&rsquo;t sure if storing a reference would in fact be possible in the first place.
However, the compiler was smart enough to figure things out for me. It would tell me to add lifetime specifiers, and I would add them.</p>

<p>First, the compiler asked me to add <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R297">a lifetime to the <code>FieldInfo</code> parts of <code>SubstructureFields</code></a>. So, the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">enum</span> <span class="n">SubstructureFields</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Struct</span><span class="p">(</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">FieldInfo</span><span class="o">&gt;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">EnumMatching</span><span class="p">(</span><span class="n">usize</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">FieldInfo</span><span class="o">&gt;</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>became</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">enum</span> <span class="n">SubstructureFields</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Struct</span><span class="p">(</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">FieldInfo</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;&gt;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">EnumMatching</span><span class="p">(</span><span class="n">usize</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">FieldInfo</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;&gt;</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This needed to happen because elision doesn&rsquo;t work for structs and enums,
and besides, the compiler would need to know if the <code>&amp;ast::Variant</code> was supposed to be the same lifetime as the parameter of the <code>FieldInfo</code>s. I decided
to just use the existing <code>'a</code> parameter, which meant that yes, the <code>&amp;ast::Variant</code> was supposed to live just as long. I could also have opted to give the <code>FieldInfo</code>s
a different lifetime by adding a <code>'b</code> parameter, but I guessed that it would work this way too (knowing the origin of the fieldinfo and variant, and that implicit lifetime casting would
fix most issues that cropped up). I didn&rsquo;t need to think this out much, though &mdash; the compiler gave me a suggestion and I could simply copy it.</p>

<p>The next error was in <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1463"><code>create_enum_variant_pattern()</code></a>
and <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R1404"><code>create_struct_pattern()</code></a> as well as some other places.</p>

<p>Here, the method had a signature of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">create_enum_variant_pattern</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">cx</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">ExtCtxt</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">enum_ident</span><span class="o">:</span> <span class="n">ast</span><span class="o">::</span><span class="n">Ident</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">variant</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">prefix</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">mutbl</span><span class="o">:</span> <span class="n">ast</span><span class="o">::</span><span class="n">Mutability</span><span class="p">)</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="p">(</span><span class="n">P</span><span class="o">&lt;</span><span class="n">ast</span><span class="o">::</span><span class="n">Pat</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Span</span><span class="p">,</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Ident</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">])</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and I changed it to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">create_enum_variant_pattern</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">cx</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">ExtCtxt</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">enum_ident</span><span class="o">:</span> <span class="n">ast</span><span class="o">::</span><span class="n">Ident</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">variant</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">prefix</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">mutbl</span><span class="o">:</span> <span class="n">ast</span><span class="o">::</span><span class="n">Mutability</span><span class="p">)</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="p">(</span><span class="n">P</span><span class="o">&lt;</span><span class="n">ast</span><span class="o">::</span><span class="n">Pat</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Span</span><span class="p">,</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Ident</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">])</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the code was uncomfortable with taking a slice of attributes out of an arbitrary <code>StructDef</code> reference and returning it. What if the <code>StructDef</code> doesn&rsquo;t live long enough?
Generally the compiler internally figures out the lifetimes necessary and uses them here, but if you have too many references there&rsquo;s no single way to make the fix.
In this case, the compiler suggested I add a <code>'a</code> to <code>&amp;StructDef</code> and the returned <code>&amp;[Attribute]</code>, and I did so. The <code>'a</code> lifetime was declared at <a href="https://github.com/Manishearth/rust/blob/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b/src/libsyntax/ext/deriving/generic/mod.rs#L379">the top of the impl</a>, so it was the lifetime parameter of <code>self</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. This meant that the returned attribute of the function will
have a lifetime tied to <code>self</code> and the input <code>StructDef</code>, and due to this it cannot outlive the inputs, which is what we wanted in the first place. In essence, I took a bit of code that was doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">minicreate</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">variant</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do stuff</span>
</span><span class='line'>    <span class="c1">// return variant.attributes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and changed it to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// we are sure that the returned slice cannot outlive the variant argument</span>
</span><span class='line'><span class="k">fn</span> <span class="n">minicreate</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">variant</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">ast</span><span class="o">::</span><span class="n">Variant</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="p">[</span><span class="n">ast</span><span class="o">::</span><span class="n">Attribute</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do stuff</span>
</span><span class='line'>    <span class="c1">// return variant.attributes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, I didn&rsquo;t need to think this out much &mdash; I followed the suggestion given to me by the compiler (which output a sample function signature)
and moved on. I&rsquo;m only thinking it through now for this blog post.</p>

<p>There were a couple of similar errors elsewhere that were caused by tying these two lifetimes together. Since these methods were chained, updating the lifetimes of a child method
would mean that I would have to now update the parent method which passes its arguments down to the children and returns a modification of its return value (and thus must now impose the
same restrictions on its own signature). All of this was done by just listening to the suggestions of the compiler (which all contain a function signature to try out). In <a href="https://github.com/Manishearth/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b#diff-6fa0bf762b2ef85690cce1a0fd8d5a20R890">some cases</a> I introduced a <code>'b</code> lifetime, because tying it to <code>'a</code>
(the self lifetime parameter) was possibly too restrictive. All of this at the suggestion of the compiler.</p>

<p>While this all seems long and complicated, in reality it wasn&rsquo;t. I simply added the field to the initial struct, tried compiling a couple of times to figure out which code needed updating
to pass around the attributes, and then went through 3-4 more compilation attempts to fix the lifetimes. It didn&rsquo;t take long, and I didn&rsquo;t need to put much mental effort into it. I just
listened to the compiler, and it worked.</p>

<p>And now I trust completely that that code will not cause any segfaults due to attempted access of a destroyed or moved vector. And this is despite the fact that I <em>still</em> don&rsquo;t know
where that particular vector is modified or destroyed &mdash; I didn&rsquo;t explore that far because I didn&rsquo;t need to! (or want to :P)</p>

<p>And this is one place Rust really shines. It lets you do optimizations which you wouldn&rsquo;t dream of doing in C++. In fact, while the C++ way of looking at this problem
would probably be to just clone and move on, most Rust programmers would think of using slices as the default, and not even consider it an &ldquo;optimization&rdquo;. And again, this wasn&rsquo;t
with much cognitive overhead; I could just follow the compiler and it fixed everything for me.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Note: This is not the lifetime of the reference <code>&amp;self</code>, which is the lifetime of the pointer (<code>&amp;'b self</code>), but the lifetime parameter of <code>self</code>, a <code>TraitDef&lt;'a&gt;</code>, which has a lifetime parameter for its child fields.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog!]]></title>
    <link href="http://manishearth.github.io/blog/2015/05/03/new-blog/"/>
    <updated>2015-05-03T03:08:12+05:30</updated>
    <id>http://manishearth.github.io/blog/2015/05/03/new-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ll be moving from my <a href="http://inpursuitoflaziness.blogspot.in/">old Blogger-powered blog</a>
to this new one powered by github pages and Octopress. I never enjoyed writing a blog in WYSIWYG
or HTML (I would constantly switch between both and still get the formatting wrong); Markdown is
my cup of tea.</p>

<p>I may &ldquo;uplift&rdquo; some of my favorite posts to this blog later.</p>

<p>I&rsquo;m quite excited!</p>
]]></content>
  </entry>
  
</feed>
