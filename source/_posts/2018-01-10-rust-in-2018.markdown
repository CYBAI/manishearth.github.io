---
layout: post
title: "Rust in 2018"
date: 2018-01-10 14:16:43 +0530
comments: true
categories: rust programming mozilla
---

A week ago [we put out a call for blog posts for what folks think Rust should do in 2018][cfb].

This is mine.

 [cfb]: https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html



## Overall focus

I think 2017 was a great year for Rust. Near the beginning of the year, after custom derive
and a bunch of things stabilized, I had a strong feeling that Rust was "complete". Not really "finished",
there's still tons of stuff to improve, but this was the first time stable Rust was the language
I wanted it to be, and was something I could recommend for most kinds of work without reservations.

I think this is a good signal to wind down the frightening pace of new features Rust has been getting.
And that happened! We had the impl period, which took some time to focus on _getting things done_ before
proposing new things. And Rust is feeling more polished than ever.

Like [Nick][ncameron-blog], I feel like 2018 should be boring. I feel like we should focus on polishing what
we have, implementing all the things, and improving our approachability as a language.

 [ncameron-blog]: https://www.ncameron.org/blog/rust-2018/

Basically, I want to see this as an extended impl period.

This doesn't mean I'm looking for a moratorium on RFCs, really. Hell, in the past few days I've posted
one pre-pre-RFC[^1], one pre-RFC, and one RFC (from the pre-RFC). I'm mostly looking for _prioritizing_ impl
work over designing new things, but still having _some_ focus on design.


[^1]: This isn't a "pre rfc" because I've written it as a much looser sketch of the problem and a solution

## Language

I think Rust still has some "missing bits" which make it hard to justify for some use cases. Rust's
async story is being fleshed out. We don't yet have stable SIMD or stable inline ASM. The microcontroller
story is kinda iffy. RLS/clippy need nightly. I'd like to see these crystallize and stabilize this year.


I think this year we need to continue to take a critical look at Rust's ergonomics. Last year the
ergonomics initiative was really good for Rust, and I'd like to see more of that. This is kind of at
odds with my "focus on polishing Rust" statement, but fixing ergonomics is not just new features. It's
also about figuring out barriers in Rust, polishing mental models, improving docs/diagnostics, and in
general figuring out how to best present Rust's features. Starting dialogues about confusing bits of
the language and figuring out the best mental model to present them with is something we should
continue doing. Sometimes this may need new features, indeed, but not always. We must continue
to take a critical look at how our language presents itself to newcomers.

## Community

I'd like to see a stronger focus on mentoring. Mentoring on rustc, mentoring on major libraries, mentoring on
Rust tooling, mentoring everywhere. This includes not just the mentors, but the associated infrastructure --
contribution docs, sites like [servo-starters] and [findwork], and similar tooling.

I'm also hoping for more companies to invest back into Rust. This year [Buoyant] became pretty well
known within the community, and many of their employees are paid to work on various important parts
of the Rust ecosystem. There are also multiple consulting groups that contribute to the ecosystem.
It's nice to see that "paid to work on Rust" is no longer limited to Mozilla, and this is crucial
for the health of the language. I hope this trend continues.

Finally, I want to see more companies _talk_ about Rust. Success stories are really nice to hear.
I've heard many amazing success stories this year, but a lot of them are things which can't be shared.


 [servo-starters]: http://starters.servo.org/
 [findwork]: https://www.rustaceans.org/findwork
 [Buoyant]: http://buoyant.io/

## Governance

Last year we started seeing the limits of the RFC process. Large RFCs were stressful for both the RFC authors
and participating community members, and rather opaque for newer community members wishing to participate.
Alternative models have been discussed; I'd like to see more movement on this front.

I'd also like to grow the moderation team; it is currently rather small and doesn't have the capacity to handle
incidents in a timely fashion.


## Docs / Learning

I'd like to see a focus on improving Rust for folks who learn the language by _trying things_ over reading books [^2]&nbsp;[^3].

This means better diagnostics, better alternative resources like rustbyexample, etc. Improving mentorship helps here
as well.

Of course, I'd like to see our normal docs work continue to happen.

 [^2]: There is literally no programming language I've personally learned through a book or formal teaching. I've often read books after I know a language because it's fun and instructive, but it's always started out as "learn extreme basics" followed by "look at existing code, tweak stuff, and write your own code".
 [^3]: Back in _my_ day Rust didn't have a book, just this tiny thing called "The Tutorial". _grouches incessantly_

---------

I'm overall really excited for 2018. I think we're doing great on most fronts so far, and if we
maintain the momentum we'll have an even-more-awesome Rust by the end of this year!
